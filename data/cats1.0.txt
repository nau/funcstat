<init> 0 0
<init> 0 0
compatNewTypeName 2 0
$init$ 0 0
tuple2 2 0
ap3 4 0
map3 4 0
tuple3 3 0
ap4 5 0
map4 5 0
tuple4 4 0
ap5 6 0
map5 6 0
tuple5 5 0
ap6 7 0
map6 7 0
tuple6 6 0
ap7 8 0
map7 8 0
tuple7 7 0
ap8 9 0
map8 9 0
tuple8 8 0
ap9 10 0
map9 10 0
tuple9 9 0
ap10 11 0
map10 11 0
tuple10 10 0
ap11 12 0
map11 12 0
tuple11 11 0
ap12 13 0
map12 13 0
tuple12 12 0
ap13 14 0
map13 14 0
tuple13 13 0
ap14 15 0
map14 15 0
tuple14 14 0
ap15 16 0
map15 16 0
tuple15 15 0
ap16 17 0
map16 17 0
tuple16 16 0
ap17 18 0
map17 18 0
tuple17 17 0
ap18 19 0
map18 19 0
tuple18 18 0
ap19 20 0
map19 20 0
tuple19 19 0
ap20 21 0
map20 21 0
tuple20 20 0
ap21 22 0
map21 22 0
tuple21 21 0
ap22 23 0
map22 23 0
tuple22 22 0
$init$ 0 0
parMap2 4 1
parMap3 5 1
parMap4 6 1
parMap5 7 1
parMap6 8 1
parMap7 9 1
parMap8 10 1
parMap9 11 1
parMap10 12 1
parMap11 13 1
parMap12 14 1
parMap13 15 1
parMap14 16 1
parMap15 17 1
parMap16 18 1
parMap17 19 1
parMap18 20 1
parMap19 21 1
parMap20 22 1
parMap21 23 1
parMap22 24 1
$init$ 0 0
map2 5 2
contramap2 5 2
imap2 6 2
tuple2 4 2
traverse2 6 3
map3 6 2
contramap3 6 2
imap3 7 2
tuple3 5 2
traverse3 7 3
map4 7 2
contramap4 7 2
imap4 8 2
tuple4 6 2
traverse4 8 3
map5 8 2
contramap5 8 2
imap5 9 2
tuple5 7 2
traverse5 9 3
map6 9 2
contramap6 9 2
imap6 10 2
tuple6 8 2
traverse6 10 3
map7 10 2
contramap7 10 2
imap7 11 2
tuple7 9 2
traverse7 11 3
map8 11 2
contramap8 11 2
imap8 12 2
tuple8 10 2
traverse8 12 3
map9 12 2
contramap9 12 2
imap9 13 2
tuple9 11 2
traverse9 13 3
map10 13 2
contramap10 13 2
imap10 14 2
tuple10 12 2
traverse10 14 3
map11 14 2
contramap11 14 2
imap11 15 2
tuple11 13 2
traverse11 15 3
map12 15 2
contramap12 15 2
imap12 16 2
tuple12 14 2
traverse12 16 3
map13 16 2
contramap13 16 2
imap13 17 2
tuple13 15 2
traverse13 17 3
map14 17 2
contramap14 17 2
imap14 18 2
tuple14 16 2
traverse14 18 3
map15 18 2
contramap15 18 2
imap15 19 2
tuple15 17 2
traverse15 19 3
map16 19 2
contramap16 19 2
imap16 20 2
tuple16 18 2
traverse16 20 3
map17 20 2
contramap17 20 2
imap17 21 2
tuple17 19 2
traverse17 21 3
map18 21 2
contramap18 21 2
imap18 22 2
tuple18 20 2
traverse18 22 3
map19 22 2
contramap19 22 2
imap19 23 2
tuple19 21 2
traverse19 23 3
map20 23 2
contramap20 23 2
imap20 24 2
tuple20 22 2
traverse20 24 3
map21 24 2
contramap21 24 2
imap21 25 2
tuple21 23 2
traverse21 25 3
map22 25 2
contramap22 25 2
imap22 26 2
tuple22 24 2
traverse22 26 3
<init> 0 0
$bar$at$bar 1 0
<init> 1 0
$bar$at$bar 1 0
apWith 2 1
map 2 1
contramap 2 1
imap 3 1
<init> 2 0
$bar$at$bar 1 0
apWith 2 1
map 3 2
contramap 3 2
imap 4 2
tupled 2 2
<init> 3 0
$bar$at$bar 1 0
apWith 2 1
map 3 2
contramap 3 2
imap 4 2
tupled 2 2
<init> 4 0
$bar$at$bar 1 0
apWith 2 1
map 3 2
contramap 3 2
imap 4 2
tupled 2 2
<init> 5 0
$bar$at$bar 1 0
apWith 2 1
map 3 2
contramap 3 2
imap 4 2
tupled 2 2
<init> 6 0
$bar$at$bar 1 0
apWith 2 1
map 3 2
contramap 3 2
imap 4 2
tupled 2 2
<init> 7 0
$bar$at$bar 1 0
apWith 2 1
map 3 2
contramap 3 2
imap 4 2
tupled 2 2
<init> 8 0
$bar$at$bar 1 0
apWith 2 1
map 3 2
contramap 3 2
imap 4 2
tupled 2 2
<init> 9 0
$bar$at$bar 1 0
apWith 2 1
map 3 2
contramap 3 2
imap 4 2
tupled 2 2
<init> 10 0
$bar$at$bar 1 0
apWith 2 1
map 3 2
contramap 3 2
imap 4 2
tupled 2 2
<init> 11 0
$bar$at$bar 1 0
apWith 2 1
map 3 2
contramap 3 2
imap 4 2
tupled 2 2
<init> 12 0
$bar$at$bar 1 0
apWith 2 1
map 3 2
contramap 3 2
imap 4 2
tupled 2 2
<init> 13 0
$bar$at$bar 1 0
apWith 2 1
map 3 2
contramap 3 2
imap 4 2
tupled 2 2
<init> 14 0
$bar$at$bar 1 0
apWith 2 1
map 3 2
contramap 3 2
imap 4 2
tupled 2 2
<init> 15 0
$bar$at$bar 1 0
apWith 2 1
map 3 2
contramap 3 2
imap 4 2
tupled 2 2
<init> 16 0
$bar$at$bar 1 0
apWith 2 1
map 3 2
contramap 3 2
imap 4 2
tupled 2 2
<init> 17 0
$bar$at$bar 1 0
apWith 2 1
map 3 2
contramap 3 2
imap 4 2
tupled 2 2
<init> 18 0
$bar$at$bar 1 0
apWith 2 1
map 3 2
contramap 3 2
imap 4 2
tupled 2 2
<init> 19 0
$bar$at$bar 1 0
apWith 2 1
map 3 2
contramap 3 2
imap 4 2
tupled 2 2
<init> 20 0
$bar$at$bar 1 0
apWith 2 1
map 3 2
contramap 3 2
imap 4 2
tupled 2 2
<init> 21 0
$bar$at$bar 1 0
apWith 2 1
map 3 2
contramap 3 2
imap 4 2
tupled 2 2
<init> 22 0
apWith 2 1
map 3 2
contramap 3 2
imap 4 2
tupled 2 2
$init$ 0 0
catsSyntaxTuple1Parallel 1 0
catsSyntaxTuple2Parallel 1 0
catsSyntaxTuple3Parallel 1 0
catsSyntaxTuple4Parallel 1 0
catsSyntaxTuple5Parallel 1 0
catsSyntaxTuple6Parallel 1 0
catsSyntaxTuple7Parallel 1 0
catsSyntaxTuple8Parallel 1 0
catsSyntaxTuple9Parallel 1 0
catsSyntaxTuple10Parallel 1 0
catsSyntaxTuple11Parallel 1 0
catsSyntaxTuple12Parallel 1 0
catsSyntaxTuple13Parallel 1 0
catsSyntaxTuple14Parallel 1 0
catsSyntaxTuple15Parallel 1 0
catsSyntaxTuple16Parallel 1 0
catsSyntaxTuple17Parallel 1 0
catsSyntaxTuple18Parallel 1 0
catsSyntaxTuple19Parallel 1 0
catsSyntaxTuple20Parallel 1 0
catsSyntaxTuple21Parallel 1 0
catsSyntaxTuple22Parallel 1 0
<init> 1 0
parMap 2 1
<init> 1 0
parMapN 2 1
<init> 1 0
parMapN 2 1
<init> 1 0
parMapN 2 1
<init> 1 0
parMapN 2 1
<init> 1 0
parMapN 2 1
<init> 1 0
parMapN 2 1
<init> 1 0
parMapN 2 1
<init> 1 0
parMapN 2 1
<init> 1 0
parMapN 2 1
<init> 1 0
parMapN 2 1
<init> 1 0
parMapN 2 1
<init> 1 0
parMapN 2 1
<init> 1 0
parMapN 2 1
<init> 1 0
parMapN 2 1
<init> 1 0
parMapN 2 1
<init> 1 0
parMapN 2 1
<init> 1 0
parMapN 2 1
<init> 1 0
parMapN 2 1
<init> 1 0
parMapN 2 1
<init> 1 0
parMapN 2 1
<init> 1 0
parMapN 2 1
$init$ 0 0
catsSyntaxTuple1Semigroupal 1 0
catsSyntaxTuple2Semigroupal 1 0
catsSyntaxTuple3Semigroupal 1 0
catsSyntaxTuple4Semigroupal 1 0
catsSyntaxTuple5Semigroupal 1 0
catsSyntaxTuple6Semigroupal 1 0
catsSyntaxTuple7Semigroupal 1 0
catsSyntaxTuple8Semigroupal 1 0
catsSyntaxTuple9Semigroupal 1 0
catsSyntaxTuple10Semigroupal 1 0
catsSyntaxTuple11Semigroupal 1 0
catsSyntaxTuple12Semigroupal 1 0
catsSyntaxTuple13Semigroupal 1 0
catsSyntaxTuple14Semigroupal 1 0
catsSyntaxTuple15Semigroupal 1 0
catsSyntaxTuple16Semigroupal 1 0
catsSyntaxTuple17Semigroupal 1 0
catsSyntaxTuple18Semigroupal 1 0
catsSyntaxTuple19Semigroupal 1 0
catsSyntaxTuple20Semigroupal 1 0
catsSyntaxTuple21Semigroupal 1 0
catsSyntaxTuple22Semigroupal 1 0
<init> 1 0
map 2 1
contramap 2 1
imap 3 1
traverse 3 2
apWith 2 1
<init> 1 0
mapN 3 2
contramapN 3 2
imapN 4 2
tupled 2 2
traverseN 4 3
apWith 2 1
<init> 1 0
mapN 3 2
contramapN 3 2
imapN 4 2
tupled 2 2
traverseN 4 3
apWith 2 1
<init> 1 0
mapN 3 2
contramapN 3 2
imapN 4 2
tupled 2 2
traverseN 4 3
apWith 2 1
<init> 1 0
mapN 3 2
contramapN 3 2
imapN 4 2
tupled 2 2
traverseN 4 3
apWith 2 1
<init> 1 0
mapN 3 2
contramapN 3 2
imapN 4 2
tupled 2 2
traverseN 4 3
apWith 2 1
<init> 1 0
mapN 3 2
contramapN 3 2
imapN 4 2
tupled 2 2
traverseN 4 3
apWith 2 1
<init> 1 0
mapN 3 2
contramapN 3 2
imapN 4 2
tupled 2 2
traverseN 4 3
apWith 2 1
<init> 1 0
mapN 3 2
contramapN 3 2
imapN 4 2
tupled 2 2
traverseN 4 3
apWith 2 1
<init> 1 0
mapN 3 2
contramapN 3 2
imapN 4 2
tupled 2 2
traverseN 4 3
apWith 2 1
<init> 1 0
mapN 3 2
contramapN 3 2
imapN 4 2
tupled 2 2
traverseN 4 3
apWith 2 1
<init> 1 0
mapN 3 2
contramapN 3 2
imapN 4 2
tupled 2 2
traverseN 4 3
apWith 2 1
<init> 1 0
mapN 3 2
contramapN 3 2
imapN 4 2
tupled 2 2
traverseN 4 3
apWith 2 1
<init> 1 0
mapN 3 2
contramapN 3 2
imapN 4 2
tupled 2 2
traverseN 4 3
apWith 2 1
<init> 1 0
mapN 3 2
contramapN 3 2
imapN 4 2
tupled 2 2
traverseN 4 3
apWith 2 1
<init> 1 0
mapN 3 2
contramapN 3 2
imapN 4 2
tupled 2 2
traverseN 4 3
apWith 2 1
<init> 1 0
mapN 3 2
contramapN 3 2
imapN 4 2
tupled 2 2
traverseN 4 3
apWith 2 1
<init> 1 0
mapN 3 2
contramapN 3 2
imapN 4 2
tupled 2 2
traverseN 4 3
apWith 2 1
<init> 1 0
mapN 3 2
contramapN 3 2
imapN 4 2
tupled 2 2
traverseN 4 3
apWith 2 1
<init> 1 0
mapN 3 2
contramapN 3 2
imapN 4 2
tupled 2 2
traverseN 4 3
apWith 2 1
<init> 1 0
mapN 3 2
contramapN 3 2
imapN 4 2
tupled 2 2
traverseN 4 3
apWith 2 1
<init> 1 0
mapN 3 2
contramapN 3 2
imapN 4 2
tupled 2 2
traverseN 4 3
apWith 2 1
$init$ 0 0
unite 3 2
separate 3 2
guard 1 0
compose 1 1
$init$ 0 0
pure 1 0
unit 0 0
map 2 0
replicateA 2 0
compose 1 1
composeContravariantMonoidal 1 1
unlessA 2 0
whenA 2 0
<init> 0 0
monoid 2 2
catsApplicativeForArrow 1 1
coflatMap 1 1
<init> 2 0
empty 0 0
<init> 1 0
pure 1 0
map 2 0
ap 2 0
product 2 0
$init$ 0 0
raiseError 1 0
handleErrorWith 2 0
handleError 2 0
attempt 1 0
attemptT 1 0
recover 2 0
recoverWith 2 0
onError 2 0
catchNonFatal 2 1
catchNonFatalEval 2 1
fromTry 2 1
fromEither 1 0
<init> 0 0
apply 1 1
$init$ 0 0
ap 2 0
productR 2 0
productL 2 0
product 2 0
$less$times$greater 2 0
$times$greater 2 0
$less$times 2 0
followedBy 2 0
forEffect 2 0
ap2 3 0
map2 3 0
map2Eval 3 0
compose 1 1
<init> 0 0
semigroup 2 2
<init> 2 0
combine 2 0
$init$ 0 0
bifoldLeft 4 0
bifoldRight 4 0
bifoldMap 4 1
compose 1 1
$init$ 0 0
F 0 0
G 0 0
bifoldLeft 4 0
bifoldRight 4 0
$init$ 0 0
bimap 3 0
rightFunctor 0 0
leftFunctor 0 0
leftMap 2 0
compose 1 1
leftWiden 1 0
$init$ 0 0
F 0 0
G 0 0
bimap 3 0
<init> 0 0
map 2 0
<init> 0 0
map 2 0
$init$ 0 0
bitraverse 4 1
bisequence 2 1
compose 1 1
bimap 3 0
$init$ 0 0
F 0 0
G 0 0
bitraverse 4 1
$init$ 0 0
coflatMap 2 0
coflatten 1 0
extract 1 0
$init$ 0 0
F 0 0
G 0 0
distribute 3 1
$init$ 0 0
F 0 0
G 0 0
imap 3 0
$init$ 0 0
F 0 0
G 0 0
map 2 0
$init$ 0 0
F 0 0
G 0 0
ap 2 0
product 2 0
$init$ 0 0
F 0 0
G 0 0
pure 1 0
$init$ 0 0
F 0 0
combineK 2 0
$init$ 0 0
F 0 0
empty 0 0
F 0 0
$init$ 0 0
F 0 0
G 0 0
foldLeft 3 0
foldRight 3 0
$init$ 0 0
F 0 0
G 0 0
traverse 3 1
$init$ 0 0
F 0 0
G 0 0
nonEmptyTraverse 3 1
$init$ 0 0
F 0 0
G 0 0
reduceLeftTo 3 0
reduceRightTo 3 0
$init$ 0 0
F 0 0
G 0 0
map 2 0
$init$ 0 0
F 0 0
G 0 0
contramap 2 0
$init$ 0 0
F 0 0
G 0 0
unit 0 0
contramap 2 0
product 2 0
$init$ 0 0
F 0 0
G 0 0
product 2 0
$init$ 0 0
F 0 0
G 0 0
product 2 0
$init$ 0 0
F 0 0
G 0 0
contramap 2 0
$init$ 0 0
F 0 0
G 0 0
imap 3 0
$init$ 0 0
F 0 0
G 0 0
imap 3 0
$init$ 0 0
contramap 2 0
imap 3 0
compose 1 1
narrow 1 0
liftContravariant 1 0
composeFunctor 1 1
$init$ 0 0
trivial 0 0
<init> 0 0
monoid 1 1
<init> 1 0
empty 0 0
$init$ 0 0
composeFunctor 1 1
<init> 0 0
semigroup 1 1
<init> 1 0
combine 2 0
$init$ 0 0
distribute 3 1
cosequence 2 1
compose 1 1
<init> 0 0
value 0 0
map 1 0
flatMap 1 0
memoize 0 0
<init> 1 0
memoize 0 0
<init> 1 0
memoize 0 0
<init> 0 0
apply 1 0
<init> 1 0
value 0 0
memoize 0 0
<init> 0 0
apply 1 0
<init> 0 0
now 1 0
later 1 0
always 1 0
defer 1 0
<init> 1 0
memoize 0 0
value 0 0
advance 1 0
advance1 1 0
<init> 0 0
memoize 0 0
value 0 0
<init> 1 0
memoize 0 0
value 0 0
evaluate 1 0
<init> 0 0
<init> 0 0
map 2 0
pure 1 0
flatMap 2 0
extract 1 0
coflatMap 2 0
<init> 0 0
foldLeft 3 0
foldRight 3 0
reduce 2 1
reduceLeft 2 0
reduceLeftTo 3 0
reduceRight 2 0
reduceRightTo 3 0
reduceRightOption 2 0
reduceRightToOption 3 0
size 1 0
catsOrderForEval 1 1
catsGroupForEval 1 1
<init> 0 0
catsPartialOrderForEval 1 1
catsMonoidForEval 1 1
<init> 0 0
catsEqForEval 1 1
catsSemigroupForEval 1 1
$init$ 0 0
algebra 0 0
combine 2 0
$init$ 0 0
algebra 0 0
$init$ 0 0
algebra 0 0
inverse 1 0
remove 2 0
$init$ 0 0
flatMap 2 0
flatten 1 0
productREval 2 0
followedByEval 2 0
productLEval 2 0
forEffectEval 2 0
ap 2 0
product 2 0
mproduct 2 0
ifM 3 0
tailRecM 2 0
flatTap 2 0
$init$ 0 0
foldLeft 3 0
foldRight 3 0
reduceLeftToOption 3 0
reduceRightToOption 3 0
reduceLeftOption 2 0
reduceRightOption 2 0
minimumOption 2 1
maximumOption 2 1
get 2 0
collectFirst 2 0
collectFirstSome 2 0
fold 2 1
combineAll 2 1
foldMap 3 1
foldM 4 1
foldLeftM 4 1
foldMapM 4 2
traverse_ 3 1
sequence_ 2 1
foldK 2 1
find 2 0
exists 2 0
forall 2 0
existsM 3 1
forallM 3 1
toList 1 0
partitionEither 3 1
filter_ 2 0
takeWhile_ 2 0
dropWhile_ 2 0
isEmpty 1 0
nonEmpty 1 0
intercalate 3 1
intersperseList 2 0
compose 1 1
unorderedFold 2 1
unorderedFoldMap 3 1
<init> 0 0
<init> 0 0
apply 1 0
iterateRight 3 0
<init> 0 0
uncons 0 0
<init> 0 0
<init> 0 0
uncons 0 0
cons 2 0
fromFoldable 2 1
$init$ 0 0
map 2 0
imap 3 0
fmap 2 0
widen 1 0
lift 1 0
void 1 0
fproduct 2 0
as 2 0
tupleLeft 2 0
tupleRight 2 0
compose 1 1
composeContravariant 1 1
<init> 0 0
inj 0 0
prj 0 0
apply 1 0
unapply 1 0
<init> 0 0
catsReflexiveInjectInstance 0 0
catsLeftInjectInstance 0 0
catsRightInjectInstance 1 1
<init> 0 0
apply 1 1
<init> 0 0
inj 0 0
prj 0 0
apply 1 0
unapply 1 0
<init> 0 0
catsReflexiveInjectKInstance 0 0
catsLeftInjectKInstance 0 0
catsRightInjectKInstance 1 1
<init> 0 0
apply 1 1
$init$ 0 0
imap 3 0
compose 1 1
composeFunctor 1 1
composeContravariant 1 1
<init> 0 0
<init> 0 0
imap 3 0
<init> 0 0
imap 3 0
<init> 0 0
imap 3 0
<init> 0 0
imap 3 0
<init> 0 0
imap 3 0
<init> 0 0
imap 3 0
<init> 0 0
imap 3 0
$init$ 0 0
point 1 0
unit 0 0
<init> 0 0
monoid 2 2
<init> 2 0
empty 0 0
$init$ 0 0
composeApply 1 1
<init> 0 0
semigroup 2 2
<init> 2 0
combine 2 0
$init$ 0 0
map 2 0
whileM 3 1
whileM_ 2 0
untilM 3 1
untilM_ 2 0
iterateWhile 2 0
iterateUntil 2 0
iterateWhileM 3 0
iterateUntilM 3 0
$init$ 0 0
ensure 3 0
ensureOr 3 0
adaptError 2 0
rethrow 1 0
<init> 0 0
apply 1 1
$init$ 0 0
empty 0 0
algebra 0 0
compose 0 0
$init$ 0 0
nonEmptyTraverse 3 1
nonEmptySequence 2 1
nonEmptyFlatTraverse 4 2
nonEmptyFlatSequence 3 2
traverse 3 1
compose 1 1
<init> 0 0
<init> 0 0
ambiguousException 0 0
If$u0020you$u0020are$u0020seeing$u0020this$u002C$u0020you$u0020probably$u0020need$u0020to$u0020add$u0020an$u0020explicit$u0020type$u0020parameter$u0020somewhere$u002C$u0020because$u0020Null$u0020is$u0020being$u0020inferred$u002E 0 0
catsAmbiguousNotNullNull2 0 0
catsNotNullForA 0 0
$init$ 0 0
apply 0 0
flatMap 0 0
sequential 0 0
parallel 0 0
parProductR 2 0
parFollowedBy 2 0
parProductL 2 0
parForEffect 2 0
$init$ 0 0
applicative 0 0
monad 0 0
apply 0 0
flatMap 0 0
applicativeError 1 1
<init> 0 0
apply 1 1
<init> 0 0
apply 1 1
parSequence 3 2
parTraverse 4 2
parFlatTraverse 5 3
parFlatSequence 4 3
parSequence_ 3 2
parTraverse_ 4 2
parNonEmptySequence 3 2
parNonEmptyTraverse 4 2
parNonEmptyFlatTraverse 5 3
parNonEmptyFlatSequence 4 3
parNonEmptySequence_ 3 2
parNonEmptyTraverse_ 4 2
parAp 3 1
parProduct 3 1
parAp2 4 1
applicativeError 2 2
identity 1 1
$init$ 0 0
reduceLeft 2 0
reduceRight 2 0
reduce 2 1
reduceK 2 1
reduceMap 3 1
reduceLeftTo 3 0
reduceLeftM 4 1
reduceMapM 4 2
reduceLeftToOption 3 0
reduceRightTo 3 0
reduceRightToOption 3 0
nonEmptyTraverse_ 3 1
nonEmptySequence_ 2 1
toNonEmptyList 1 0
compose 1 1
minimum 2 1
maximum 2 1
nonEmptyIntercalate 3 1
nonEmptyPartition 2 0
isEmpty 1 0
nonEmpty 1 0
minimumOption 2 1
maximumOption 2 1
<init> 1 1
split 1 0
foldLeft 3 0
foldRight 3 0
reduceLeftTo 3 0
reduceRightTo 3 0
size 1 0
get 2 0
fold 2 1
foldM 4 1
find 2 0
exists 2 0
forall 2 0
toList 1 0
toNonEmptyList 1 0
filter_ 2 0
takeWhile_ 2 0
dropWhile_ 2 0
$init$ 0 0
combineK 2 0
algebra 0 0
compose 0 0
product 2 0
<init> 0 0
<init> 0 0
apply 1 1
show 1 0
$init$ 0 0
typeClassInstance 0 0
self 0 0
show 0 0
$init$ 0 0
toShow 2 1
show 1 0
fromToString 0 0
<init> 1 0
<init> 0 0
mat 2 1
<init> 1 0
show 1 0
<init> 0 0
contramap 2 0
$init$ 0 0
tailRecM 2 0
$init$ 0 0
traverse 3 1
flatTraverse 4 2
sequence 2 1
flatSequence 3 2
compose 1 1
map 2 0
mapWithIndex 2 0
traverseWithIndexM 3 1
zipWithIndex 1 0
unorderedTraverse 3 1
unorderedSequence 2 1
$init$ 0 0
unorderedFoldMap 3 1
unorderedFold 2 1
isEmpty 1 0
nonEmpty 1 0
exists 2 0
forall 2 0
size 1 0
<init> 0 0
<init> 0 0
combine 2 0
<init> 0 0
combine 2 0
commutativeMonoidEval 1 1
$init$ 0 0
unorderedTraverse 3 1
unorderedSequence 2 1
$init$ 0 0
lift 1 0
id 0 0
dimap 3 0
second 1 0
split 2 0
merge 2 0
$init$ 0 0
choose 2 0
left 1 0
right 1 0
choice 2 0
$init$ 0 0
id 0 0
algebraK 0 0
algebra 0 0
$init$ 0 0
choice 2 0
codiagonal 0 0
$init$ 0 0
compose 2 0
andThen 2 0
algebraK 0 0
algebra 0 0
$init$ 0 0
apply 1 0
compose 1 0
andThen 1 0
or 1 0
and 1 0
<init> 0 0
id 0 0
lift 1 0
<init> 0 0
lift 4 2
<init> 1 0
lift 3 2
unblock 1 0
punchHole 1 0
$init$ 0 0
dimap 3 0
lmap 2 0
rmap 2 0
first 1 0
second 1 0
<init> 1 0
dimap 3 1
lmap 2 1
map 1 0
contramapValue 1 0
flatMap 1 0
compose 2 1
andThen 2 1
first 1 1
second 1 1
<init> 0 0
pure 1 0
<init> 0 0
<init> 0 0
F 0 0
catsDataMonadForCokleisli 0 0
catsDataMonoidKForCokleisli 1 1
<init> 0 0
catsDataArrowForCokleisli 1 1
<init> 0 0
catsDataComposeForCokleisli 1 1
catsDataProfunctorForCokleisli 1 1
catsDataSemigroupKForCokleisli 1 1
catsDataContravariantForCokleisli 1 1
<init> 0 0
pure 1 0
flatMap 2 0
map 2 0
tailRecM 2 0
$init$ 0 0
F 0 0
lift 1 0
first 1 0
second 1 0
dimap 3 0
split 2 0
$init$ 0 0
F 0 0
compose 2 0
$init$ 0 0
F 0 0
dimap 3 0
lmap 2 0
rmap 2 0
<init> 1 0
retag 0 0
combine 2 1
traverse 2 1
$eq$eq$eq 2 1
partialCompare 2 1
compare 2 1
show 1 1
<init> 0 0
empty 1 1
<init> 1 0
apply 1 0
of 0 0
<init> 0 0
catsDataOrderForConst 1 1
catsDataShowForConst 1 1
catsDataContravariantMonoidalForConst 1 1
catsDataTraverseForConst 0 0
catsDataMonoidForConst 1 1
<init> 0 0
bifoldLeft 4 0
bifoldRight 4 0
<init> 0 0
catsDataSemigroupForConst 1 1
catsDataContravariantForConst 0 0
catsDataPartialOrderForConst 1 1
catsDataApplicativeForConst 1 1
<init> 0 0
catsDataEqForConst 1 1
catsDataApplyForConst 1 1
<init> 1 0
map 3 2
mapK 1 0
coflatMap 3 2
coflatten 2 2
extract 2 2
contramap 3 2
foldRight 4 2
foldLeft 4 2
foldMap 4 3
traverse 4 3
isLeft 0 0
isRight 0 0
swap 0 0
toValidated 0 0
fold 2 0
<init> 0 0
leftc 1 0
rightc 1 0
<init> 0 0
apply 1 0
<init> 0 0
apply 1 0
left 0 0
right 0 0
<init> 0 0
catsDataEqForEitherK 1 1
catsDataFunctorForEitherK 2 2
catsDataFoldableForEitherK 2 2
<init> 0 0
catsDataContravariantForEitherK 2 2
<init> 0 0
catsDataCoflatMapForEitherK 2 2
<init> 0 0
catsDataTraverseForEitherK 2 2
<init> 0 0
catsDataComonadForEitherK 2 2
$init$ 0 0
F 0 0
G 0 0
map 2 0
$init$ 0 0
F 0 0
G 0 0
contramap 2 0
$init$ 0 0
F 0 0
G 0 0
foldRight 3 0
foldLeft 3 0
size 1 0
get 2 0
foldMap 3 1
$init$ 0 0
F 0 0
G 0 0
map 2 0
traverse 3 1
$init$ 0 0
F 0 0
G 0 0
map 2 0
coflatMap 2 0
coflatten 1 0
$init$ 0 0
F 0 0
G 0 0
extract 1 0
<init> 1 0
fold 3 1
isLeft 1 1
isRight 1 1
swap 1 1
getOrElse 2 1
getOrElseF 2 1
orElse 2 1
recover 2 1
recoverWith 2 1
valueOr 2 1
forall 2 1
exists 2 1
ensure 3 1
ensureOr 3 1
toOption 1 1
to 2 2
collectRight 2 2
bimap 3 1
bitraverse 4 2
applyAlt 2 1
flatMap 2 1
flatMapF 2 1
transform 2 1
subflatMap 2 1
map 2 1
mapK 1 0
semiflatMap 2 1
leftMap 2 1
leftFlatMap 2 1
leftSemiflatMap 2 1
compare 2 1
partialCompare 2 1
$eq$eq$eq 2 1
traverse 3 2
foldLeft 3 1
foldRight 3 1
merge 2 2
combine 3 2
toValidated 1 1
toValidatedNel 1 1
withValidated 2 1
show 1 1
toNested 0 0
toNestedValidated 1 1
toNestedValidatedNel 1 1
<init> 0 0
<init> 1 0
apply 2 1
left 0 0
<init> 1 0
apply 2 1
leftT 0 0
<init> 1 0
apply 2 1
right 0 0
<init> 1 0
apply 2 1
pure 0 0
rightT 0 0
liftF 2 1
liftK 1 1
liftT 2 1
fromEither 0 0
<init> 1 0
apply 2 1
fromOption 0 0
<init> 1 0
apply 3 1
fromOptionF 3 1
cond 0 0
<init> 1 0
apply 4 1
<init> 0 0
catsDataOrderForEitherT 1 1
catsDataShowForEitherT 1 1
catsDataBifunctorForEitherT 1 1
catsDataTraverseForEitherT 1 1
catsMonoidForEitherT 1 1
<init> 0 0
catsSemigroupForEitherT 1 1
catsDataFoldableForEitherT 1 1
catsDataPartialOrderForEitherT 1 1
catsDataBitraverseForEitherT 1 1
catsDataMonadErrorForEitherT 1 1
<init> 0 0
catsDataMonadErrorFForEitherT 1 1
catsDataSemigroupKForEitherT 1 1
catsDataEqForEitherT 1 1
<init> 0 0
catsDataFunctorForEitherT 1 1
$init$ 0 0
combine 2 0
$init$ 0 0
empty 0 0
$init$ 0 0
combineK 2 0
$init$ 0 0
map 2 0
$init$ 0 0
pure 1 0
flatMap 2 0
tailRecM 2 0
$init$ 0 0
handleErrorWith 2 0
raiseError 1 0
$init$ 0 0
handleErrorWith 2 0
handleError 2 0
raiseError 1 0
attempt 1 0
recover 2 0
recoverWith 2 0
$init$ 0 0
F0 0 0
foldLeft 3 0
foldRight 3 0
$init$ 0 0
F0 0 0
traverse 3 1
$init$ 0 0
F0 0 0
bifoldLeft 4 0
bifoldRight 4 0
$init$ 0 0
F0 0 0
bitraverse 4 1
$init$ 0 0
F0 0 0
eqv 2 0
$init$ 0 0
F0 0 0
partialCompare 2 0
$init$ 0 0
F0 0 0
compare 2 0
<init> 0 0
run 0 0
map 2 1
mapK 1 0
<init> 0 0
func 1 0
appFunc 2 1
<init> 0 0
catsDataApplicativeForFunc 1 1
<init> 0 0
catsDataApplyForFunc 1 1
<init> 0 0
catsDataFunctorForFunc 1 1
catsDataContravariantForFunc 1 1
$init$ 0 0
F 0 0
map 2 0
$init$ 0 0
F 0 0
contramap 2 0
$init$ 0 0
F 0 0
ap 2 0
product 2 0
$init$ 0 0
F 0 0
pure 1 0
<init> 0 0
F 0 0
product 1 0
compose 1 0
andThen 1 0
map 1 0
traverse 2 1
<init> 0 0
<init> 0 0
appFuncApplicative 1 1
$init$ 0 0
F 0 0
map 2 0
ap 2 0
product 2 0
pure 1 0
<init> 1 0
map 2 1
mapK 1 0
flatMap 2 1
flatMapF 2 1
foldLeft 3 1
foldRight 3 1
reduceLeftTo 3 1
reduceRightTo 3 1
traverse 3 2
nonEmptyTraverse 3 2
ap 2 1
<init> 0 0
pure 2 1
$init$ 0 0
map 2 0
$init$ 0 0
ap 2 0
map2Eval 3 0
$init$ 0 0
pure 1 0
$init$ 0 0
unit 0 0
contramap 2 0
product 2 0
$init$ 0 0
flatMap 2 0
tailRecM 2 0
$init$ 0 0
foldLeft 3 0
foldRight 3 0
size 1 0
get 2 0
$init$ 0 0
traverse 3 1
$init$ 0 0
nonEmptyTraverse 3 1
reduceLeftTo 3 0
reduceRightTo 3 0
<init> 0 0
catsDataCommutativeFlatMapForIdT 1 1
<init> 0 0
catsDataCommutativeMonadForIdT 1 1
<init> 0 0
catsDataContravariantMonoidalForIdT 1 1
<init> 0 0
catsDataFunctorForIdT 1 1
<init> 0 0
catsDataApplyForIdT 1 1
<init> 0 0
catsDataApplicativeForIdT 1 1
<init> 0 0
catsDataFlatMapForIdT 1 1
<init> 0 0
catsDataMonadForIdT 1 1
catsDataFoldableForIdT 1 1
<init> 0 0
catsDataTraverseForIdT 1 1
catsDataEqForIdT 1 1
<init> 0 0
catsDataNonEmptyTraverseForIdT 1 1
catsDataOrderForIdT 1 1
catsDataShowForIdT 1 1
<init> 1 0
contramap 2 1
local 2 1
map 2 1
mapK 2 1
bimap 3 1
dimap 3 1
mapWritten 2 1
flatMap 3 2
flatMapF 2 1
transform 2 1
transformF 3 2
transformS 3 1
modify 2 1
inspect 2 1
get 1 1
tell 3 2
written 1 1
reset 2 2
run 3 1
runEmpty 3 2
runA 3 1
runS 3 1
runL 3 1
runEmptyA 3 2
runEmptyS 3 2
runEmptyL 3 2
$init$ 0 0
pure 3 2
liftF 3 2
liftK 2 2
lift 3 2
inspect 3 2
inspectF 3 2
set 3 2
setF 3 2
ask 2 2
tell 2 1
tellF 2 1
get 2 2
<init> 0 0
apply 2 1
applyF 1 0
modify 3 2
modifyF 3 2
<init> 0 0
apply 2 1
applyF 1 0
modify 3 2
modifyF 3 2
<init> 0 0
apply 2 1
pure 2 1
modify 2 1
inspect 2 1
get 1 1
set 2 1
ask 1 1
tell 1 0
<init> 0 0
catsDataProfunctorForIRWST 1 1
catsDataBifunctorForIRWST 1 1
catsDataContravariantForIRWST 1 1
catsDataMonadErrorForIRWST 2 2
<init> 0 0
catsDataMonadForRWST 2 2
catsDataStrongForIRWST 1 1
<init> 0 0
catsDataAlternativeForIRWST 3 3
<init> 0 0
catsDataSemigroupKForIRWST 2 2
catsDataFunctorForIRWST 1 1
<init> 0 0
F 0 0
map 2 0
<init> 0 0
F 0 0
contramap 2 0
<init> 0 0
F 0 0
dimap 3 0
<init> 0 0
F 0 0
first 1 0
second 1 0
<init> 0 0
F 0 0
bimap 3 0
<init> 0 0
F 0 0
L 0 0
pure 1 0
flatMap 2 0
tailRecM 2 0
<init> 0 0
F 0 0
G 0 0
combineK 2 0
<init> 0 0
F 0 0
G 0 0
L 0 0
combineK 2 0
empty 0 0
pure 1 0
ap 2 0
<init> 0 0
F 0 0
raiseError 1 0
handleErrorWith 2 0
<init> 1 0
flatMap 2 1
flatMapF 2 1
map 2 1
mapK 2 1
contramap 2 1
bimap 3 1
dimap 3 1
run 2 1
runS 2 1
runA 2 1
runEmpty 2 2
runEmptyS 2 2
runEmptyA 2 2
transform 2 1
transformF 3 2
transformS 3 1
modify 2 1
inspect 2 1
get 1 1
$init$ 0 0
pure 2 1
liftF 2 1
liftK 1 1
lift 2 1
inspect 2 1
inspectF 2 1
get 1 1
<init> 0 0
apply 2 1
applyF 1 0
modify 2 1
modifyF 2 1
set 2 1
setF 2 1
<init> 0 0
apply 2 1
applyF 1 0
modify 2 1
modifyF 2 1
set 2 1
setF 2 1
<init> 0 0
catsDataAlternativeForIndexedStateT 2 2
<init> 0 0
catsDataMonadErrorForIndexedStateT 1 1
catsDataSemigroupKForIndexedStateT 2 2
<init> 0 0
catsDataMonadForIndexedStateT 1 1
<init> 0 0
catsDataFunctorForIndexedStateT 1 1
catsDataContravariantForIndexedStateT 1 1
catsDataProfunctorForIndexedStateT 1 1
catsDataBifunctorForIndexedStateT 1 1
<init> 0 0
catsDataStrongForIndexedStateT 1 1
<init> 0 0
apply 1 0
pure 1 0
modify 1 0
inspect 1 0
get 0 0
set 1 0
<init> 0 0
F 0 0
map 2 0
<init> 0 0
F 0 0
contramap 2 0
<init> 0 0
F 0 0
bimap 3 0
<init> 0 0
F 0 0
dimap 3 0
<init> 0 0
F 0 0
first 1 0
second 1 0
<init> 0 0
F 0 0
pure 1 0
flatMap 2 0
tailRecM 2 0
<init> 0 0
F 0 0
G 0 0
combineK 2 0
<init> 0 0
F 0 0
G 0 0
unit 0 0
contramap 2 0
product 2 0
contramap2 3 0
<init> 0 0
G 0 0
combineK 2 0
empty 0 0
<init> 0 0
F 0 0
raiseError 1 0
handleErrorWith 2 0
<init> 0 0
fold 3 0
putLeft 1 0
putRight 1 0
isLeft 0 0
isRight 0 0
isBoth 0 0
left 0 0
right 0 0
onlyLeft 0 0
onlyRight 0 0
onlyLeftOrRight 0 0
onlyBoth 0 0
pad 0 0
unwrap 0 0
toEither 0 0
toValidated 0 0
toOption 0 0
toList 0 0
to 1 1
swap 0 0
exists 1 0
forall 1 0
getOrElse 1 0
valueOr 2 1
bimap 2 0
map 1 0
leftMap 1 0
flatMap 2 1
foreach 1 0
traverse 2 1
foldLeft 2 0
foldRight 2 0
merge 2 2
mergeLeft 1 1
mergeRight 1 1
combine 3 2
$eq$eq$eq 3 2
show 2 2
<init> 0 0
<init> 1 0
<init> 1 0
<init> 2 0
<init> 0 0
catsDataEqForIor 2 2
catsDataShowForIor 2 2
catsDataSemigroupForIor 2 2
catsDataMonadErrorForIor 1 1
catsDataBifunctorForIor 0 0
catsDataParallelForIor 1 1
<init> 0 0
catsDataTraverseFunctorForIor 0 0
$init$ 0 0
left 1 0
right 1 0
both 2 0
leftNel 1 0
bothNel 2 0
fromOptions 2 0
fromEither 1 0
<init> 1 0
fold 4 1
isLeft 1 1
isRight 1 1
isBoth 1 1
swap 1 1
getOrElse 2 1
getOrElseF 2 1
valueOr 3 2
forall 2 1
exists 2 1
toOption 1 1
toEither 1 1
toNested 0 0
toNestedValidated 1 1
toValidated 1 1
to 2 2
collectRight 2 2
merge 3 3
show 1 1
map 2 1
mapK 1 0
bimap 3 1
leftMap 2 1
leftFlatMap 3 2
leftSemiflatMap 2 1
transform 2 1
applyAlt 3 2
flatMap 3 2
flatMapF 3 2
subflatMap 3 2
semiflatMap 2 1
traverse 3 2
foldLeft 3 1
foldRight 3 1
$eq$eq$eq 2 1
combine 4 3
<init> 0 0
<init> 1 0
apply 2 1
left 0 0
<init> 1 0
apply 2 1
leftT 0 0
<init> 1 0
apply 2 1
right 0 0
rightT 0 0
both 3 1
<init> 1 0
apply 3 1
bothT 0 0
<init> 1 0
apply 2 1
pure 0 0
liftF 2 1
liftK 1 1
<init> 1 0
apply 2 1
fromIor 0 0
<init> 1 0
apply 2 1
fromEither 0 0
fromEitherF 2 1
<init> 1 0
apply 3 1
fromOption 0 0
fromOptionF 3 1
<init> 1 0
apply 4 1
cond 0 0
condF 4 1
<init> 0 0
catsDataShowForIorT 1 1
catsDataBifunctorForIorT 1 1
catsDataTraverseForIorT 1 1
catsDataMonoidForIorT 1 1
catsDataParallelForIorTWithParallelEffect 2 2
<init> 0 0
catsDataSemigroupForIorT 1 1
catsDataFoldableForIorT 1 1
catsDataMonadErrorForIorT 2 2
catsDataParallelForIorTWithSequentialEffect 2 2
<init> 0 0
catsDataMonadErrorFForIorT 2 2
catsDataEqForIorT 1 1
<init> 0 0
catsDataFunctorForIorT 1 1
$init$ 0 0
F0 0 0
map 2 0
$init$ 0 0
F0 0 0
eqv 2 0
$init$ 0 0
A0 0 0
F0 0 0
pure 1 0
flatMap 2 0
tailRecM 2 0
$init$ 0 0
raiseError 1 0
handleErrorWith 2 0
$init$ 0 0
F0 0 0
raiseError 1 0
handleErrorWith 2 0
$init$ 0 0
F0 0 0
combine 2 0
$init$ 0 0
F0 0 0
empty 0 0
$init$ 0 0
F0 0 0
foldLeft 3 0
foldRight 3 0
$init$ 0 0
F0 0 0
traverse 3 1
<init> 1 0
ap 2 1
dimap 3 1
map 2 1
mapF 1 0
mapK 1 0
flatMap 2 1
flatMapF 2 1
andThen 2 1
andThen 2 1
compose 2 1
compose 2 1
traverse 3 2
lift 1 1
local 1 0
transform 1 0
lower 1 1
first 1 1
second 1 1
tap 1 1
tapWith 2 1
toReader 0 0
apply 1 0
<init> 0 0
$init$ 0 0
liftF 1 0
liftK 0 0
lift 1 0
pure 2 1
ask 1 1
local 2 0
$init$ 0 0
endoSemigroupK 1 1
endoMonoidK 1 1
<init> 0 0
catsDataCommutativeMonadForKleisli 1 1
catsDataArrowChoiceForKleisli 1 1
<init> 0 0
catsDataMonoidForKleisli 1 1
catsDataMonadErrorForKleisli 1 1
catsDataMonadForKleisliId 0 0
catsDataContravariantMonoidalForKleisli 1 1
<init> 0 0
catsDataMonadForKleisli 1 1
catsDataCommutativeArrowForKleisli 1 1
catsDataParallelForKleisli 1 1
catsDataContravariantForKleisli 0 0
<init> 0 0
catsDataAlternativeForKleisli 1 1
<init> 0 0
catsDataMonoidKForKleisli 1 1
catsDataFlatMapForKleisli 1 1
catsDataChoiceForKleisli 1 1
catsDataComposeForKleisli 1 1
catsDataStrongForKleisli 1 1
catsDataSemigroupForKleisli 1 1
<init> 0 0
catsDataSemigroupKForKleisli 1 1
catsDataApplicativeErrorForKleisli 1 1
catsDataCommutativeFlatMapForKleisli 1 1
<init> 0 0
catsDataApplicativeForKleisli 1 1
<init> 0 0
catsDataApplyForKleisli 1 1
<init> 0 0
catsDataDistributiveForKleisli 1 1
<init> 0 0
catsDataFunctorForKleisli 1 1
F 0 0
$init$ 0 0
F 0 0
lift 1 0
split 2 0
choose 2 0
$init$ 0 0
F 0 0
lmap 2 0
rmap 2 0
dimap 3 0
first 1 0
second 1 0
$init$ 0 0
choice 2 0
$init$ 0 0
F 0 0
id 0 0
$init$ 0 0
F 0 0
compose 2 0
$init$ 0 0
FB 0 0
combine 2 0
$init$ 0 0
FB 0 0
empty 0 0
$init$ 0 0
F 0 0
combineK 2 0
$init$ 0 0
F 0 0
empty 0 0
F 0 0
$init$ 0 0
F 0 0
unit 0 0
contramap 2 0
product 2 0
F 0 0
$init$ 0 0
F 0 0
raiseError 1 0
handleErrorWith 2 0
F 0 0
$init$ 0 0
F 0 0
flatMap 2 0
tailRecM 2 0
$init$ 0 0
F 0 0
pure 1 0
$init$ 0 0
F 0 0
ap 2 0
product 2 0
$init$ 0 0
F 0 0
map 2 0
$init$ 0 0
F 0 0
distribute 3 1
map 2 0
<init> 1 0
mapK 1 0
<init> 0 0
<init> 0 0
catsDataEqForNested 1 1
catsDataNonEmptyTraverseForNested 2 2
catsDataContravariantMonoidalForApplicativeForNested 2 2
<init> 0 0
catsDataTraverseForNested 2 2
<init> 0 0
catsDataReducibleForNested 2 2
catsDataFunctorForContravariantForNested 2 2
<init> 0 0
catsDataFoldableForNested 2 2
catsDataContravariantForCovariantNested 2 2
<init> 0 0
catsDataAlternativeForNested 2 2
catsDataContravariantForContravariantNested 2 2
<init> 0 0
catsDataApplicativeErrorForNested 2 2
<init> 0 0
catsDataCommutativeApplicativeForNestedContravariant 2 2
catsDataMonoidKForNested 1 1
<init> 0 0
catsDataCommutativeApplyForNestedContravariant 2 2
catsDataSemigroupKForNested 1 1
<init> 0 0
catsDataApplicativeForNested 2 2
<init> 0 0
catsDataApplyForNested 2 2
catsDataDistributiveForNested 2 2
<init> 0 0
catsDataInvariantSemigroupalApplyForNested 2 2
<init> 0 0
catsDataFunctorForNested 2 2
<init> 0 0
catsDataInvariantForNested 2 2
<init> 0 0
catsDataInvariantForCovariantNested 2 2
<init> 0 0
catsDataInvariantForNestedContravariant 2 2
$init$ 0 0
FG 0 0
imap 3 0
$init$ 0 0
FG 0 0
map 2 0
$init$ 0 0
FG 0 0
ap 2 0
product 2 0
$init$ 0 0
FG 0 0
pure 1 0
<init> 0 0
G 0 0
AEF 0 0
FG 0 0
raiseError 1 0
handleErrorWith 2 0
$init$ 0 0
FG 0 0
combineK 2 0
$init$ 0 0
FG 0 0
empty 0 0
FG 0 0
$init$ 0 0
FG 0 0
foldLeft 3 0
foldRight 3 0
$init$ 0 0
FG 0 0
traverse 3 1
$init$ 0 0
FG 0 0
distribute 3 1
$init$ 0 0
FG 0 0
reduceLeftTo 3 0
reduceRightTo 3 0
$init$ 0 0
FG 0 0
nonEmptyTraverse 3 1
$init$ 0 0
FG 0 0
contramap 2 0
$init$ 0 0
FG 0 0
unit 0 0
contramap 2 0
product 2 0
$init$ 0 0
FG 0 0
imap 3 0
product 2 0
<init> 2 0
toList 0 0
last 0 0
init 0 0
size 0 0
length 0 0
map 1 0
$plus$plus 1 0
concat 1 0
concat 1 0
concatNel 1 0
flatMap 1 0
$colon$colon 1 0
prepend 1 0
$colon$colon$colon 1 0
filter 1 0
filterNot 1 0
collect 1 0
find 1 0
exists 1 0
forall 1 0
foldLeft 2 0
foldRight 2 0
reduceLeft 1 0
reduce 1 1
traverse 2 1
coflatMap 1 0
$eq$eq$eq 2 1
show 1 1
toString 0 0
distinct 1 1
reverse 0 0
zipWith 2 0
zipWithIndex 0 0
sortBy 2 1
sorted 1 1
groupBy 2 1
<init> 0 0
of 2 0
ofInitLast 2 0
one 1 0
fromList 1 0
fromListUnsafe 1 0
fromFoldable 2 1
fromReducible 2 1
<init> 1 0
<init> 0 0
apply 1 0
<init> 0 0
ap 2 0
map 2 0
product 2 0
zipNelEq 1 1
<init> 0 0
<init> 0 0
combineK 2 0
split 1 0
reduceLeft 2 0
reduce 2 1
map 2 0
pure 1 0
flatMap 2 0
coflatMap 2 0
extract 1 0
nonEmptyTraverse 3 1
traverse 3 1
foldLeft 3 0
foldRight 3 0
foldMap 3 1
tailRecM 2 0
fold 2 1
nonEmptyPartition 2 0
find 2 0
forall 2 0
exists 2 0
toList 1 0
toNonEmptyList 1 0
get 2 0
catsDataShowForNonEmptyList 1 1
catsDataSemigroupForNonEmptyList 0 0
catsDataOrderForNonEmptyList 1 1
catsDataNonEmptyParallelForNonEmptyList 0 0
<init> 0 0
catsDataPartialOrderForNonEmptyList 1 1
<init> 0 0
catsDataEqForNonEmptyList 1 1
$init$ 0 0
A0 0 0
eqv 2 0
$init$ 0 0
A0 0 0
partialCompare 2 0
<init> 0 0
A0 0 0
compare 2 0
<init> 1 0
get 1 0
getUnsafe 1 0
updated 2 0
updatedUnsafe 2 0
head 0 0
tail 0 0
last 0 0
init 0 0
filter 1 0
filterNot 1 0
collect 1 0
$plus$plus 1 0
$plus$plus$colon 1 0
concat 1 0
concatNev 1 0
append 1 0
$colon$plus 1 0
prepend 1 0
$plus$colon 1 0
find 1 0
exists 1 0
forall 1 0
foldLeft 2 0
foldRight 2 0
map 1 0
flatMap 1 0
reduceLeft 1 0
reduce 1 1
$eq$eq$eq 2 1
show 1 1
length 0 0
toString 0 0
distinct 1 1
zipWith 2 0
reverse 0 0
zipWithIndex 0 0
sortBy 2 1
sorted 1 1
<init> 0 0
<init> 0 0
combineK 2 0
split 1 0
size 1 0
reduceLeft 2 0
reduce 2 1
map 2 0
pure 1 0
flatMap 2 0
coflatMap 2 0
extract 1 0
nonEmptyTraverse 3 1
traverse 3 1
zipWithIndex 1 0
foldLeft 3 0
foldRight 3 0
foldMap 3 1
nonEmptyPartition 2 0
get 2 0
tailRecM 2 0
fold 2 1
find 2 0
forall 2 0
exists 2 0
toList 1 0
toNonEmptyList 1 0
catsDataEqForNonEmptyVector 1 1
catsDataShowForNonEmptyVector 1 1
catsDataSemigroupForNonEmptyVector 0 0
catsDataParallelForNonEmptyVector 0 0
<init> 0 0
apply 2 0
of 2 0
one 1 0
unapply 1 0
fromVector 1 0
fromVectorUnsafe 1 0
<init> 1 0
<init> 0 0
apply 1 0
<init> 0 0
ap 2 0
map 2 0
product 2 0
zipNevEq 1 1
<init> 2 0
unwrap 1 1
filter 3 2
combine 2 1
find 2 1
exists 2 1
forall 2 1
reduceLeft 2 1
foldLeft 3 1
foldRight 3 1
map 2 1
mapK 1 0
$eq$eq$eq 3 2
show 2 2
<init> 0 0
catsDataParallelForOneAnd 3 3
catsDataEqForOneAnd 2 2
catsDataShowForOneAnd 2 2
catsDataSemigroupKForOneAnd 1 1
catsDataSemigroupForOneAnd 1 1
catsDataReducibleForOneAnd 1 1
catsDataMonadForOneAnd 2 2
<init> 0 0
<init> 0 0
coflatMap 2 0
extract 1 0
map 2 0
<init> 0 0
catsDataFunctorForOneAnd 1 1
<init> 0 0
catsDataApplicativeForOneAnd 1 1
<init> 0 0
catsDataTraverseForOneAnd 1 1
<init> 0 0
catsDataNonEmptyTraverseForOneAnd 2 2
<init> 0 0
<init> 1 0
fold 3 1
cata 3 1
map 2 1
mapK 1 0
semiflatMap 2 1
mapFilter 2 1
flatMap 2 1
flatMapF 2 1
transform 2 1
subflatMap 2 1
getOrElse 2 1
getOrElseF 2 1
collect 2 1
exists 2 1
filter 2 1
withFilter 2 1
filterNot 2 1
forall 2 1
isDefined 1 1
isEmpty 1 1
orElse 2 1
orElseF 2 1
toRight 2 1
toLeft 2 1
show 1 1
compare 2 1
partialCompare 2 1
$eq$eq$eq 2 1
traverse 3 2
foldLeft 3 1
foldRight 3 1
toNested 0 0
<init> 0 0
<init> 1 0
apply 2 1
pure 0 0
some 0 0
none 1 1
fromOption 0 0
<init> 1 0
apply 2 1
liftF 2 1
liftK 1 1
<init> 0 0
catsDataMonadForOptionT 1 1
catsDataFoldableForOptionT 1 1
catsDataSemigroupForOptionT 1 1
catsDataOrderForOptionT 1 1
catsDataShowForOptionT 1 1
<init> 0 0
catsDataMonadErrorForOptionT 1 1
catsDataContravariantMonoidalForOptionT 1 1
catsDataSemigroupKForOptionT 1 1
catsDataMonoidForOptionT 1 1
catsDataPartialOrderForOptionT 1 1
<init> 0 0
catsDataMonoidKForOptionT 1 1
catsDataEqForOptionT 1 1
<init> 0 0
catsDataTraverseForOptionT 1 1
<init> 0 0
catsDataFunctorForOptionT 1 1
$init$ 0 0
F 0 0
map 2 0
$init$ 0 0
F 0 0
pure 1 0
flatMap 2 0
map 2 0
tailRecM 2 0
$init$ 0 0
F 0 0
raiseError 1 0
handleErrorWith 2 0
$init$ 0 0
F 0 0
unit 0 0
contramap 2 0
product 2 0
$init$ 0 0
F 0 0
foldLeft 3 0
foldRight 3 0
$init$ 0 0
F 0 0
traverse 3 1
$init$ 0 0
combine 2 0
$init$ 0 0
empty 0 0
$init$ 0 0
F 0 0
combineK 2 0
$init$ 0 0
empty 0 0
$init$ 0 0
F 0 0
eqv 2 0
$init$ 0 0
F 0 0
partialCompare 2 0
$init$ 0 0
F 0 0
compare 2 0
<init> 2 0
mapK 1 0
<init> 0 0
<init> 0 0
catsDataOrderForTuple2K 2 2
catsDataShowForTuple2K 2 2
catsDataContravariantMonoidalForTuple2k 2 2
<init> 0 0
catsDataTraverseForTuple2K 2 2
catsDataContravariantForTuple2K 2 2
catsDataEqForTuple2K 2 2
<init> 0 0
catsDataAlternativeForTuple2K 2 2
catsDataFoldableForTuple2K 2 2
<init> 0 0
catsDataMonadForTuple2K 2 2
catsDataMonoidKForTuple2K 2 2
<init> 0 0
catsDataCommutativeApplicativeForTuple2K 2 2
<init> 0 0
catsDataSemigroupKForTuple2K 2 2
catsDataCommutativeApplyForTuple2K 2 2
<init> 0 0
catsDataApplicativeForTuple2K 2 2
<init> 0 0
catsDataApplyForTuple2K 2 2
<init> 0 0
catsDataDistributiveForTuple2K 2 2
<init> 0 0
catsDataFunctorForTuple2K 2 2
$init$ 0 0
F 0 0
G 0 0
map 2 0
$init$ 0 0
F 0 0
G 0 0
distribute 3 1
map 2 0
$init$ 0 0
F 0 0
G 0 0
contramap 2 0
$init$ 0 0
F 0 0
G 0 0
unit 0 0
product 2 0
contramap 2 0
$init$ 0 0
F 0 0
G 0 0
ap 2 0
product 2 0
map2Eval 3 0
$init$ 0 0
F 0 0
G 0 0
pure 1 0
$init$ 0 0
F 0 0
G 0 0
combineK 2 0
$init$ 0 0
F 0 0
G 0 0
empty 0 0
F 0 0
G 0 0
$init$ 0 0
F 0 0
G 0 0
pure 1 0
flatMap 2 0
tailRecM 2 0
$init$ 0 0
F 0 0
G 0 0
foldLeft 3 0
foldRight 3 0
$init$ 0 0
F 0 0
G 0 0
traverse 3 1
$init$ 0 0
F 0 0
G 0 0
show 1 0
$init$ 0 0
F 0 0
G 0 0
compare 2 0
<init> 0 0
fold 2 0
isValid 0 0
isInvalid 0 0
foreach 1 0
getOrElse 1 0
valueOr 1 0
exists 1 0
forall 1 0
orElse 1 0
findValid 2 1
toEither 0 0
toOption 0 0
toIor 0 0
toList 0 0
toValidatedNel 0 0
withEither 1 0
bimap 2 0
compare 3 2
partialCompare 3 2
$eq$eq$eq 3 2
ap 2 1
product 2 1
map 1 0
leftMap 1 0
traverse 2 1
foldLeft 2 0
foldRight 2 0
show 2 2
andThen 1 0
combine 3 2
swap 0 0
merge 1 1
ensure 2 0
ensureOr 2 0
<init> 0 0
<init> 1 0
<init> 1 0
catchOnly 0 0
<init> 1 0
apply 3 2
<init> 0 0
catsDataSemigroupKForValidated 1 1
catsDataMonoidForValidated 2 2
catsDataOrderForValidated 2 2
catsDataShowForValidated 2 2
<init> 0 0
bitraverse 4 1
bifoldLeft 4 0
bifoldRight 4 0
bimap 3 0
leftMap 2 0
catsDataApplicativeErrorForValidated 1 1
<init> 0 0
catsDataSemigroupForValidated 2 2
catsDataCommutativeApplicativeForValidated 1 1
catsDataPartialOrderForValidated 2 2
<init> 0 0
catsDataEqForValidated 2 2
catsDataTraverseFunctorForValidated 0 0
<init> 1 1
map 2 0
pure 1 0
ap 2 0
product 2 0
$init$ 0 0
invalid 1 0
invalidNel 1 0
valid 1 0
validNel 1 0
catchNonFatal 1 0
fromTry 1 0
fromEither 1 0
fromOption 2 0
fromIor 1 0
cond 3 0
condNel 3 0
<init> 1 0
tell 3 2
written 1 1
value 1 1
ap 3 2
map 2 1
mapK 1 0
contramap 2 1
flatMap 3 2
mapBoth 2 1
bimap 3 1
mapWritten 2 1
swap 1 1
reset 2 2
show 1 1
<init> 0 0
liftF 3 2
liftK 2 2
lift 3 2
<init> 0 0
catsDataCommutativeMonadForWriterT 2 2
<init> 0 0
catsDataMonadErrorForWriterT 2 2
catsDataParallelForWriterT 2 2
catsDataEqForWriterTId 2 2
catsDataBifunctorForWriterT 1 1
catsDataShowForWriterT 1 1
catsDataMonoidForWriterTId 2 2
<init> 0 0
catsDataMonadForWriterTId 1 1
catsDataEqForWriterT 1 1
catsDataSemigroupForWriterTId 2 2
<init> 0 0
catsDataMonadForWriterT 2 2
catsDataMonoidForWriterT 1 1
catsDataCoflatMapForWriterTId 0 0
<init> 0 0
catsDataFlatMapForWriterTId 1 1
<init> 0 0
catsDataFlatMapForWriterT1 2 2
catsDataSemigroupForWriterT 1 1
<init> 0 0
catsDataApplicativeErrorForWriterT 2 2
<init> 0 0
catsDataAlternativeForWriterT 2 2
catsDataContravariantMonoidalForWriterT 1 1
<init> 0 0
catsDataMonoidKForWriterT 1 1
catsDataFlatMapForWriterT2 2 2
catsDataContravariantForWriterT 1 1
<init> 0 0
catsDataSemigroupKForWriterT 1 1
catsDataApplicativeForWriterT 2 2
<init> 0 0
catsDataApplyForWriterT 2 2
<init> 0 0
catsDataCoflatMapForWriterT 1 1
$init$ 0 0
F0 0 0
map 2 0
$init$ 0 0
F0 0 0
contramap 2 0
$init$ 0 0
F0 0 0
L0 0 0
ap 2 0
map2Eval 3 0
product 2 0
$init$ 0 0
F0 0 0
L0 0 0
flatMap 2 0
tailRecM 2 0
$init$ 0 0
F0 0 0
L0 0 0
flatMap 2 0
tailRecM 2 0
$init$ 0 0
F0 0 0
L0 0 0
pure 1 0
F0 0 0
L0 0 0
$init$ 0 0
F0 0 0
raiseError 1 0
handleErrorWith 2 0
F0 0 0
$init$ 0 0
F0 0 0
combineK 2 0
$init$ 0 0
F0 0 0
empty 0 0
F0 0 0
$init$ 0 0
F0 0 0
unit 0 0
contramap 2 0
product 2 0
$init$ 0 0
F0 0 0
combine 2 0
$init$ 0 0
F0 0 0
empty 0 0
$init$ 0 0
coflatMap 2 0
$init$ 0 0
putT 3 1
put 3 1
tell 2 1
value 3 2
valueT 3 2
<init> 1 0
<init> 0 0
apply 1 0
<init> 0 0
map 2 0
ap 2 0
product 2 0
catsDataEqForZipList 1 1
<init> 1 0
<init> 0 0
apply 1 0
<init> 0 0
pure 1 0
map 2 0
ap 2 0
product 2 0
empty 0 0
combineK 2 0
catsDataEqForZipStream 1 1
<init> 1 0
<init> 0 0
apply 1 0
<init> 0 0
map 2 0
ap 2 0
catsDataEqForZipVector 1 1
<init> 0 0
NonEmptyStream 2 0
NonEmptyStream 2 0
<init> 0 0
apply 1 0
<init> 0 0
apply 2 0
value 2 1
tell 1 0
<init> 0 0
<init> 0 0
<init> 0 0
<init> 0 0
<init> 0 0
substitute 1 0
andThen 1 0
compose 1 0
coerce 1 0
<init> 0 0
<init> 0 0
id 0 0
compose 2 0
<init> 0 0
<init> 0 0
substitute 1 0
refl 0 0
witness 1 0
compose 2 0
reify 0 0
fromPredef 1 0
co 1 0
co2 1 0
co2_2 1 0
co3 1 0
co3_2 1 0
co3_3 1 0
onF 2 0
lift2 2 0
contra 1 0
contra1_2 1 0
contra2_2 1 0
contra1_3 1 0
contra2_3 1 0
contra3_3 1 0
conF 2 0
invF 3 0
<init> 0 0
substitute 1 0
andThen 1 0
compose 1 0
flip 0 0
lift 0 0
coerce 1 0
predefEq 0 0
<init> 0 0
<init> 0 0
substitute 1 0
refl 0 0
unsafeFromPredef 1 0
<init> 0 0
<init> 0 0
$init$ 0 0
$init$ 0 0
$init$ 0 0
$init$ 0 0
$init$ 0 0
$init$ 0 0
$init$ 0 0
$init$ 0 0
$init$ 0 0
$init$ 0 0
$init$ 0 0
$init$ 0 0
catsStdShowForBitSet 0 0
$init$ 0 0
$init$ 0 0
<init> 0 0
bitraverse 4 1
bifoldLeft 4 0
bifoldRight 4 0
catsStdInstancesForEither 0 0
catsStdSemigroupKForEither 0 0
catsStdShowForEither 2 2
$init$ 0 0
<init> 0 0
unit 0 0
contramap 2 0
product 2 0
$init$ 0 0
<init> 0 0
unit 0 0
contramap 2 0
product 2 0
$init$ 0 0
<init> 0 0
extract 1 0
coflatMap 2 0
pure 1 0
flatMap 2 0
tailRecM 2 0
$init$ 0 0
function0Distributive 0 0
$init$ 0 0
catsStdContravariantMonoidalForFunction1 1 1
catsStdMonadForFunction1 0 0
<init> 0 0
choose 2 0
lift 1 0
first 1 0
split 2 0
compose 2 0
$init$ 0 0
catsStdContravariantForFunction1 0 0
catsStdDistributiveForFunction1 0 0
$init$ 0 0
catsStdInstancesForFuture 1 1
$init$ 0 0
catsStdMonoidForFuture 2 2
$init$ 0 0
catsStdSemigroupForFuture 2 2
<init> 1 1
map 2 0
coflatMap 2 0
<init> 2 2
<init> 2 2
$init$ 0 0
<init> 0 0
contramap 2 0
$init$ 0 0
catsSemigroupalForMonoid 0 0
<init> 0 0
product 2 0
imap 3 0
unit 0 0
<init> 0 0
product 2 0
imap 3 0
unit 0 0
$init$ 0 0
<init> 0 0
empty 0 0
combineK 2 0
pure 1 0
map 2 0
flatMap 2 0
map2 3 0
map2Eval 3 0
tailRecM 2 0
coflatMap 2 0
foldLeft 3 0
foldRight 3 0
foldMap 3 1
traverse 3 1
mapWithIndex 2 0
zipWithIndex 1 0
partitionEither 3 1
get 2 0
exists 2 0
forall 2 0
isEmpty 1 0
foldM 4 1
fold 2 1
toList 1 0
reduceLeftOption 2 0
find 2 0
filter_ 2 0
takeWhile_ 2 0
dropWhile_ 2 0
algebra 0 0
collectFirst 2 0
collectFirstSome 2 0
catsStdShowForList 1 1
$init$ 0 0
catsStdShowForMap 2 2
catsStdInstancesForMap 0 0
$init$ 0 0
<init> 0 0
empty 0 0
combineK 2 0
pure 1 0
map 2 0
flatMap 2 0
tailRecM 2 0
map2 3 0
map2Eval 3 0
coflatMap 2 0
foldLeft 3 0
foldRight 3 0
raiseError 1 0
handleErrorWith 2 0
traverse 3 1
reduceLeftToOption 3 0
reduceRightToOption 3 0
reduceLeftOption 2 0
reduceRightOption 2 0
minimumOption 2 1
maximumOption 2 1
get 2 0
size 1 0
foldMap 3 1
find 2 0
exists 2 0
forall 2 0
toList 1 0
filter_ 2 0
takeWhile_ 2 0
dropWhile_ 2 0
isEmpty 1 0
collectFirst 2 0
collectFirstSome 2 0
catsStdShowForOption 1 1
$init$ 0 0
<init> 0 0
unit 0 0
contramap 2 0
product 2 0
$init$ 0 0
<init> 0 0
unit 0 0
contramap 2 0
product 2 0
<init> 0 0
<init> 0 0
<init> 0 0
<init> 0 0
<init> 0 0
<init> 0 0
<init> 0 0
<init> 0 0
<init> 0 0
<init> 0 0
<init> 0 0
<init> 0 0
<init> 0 0
<init> 0 0
<init> 0 0
<init> 0 0
<init> 0 0
<init> 0 0
<init> 0 0
<init> 0 0
<init> 0 0
<init> 0 0
<init> 0 0
<init> 0 0
<init> 0 0
<init> 0 0
<init> 0 0
<init> 0 0
<init> 0 0
<init> 0 0
<init> 0 0
<init> 0 0
<init> 0 0
<init> 0 0
<init> 0 0
<init> 0 0
<init> 0 0
<init> 0 0
<init> 0 0
$init$ 0 0
catsParallelForEitherValidated 1 1
catsParallelForOptionTNestedOption 1 1
catsStdNonEmptyParallelForZipList 0 0
catsStdNonEmptyParallelForZipVector 0 0
catsStdParallelForZipStream 0 0
catsParallelForEitherTNestedParallelValidated 2 2
$init$ 0 0
catsParallelForEitherTNestedValidated 2 2
$init$ 0 0
<init> 0 0
contramap 2 0
product 2 0
unit 0 0
$init$ 0 0
<init> 0 0
contramap 2 0
product 2 0
unit 0 0
$init$ 0 0
<init> 0 0
empty 0 0
combineK 2 0
pure 1 0
map 2 0
flatMap 2 0
map2 3 0
map2Eval 3 0
tailRecM 2 0
coflatMap 2 0
foldLeft 3 0
foldRight 3 0
foldMap 3 1
traverse 3 1
mapWithIndex 2 0
zipWithIndex 1 0
get 2 0
exists 2 0
forall 2 0
isEmpty 1 0
foldM 4 1
fold 2 1
toList 1 0
reduceLeftOption 2 0
find 2 0
filter_ 2 0
takeWhile_ 2 0
dropWhile_ 2 0
algebra 0 0
collectFirst 2 0
collectFirstSome 2 0
catsStdShowForQueue 1 1
$init$ 0 0
<init> 0 0
unorderedTraverse 3 1
unorderedSequence 2 1
empty 0 0
combineK 2 0
unorderedFoldMap 3 1
unorderedFold 2 1
forall 2 0
isEmpty 1 0
catsStdShowForSet 1 1
$init$ 0 0
catsStdHashForSortedMap 3 3
catsStdCommutativeMonoidForSortedMap 2 2
catsStdShowForSortedMap 3 3
catsStdInstancesForSortedMap 1 1
$init$ 0 0
catsStdEqForSortedMap 2 2
$init$ 0 0
catsStdMonoidForSortedMap 2 2
<init> 3 3
hash 1 0
<init> 2 2
eqv 2 0
<init> 2 2
<init> 2 2
empty 0 0
combine 2 0
$init$ 0 0
<init> 0 0
combineK 2 0
foldLeft 3 0
foldRight 3 0
foldMap 3 1
get 2 0
size 1 0
exists 2 0
forall 2 0
isEmpty 1 0
fold 2 1
toList 1 0
reduceLeftOption 2 0
find 2 0
collectFirst 2 0
collectFirstSome 2 0
catsStdShowForSortedSet 1 1
catsKernelStdOrderForSortedSet 1 1
$init$ 0 0
catsKernelStdHashForSortedSet 2 2
catsKernelStdSemilatticeForSortedSet 1 1
<init> 1 1
compare 2 0
eqv 2 0
<init> 2 2
hash 1 0
eqv 2 0
<init> 1 1
empty 0 0
combine 2 0
$init$ 0 0
<init> 0 0
empty 0 0
combineK 2 0
pure 1 0
map 2 0
flatMap 2 0
map2 3 0
map2Eval 3 0
coflatMap 2 0
foldLeft 3 0
foldRight 3 0
foldMap 3 1
traverse 3 1
mapWithIndex 2 0
zipWithIndex 1 0
tailRecM 2 0
exists 2 0
forall 2 0
get 2 0
isEmpty 1 0
foldM 4 1
fold 2 1
toList 1 0
reduceLeftOption 2 0
find 2 0
algebra 0 0
collectFirst 2 0
collectFirstSome 2 0
catsStdShowForStream 1 1
$init$ 0 0
<init> 0 0
$init$ 0 0
$init$ 0 0
catsStdInstancesForTry 0 0
catsStdShowForTry 1 1
catsStdEqForTry 2 2
<init> 0 0
castFailure 1 0
$init$ 0 0
catsStdMonoidForTry 1 1
$init$ 0 0
catsStdSemigroupForTry 1 1
<init> 0 0
map 2 0
coflatMap 2 0
<init> 1 1
<init> 1 1
$init$ 0 0
<init> 0 0
bitraverse 4 1
bifoldLeft 4 0
bifoldRight 4 0
catsStdShowForTuple2 2 2
catsStdInstancesForTuple2 0 0
$init$ 0 0
catsStdCommutativeMonadForTuple2 1 1
$init$ 0 0
catsStdCommutativeFlatMapForTuple2 1 1
$init$ 0 0
catsStdMonadForTuple2 1 1
$init$ 0 0
catsStdFlatMapForTuple2 1 1
<init> 1 0
ap 2 0
product 2 0
map 2 0
flatMap 2 0
productR 2 0
productL 2 0
mproduct 2 0
tailRecM 2 0
$init$ 0 0
$init$ 0 0
<init> 0 0
empty 0 0
combineK 2 0
pure 1 0
map 2 0
flatMap 2 0
coflatMap 2 0
foldLeft 3 0
foldRight 3 0
foldMap 3 1
tailRecM 2 0
size 1 0
get 2 0
traverse 3 1
mapWithIndex 2 0
zipWithIndex 1 0
exists 2 0
isEmpty 1 0
foldM 4 1
fold 2 1
toList 1 0
reduceLeftOption 2 0
find 2 0
algebra 0 0
collectFirst 2 0
collectFirstSome 2 0
catsStdShowForVector 1 1
<init> 0 0
<init> 0 0
pure 1 0
extract 1 0
flatMap 2 0
coflatMap 2 0
tailRecM 2 0
distribute 3 1
map 2 0
ap 2 0
flatten 1 0
map2 3 0
lift 1 0
imap 3 0
foldLeft 3 0
foldRight 3 0
nonEmptyTraverse 3 1
foldMap 3 1
reduce 2 1
reduceLeftTo 3 0
reduceLeft 2 0
reduceLeftToOption 3 0
reduceRight 2 0
reduceRightTo 3 0
reduceRightToOption 3 0
reduceMap 3 1
size 1 0
get 2 0
isEmpty 1 0
$init$ 0 0
catsSyntaxDistributiveOps 2 1
<init> 1 0
distribute 3 2
cosequence 3 3
$init$ 0 0
catsSyntaxUnite 1 0
catsSyntaxAlternativeSeparate 1 0
catsSyntaxAlternativeGuard 1 0
<init> 1 0
unite 3 3
<init> 1 0
separate 3 3
<init> 1 0
guard 1 1
$init$ 0 0
catsSyntaxApplicativeId 1 0
catsSyntaxApplicative 1 0
<init> 1 0
pure 1 1
<init> 1 0
replicateA 2 1
unlessA 2 1
whenA 2 1
$init$ 0 0
catsSyntaxApplicativeErrorId 1 0
catsSyntaxApplicativeError 2 1
<init> 1 0
raiseError 1 1
<init> 1 0
handleError 2 1
handleErrorWith 2 1
attempt 1 1
attemptT 1 1
recover 2 1
recoverWith 2 1
onError 2 1
$init$ 0 0
catsSyntaxApply 2 1
catsSyntaxApplyOps 1 0
<init> 1 0
followedBy 2 1
forEffect 2 1
$init$ 0 0
catsSyntaxBitraverse 2 1
$init$ 0 0
catsSyntaxNestedBitraverse 2 1
<init> 1 0
bitraverse 4 2
<init> 1 0
bisequence 2 2
$init$ 0 0
catsSyntaxContravariantMonoidal 2 1
<init> 0 0
$init$ 0 0
catsSyntaxContravariantSemigroupal 2 1
$init$ 0 0
catsSyntaxEither 1 0
catsSyntaxEitherObject 1 0
catsSyntaxLeft 1 0
catsSyntaxRight 1 0
catsSyntaxEitherId 1 0
<init> 0 0
<init> 1 0
apply 3 2
<init> 1 0
foreach 1 0
getOrElse 1 0
orElse 1 0
recover 1 0
recoverWith 1 0
valueOr 1 0
forall 1 0
exists 1 0
ensure 2 0
ensureOr 2 0
toIor 0 0
toOption 0 0
toList 0 0
toTry 1 1
toValidated 0 0
toValidatedNel 0 0
withValidated 1 0
to 1 1
bimap 2 0
map 1 0
map2Eval 2 0
leftMap 1 0
flatMap 1 0
compare 3 2
partialCompare 3 2
$eq$eq$eq 3 2
traverse 2 1
foldLeft 2 0
foldRight 2 0
combine 2 1
show 2 2
ap 1 0
toEitherT 1 1
raiseOrPure 1 1
<init> 1 0
left 1 0
right 1 0
catchOnly 0 0
catchNonFatal 1 0
fromTry 1 0
fromOption 2 0
<init> 1 0
rightCast 0 0
<init> 1 0
leftCast 0 0
<init> 1 0
asLeft 0 0
asRight 0 0
<init> 0 0
leftCast 1 0
rightCast 1 0
$init$ 0 0
catsSyntaxEitherK 1 0
<init> 1 0
leftc 0 0
rightc 0 0
$init$ 0 0
catsSyntaxEq 2 1
<init> 2 1
$eq$eq$eq 1 0
$eq$bang$eq 1 0
$init$ 0 0
catsSyntaxFlatten 2 1
catsSyntaxIfM 2 1
catsSyntaxFlatMapIdOps 1 0
catsSyntaxFlatMapOps 2 1
<init> 1 0
$greater$greater$eq 2 1
$greater$greater 2 1
$less$less 2 1
followedByEval 2 1
forEffectEval 2 1
<init> 1 0
flatten 1 1
<init> 1 0
ifM 3 1
<init> 1 0
tailRecM 2 1
$init$ 0 0
catsSyntaxNestedFoldable 2 1
catsSyntaxFoldOps 2 1
<init> 1 0
sequence_ 2 2
foldK 2 2
<init> 1 0
foldl 3 1
foldr 3 1
$init$ 0 0
catsSyntaxGroup 2 1
<init> 2 1
$bar$minus$bar 1 0
remove 1 0
inverse 0 0
$init$ 0 0
catsSyntaxHash 2 1
<init> 2 1
hash 0 0
$init$ 0 0
catsSyntaxIorId 1 0
<init> 1 0
rightIor 0 0
leftIor 0 0
$init$ 0 0
catsSyntaxList 1 0
<init> 1 0
toNel 0 0
groupByNel 2 1
$init$ 0 0
catsSyntaxMonad 1 0
catsSyntaxMonadIdOps 1 0
<init> 1 0
whileM 3 2
whileM_ 2 1
untilM 3 2
untilM_ 2 1
iterateWhile 2 1
iterateUntil 2 1
<init> 1 0
iterateWhileM 3 1
iterateUntilM 3 1
$init$ 0 0
catsSyntaxMonadError 2 1
catsSyntaxMonadErrorRethrow 2 1
<init> 1 0
ensure 3 1
ensureOr 3 1
adaptError 2 1
<init> 1 0
rethrow 1 1
$init$ 0 0
catsSyntaxMonoid 2 1
<init> 1 0
isEmpty 2 2
$init$ 0 0
none 0 0
catsSyntaxOptionId 1 0
catsSyntaxOption 1 0
<init> 1 0
some 0 0
<init> 1 0
toInvalid 1 0
toInvalidNel 1 0
toValid 1 0
toValidNel 1 0
toRightIor 1 0
toLeftIor 1 0
orEmpty 1 1
$init$ 0 0
catsSyntaxOrder 2 1
<init> 2 1
compare 1 0
min 1 0
max 1 0
comparison 1 0
<init> 0 0
<init> 0 0
<init> 0 0
<init> 0 0
<init> 0 0
<init> 0 0
<init> 0 0
<init> 0 0
<init> 0 0
<init> 0 0
<init> 0 0
<init> 0 0
<init> 0 0
<init> 0 0
<init> 0 0
<init> 0 0
<init> 0 0
<init> 0 0
<init> 0 0
<init> 0 0
<init> 0 0
<init> 0 0
<init> 0 0
<init> 0 0
<init> 0 0
<init> 0 0
<init> 0 0
<init> 0 0
<init> 0 0
<init> 0 0
<init> 0 0
<init> 0 0
<init> 0 0
<init> 0 0
<init> 0 0
<init> 0 0
<init> 0 0
<init> 0 0
<init> 0 0
<init> 0 0
<init> 0 0
<init> 0 0
<init> 0 0
<init> 0 0
<init> 0 0
<init> 0 0
<init> 0 0
<init> 0 0
$init$ 0 0
catsSyntaxParallelTraverse 2 1
catsSyntaxParallelSequence 3 2
catsSyntaxParallelAp 2 1
<init> 1 0
parTraverse 4 3
<init> 1 0
parSequence 3 3
<init> 1 0
$amp$greater 2 1
$less$amp 2 1
$init$ 0 0
catsSyntaxPartialOrder 2 1
<init> 2 1
$greater 1 0
$greater$eq 1 0
$less 1 0
$less$eq 1 0
partialCompare 1 0
tryCompare 1 0
pmin 1 0
pmax 1 0
$init$ 0 0
catsSyntaxNestedReducible 2 1
<init> 1 0
reduceK 2 2
$init$ 0 0
catsSyntaxSemigroup 2 1
<init> 2 1
$bar$plus$bar 1 0
combine 1 0
combineN 1 0
$init$ 0 0
catsSyntaxSemigroupal 2 1
<init> 0 0
$bar$at$bar 1 0
$init$ 0 0
showInterpolator 1 0
$init$ 0 0
catsSyntaxValidatedId 1 0
<init> 1 0
valid 0 0
validNel 0 0
invalid 0 0
invalidNel 0 0
$init$ 0 0
catsSyntaxVectors 1 0
<init> 1 0
toNev 0 0
$init$ 0 0
catsSyntaxWriterId 1 0
<init> 1 0
tell 0 0
writer 1 0
$init$ 0 0
F 0 0
algebra 0 0
alternativeRightAbsorption 1 0
alternativeLeftDistributivity 3 0
alternativeRightDistributivity 3 0
<init> 0 0
apply 1 1
$init$ 0 0
F 0 0
applicativeErrorHandleWith 2 0
applicativeErrorHandle 2 0
handleErrorWithPure 2 0
handleErrorPure 2 0
raiseErrorAttempt 1 0
pureAttempt 1 0
handleErrorWithConsistentWithRecoverWith 2 0
handleErrorConsistentWithRecover 2 0
recoverConsistentWithRecoverWith 2 0
attemptConsistentWithAttemptT 1 0
attemptFromEitherConsistentWithPure 1 0
onErrorPure 2 0
onErrorRaise 3 0
<init> 0 0
apply 1 1
$init$ 0 0
F 0 0
applicativeIdentity 1 0
applicativeHomomorphism 2 0
applicativeInterchange 2 0
applicativeMap 2 0
applicativeComposition 3 0
apProductConsistent 2 0
applicativeUnit 1 0
monoidalLeftIdentity 1 0
monoidalRightIdentity 1 0
<init> 0 0
apply 1 1
$init$ 0 0
F 0 0
applyComposition 3 0
map2ProductConsistency 3 0
map2EvalConsistency 3 0
productRConsistency 2 0
productLConsistency 2 0
<init> 0 0
apply 1 1
$init$ 0 0
F 0 0
Function 0 0
sumAssoc 1 0
leftLiftCommute 1 0
leftComposeCommute 2 0
leftRightConsistent 1 0
leftAndThenLiftedLeftApplyCommutes 1 0
leftAndThenRightIdentityCommutes 2 0
leftTwiceCommutesWithSumAssociation 1 0
<init> 0 0
apply 2 2
$init$ 0 0
F 0 0
arrowIdentity 0 0
arrowComposition 2 0
arrowExtension 1 0
arrowFunctor 2 0
arrowExchange 2 0
arrowUnit 1 0
arrowAssociation 1 0
splitConsistentWithAndThen 2 0
mergeConsistentWithAndThen 2 0
fst 1 0
assoc 1 0
<init> 0 0
apply 1 1
$init$ 0 0
F 0 0
bifoldLeftConsistentWithBifoldMap 4 1
bifoldRightConsistentWithBifoldMap 4 1
<init> 0 0
apply 1 1
$init$ 0 0
F 0 0
bifunctorIdentity 1 0
bifunctorComposition 5 0
bifunctorLeftMapIdentity 1 0
bifunctorLeftMapComposition 3 0
<init> 0 0
apply 1 1
$init$ 0 0
F 0 0
pureExtractIsId 1 0
extractFlatMapEntwining 1 0
pureCoflatMapEntwining 1 0
<init> 0 0
apply 1 1
$init$ 0 0
F 0 0
bitraverseIdentity 1 0
bitraverseCompose 6 1
<init> 0 0
apply 1 1
$init$ 0 0
F 0 0
categoryLeftIdentity 1 0
categoryRightIdentity 1 0
<init> 0 0
apply 1 1
$init$ 0 0
F 0 0
choiceCompositionDistributivity 3 0
<init> 0 0
apply 1 1
$init$ 0 0
F 0 0
coflatMapAssociativity 3 0
coflattenThroughMap 1 0
coflattenCoherence 2 0
coflatMapIdentity 1 0
cokleisliAssociativity 4 0
<init> 0 0
apply 1 1
F 0 0
<init> 0 0
apply 1 1
$init$ 0 0
F 0 0
applyCommutative 3 0
<init> 0 0
apply 1 1
$init$ 0 0
F 0 0
arrowCommutative 2 0
<init> 0 0
apply 1 1
$init$ 0 0
F 0 0
flatmapCommutative 3 0
<init> 0 0
apply 1 1
F 0 0
<init> 0 0
apply 1 1
$init$ 0 0
F 0 0
extractCoflattenIdentity 1 0
mapCoflattenIdentity 1 0
mapCoflatMapCoherence 2 0
comonadLeftIdentity 1 0
comonadRightIdentity 2 0
cokleisliLeftIdentity 2 0
cokleisliRightIdentity 2 0
<init> 0 0
apply 1 1
$init$ 0 0
F 0 0
composeAssociativity 3 0
<init> 0 0
apply 1 1
$init$ 0 0
F 0 0
contravariantIdentity 1 0
contravariantComposition 3 0
<init> 0 0
apply 1 1
$init$ 0 0
F 0 0
contravariantMonoidalUnitRight 1 0
contravariantMonoidalUnitLeft 1 0
contravariantMonoidalContramap2CompatibleContramapLeft 2 0
contravariantMonoidalContramap2CompatibleContramapRight 2 0
<init> 0 0
apply 1 1
$init$ 0 0
F 0 0
delta 1 0
contravariantSemigroupalContramap2DiagonalAssociates 3 0
<init> 0 0
apply 1 1
$init$ 0 0
F 0 0
distributeIdentity 2 0
cosequenceIdentity 1 0
cosequenceTwiceIsId 2 1
composition 5 2
<init> 0 0
apply 1 1
$init$ 0 0
F 0 0
flatMapAssociativity 3 0
flatMapConsistentApply 2 0
kleisliAssociativity 4 0
mproductConsistency 2 0
tailRecMConsistentFlatMap 2 0
flatMapFromTailRecMConsistency 2 0
<init> 0 0
apply 1 1
$init$ 0 0
F 0 0
leftFoldConsistentWithFoldMap 3 1
rightFoldConsistentWithFoldMap 3 1
existsConsistentWithFind 2 0
foldMIdentity 3 0
reduceLeftOptionConsistentWithReduceLeftToOption 2 0
reduceRightOptionConsistentWithReduceRightToOption 2 0
getRef 2 0
foldRef 2 1
toListRef 1 0
filter_Ref 2 0
takeWhile_Ref 2 0
dropWhile_Ref 2 0
collectFirstSome_Ref 2 0
collectFirst_Ref 2 0
orderedConsistency 4 2
<init> 0 0
apply 1 1
$init$ 0 0
F 0 0
covariantIdentity 1 0
covariantComposition 3 0
<init> 0 0
apply 1 1
$init$ 0 0
injectK 0 0
injectKRoundTripInj 1 0
injectKRoundTripPrj 1 0
<init> 0 0
apply 1 1
$init$ 0 0
inject 0 0
injectRoundTripInj 1 0
injectRoundTripPrj 1 0
<init> 0 0
apply 1 1
$init$ 0 0
F 0 0
invariantIdentity 1 0
invariantComposition 5 0
<init> 0 0
apply 1 1
$init$ 0 0
F 0 0
invariantMonoidalLeftIdentity 1 0
invariantMonoidalRightIdentity 1 0
invariantMonoidalAssociativity 3 0
<init> 0 0
apply 1 1
F 0 0
<init> 0 0
apply 1 1
$init$ 0 0
F 0 0
monadErrorLeftZero 2 0
monadErrorEnsureConsistency 3 0
monadErrorEnsureOrConsistency 3 0
adaptErrorPure 2 0
adaptErrorRaise 2 0
rethrowAttempt 1 0
<init> 0 0
apply 1 1
$init$ 0 0
F 0 0
monadLeftIdentity 2 0
monadRightIdentity 1 0
kleisliLeftIdentity 2 0
kleisliRightIdentity 2 0
mapFlatMapCoherence 2 0
<init> 0 0
apply 1 1
$init$ 0 0
F 0 0
monoidKLeftIdentity 1 0
monoidKRightIdentity 1 0
<init> 0 0
apply 1 1
$init$ 0 0
P 0 0
parallelRoundTrip 1 0
sequentialRoundTrip 1 0
isomorphicFunctor 2 0
<init> 0 0
apply 1 1
$init$ 0 0
F 0 0
nonEmptyTraverseIdentity 2 0
nonEmptyTraverseSequentialComposition 5 2
nonEmptyTraverseParallelComposition 5 2
reduceMapDerived 3 1
<init> 0 0
apply 1 1
$init$ 0 0
P 0 0
isomorphicPure 1 0
<init> 0 0
apply 1 1
$init$ 0 0
F 0 0
profunctorIdentity 1 0
profunctorComposition 5 0
profunctorLmapIdentity 1 0
profunctorRmapIdentity 1 0
profunctorLmapComposition 3 0
profunctorRmapComposition 3 0
<init> 0 0
apply 1 1
$init$ 0 0
F 0 0
reduceLeftToConsistentWithReduceMap 3 1
reduceRightToConsistentWithReduceMap 3 1
reduceRightToConsistentWithReduceRightToOption 3 1
reduceRightConsistentWithReduceRightOption 2 0
reduceReduceLeftConsistent 2 1
traverseConsistent 3 1
sequenceConsistent 2 1
sizeConsistent 1 0
<init> 0 0
apply 1 1
$init$ 0 0
F 0 0
semigroupKAssociative 3 0
<init> 0 0
apply 1 1
$init$ 0 0
F 0 0
semigroupalAssociativity 3 0
<init> 0 0
apply 1 1
$init$ 0 0
F 0 0
strongFirstDistributivity 3 0
strongSecondDistributivity 3 0
<init> 0 0
apply 1 1
$init$ 0 0
F 0 0
traverseIdentity 2 0
traverseSequentialComposition 5 2
traverseParallelComposition 5 2
foldMapDerived 3 1
traverseOrderConsistent 1 0
mapWithIndexRef 2 0
traverseWithIndexMRef 3 1
zipWithIndexRef 2 0
<init> 0 0
apply 1 1
$init$ 0 0
F 0 0
unorderedFoldConsistentWithUnorderedFoldMap 2 1
forallConsistentWithExists 2 0
existsLazy 1 0
forallLazy 1 0
forallEmpty 2 0
nonEmptyRef 1 0
<init> 0 0
apply 1 1
$init$ 0 0
F 0 0
unorderedTraverseIdentity 3 1
unorderedTraverseSequentialComposition 5 2
unorderedTraverseParallelComposition 5 2
unorderedSequenceConsistent 2 1
<init> 0 0
apply 1 1
$init$ 0 0
laws 0 0
alternative 16 16
<init> 0 0
apply 1 1
$init$ 0 0
laws 0 0
applicativeError 26 26
<init> 0 0
apply 1 1
$init$ 0 0
laws 0 0
applicative 16 16
<init> 0 0
apply 1 1
$init$ 0 0
laws 0 0
apply 15 15
<init> 0 0
apply 1 1
<init> 0 0
catsLawsCogenForTry 1 1
catsLawsCogenForFunction0 1 1
catsLawsArbitraryForConst 1 1
catsLawsCogenForConst 1 1
catsLawsArbitraryForOneAnd 2 2
catsLawsCogenForOneAnd 2 2
catsLawsArbitraryForNonEmptyVector 1 1
catsLawsCogenForNonEmptyVector 1 1
catsLawsArbitraryForZipVector 1 1
catsLawsArbitraryForZipList 1 1
catsLawsArbitraryForZipStream 1 1
catsLawsArbitraryForZipNonEmptyVector 1 1
catsLawsArbitraryForNonEmptyList 1 1
catsLawsCogenForNonEmptyList 1 1
catsLawsArbitraryForZipNonEmptyList 1 1
catsLawsArbitraryForEitherT 1 1
catsLawsCogenForEitherT 1 1
catsLawsArbitraryForValidated 2 2
catsLawsCogenForValidated 2 2
catsLawsArbitraryForIor 2 2
catsLawsCogenForIor 2 2
catsLawsArbitraryForIorT 1 1
catsLawsCogenForIorT 1 1
catsLawsArbitraryForOptionT 1 1
catsLawsCogenForOptionT 1 1
catsLawsArbitraryForIdT 1 1
catsLawsCogenForIdT 1 1
catsLawsArbitraryForEval 1 1
catsLawsCogenForEval 1 1
catsLawsArbitraryForTuple2K 2 2
catsLawsArbitraryForFunc 3 3
catsLawsArbitraryForAppFunc 4 4
catsLawsArbitraryForWriter 2 2
catsLawsCogenForWriter 2 2
catsLawsArbitraryForPartialFunction 1 1
catsLawsArbitraryForEitherK 2 2
catsLawsCogenForEitherK 2 2
catLawsCogenForTuple2K 2 2
catsLawsArbitraryForShow 1 1
catsLawsArbitraryForFn0 1 1
catsLawsArbitraryForEq 1 1
catsLawsArbitraryForEquiv 1 1
catsLawsArbitraryForPartialOrder 1 1
catsLawsArbitraryForPartialOrdering 1 1
catsLawsArbitraryForOrder 1 1
catsLawsArbitraryForSortedMap 3 3
catsLawsCogenForSortedMap 4 4
catsLawsArbitraryForSortedSet 2 2
catsLawsCogenForSortedSet 2 2
catsLawsArbitraryForOrdering 1 1
catsLawsArbitraryForHash 1 1
catsLawsArbitraryForNested 1 1
catsLawArbitraryForState 3 3
catsLawArbitraryForReader 3 3
catsLawArbitraryForCokleisliId 3 3
catsLawsArbitraryForIRWST 2 2
$init$ 0 0
catsLawArbitraryForIndexedStateT 1 1
catsLawsArbitraryForWriterT 1 1
catsLawsCogenForWriterT 1 1
catsLawsArbitraryForKleisli 3 3
catsLawsArbitraryForCokleisli 3 3
$init$ 0 0
laws 0 0
arrowChoice 39 39
<init> 0 0
apply 1 1
$init$ 0 0
laws 0 0
arrow 31 31
<init> 0 0
apply 1 1
$init$ 0 0
laws 0 0
bifoldable 8 8
<init> 0 0
apply 1 1
$init$ 0 0
laws 0 0
bifunctor 9 9
<init> 0 0
apply 1 1
$init$ 0 0
laws 0 0
bimonad 25 25
<init> 0 0
apply 1 1
$init$ 0 0
laws 0 0
bitraverse 25 25
<init> 0 0
apply 1 1
$init$ 0 0
laws 0 0
category 5 5
<init> 0 0
apply 1 1
$init$ 0 0
laws 0 0
choice 7 7
<init> 0 0
apply 1 1
$init$ 0 0
laws 0 0
coflatMap 14 14
<init> 0 0
apply 1 1
$init$ 0 0
laws 0 0
commutativeApplicative 20 20
<init> 0 0
apply 1 1
$init$ 0 0
laws 0 0
commutativeApply 20 20
<init> 0 0
apply 1 1
$init$ 0 0
laws 0 0
commutativeArrow 31 31
<init> 0 0
apply 1 1
$init$ 0 0
laws 0 0
commutativeFlatMap 20 20
<init> 0 0
apply 1 1
$init$ 0 0
laws 0 0
commutativeMonad 20 20
<init> 0 0
apply 1 1
$init$ 0 0
laws 0 0
comonad 17 17
<init> 0 0
apply 1 1
$init$ 0 0
laws 0 0
compose 4 4
<init> 0 0
apply 1 1
$init$ 0 0
laws 0 0
contravariantMonoidal 14 14
<init> 0 0
apply 1 1
$init$ 0 0
laws 0 0
contravariantSemigroupal 14 14
<init> 0 0
apply 1 1
$init$ 0 0
laws 0 0
contravariant 9 9
<init> 0 0
apply 1 1
$init$ 0 0
laws 0 0
distributive 20 20
<init> 0 0
apply 1 1
<init> 0 0
catsLawsEqForFn1 2 2
catsLawsEqForFn2 3 3
catsLawsEqForShow 1 1
sampledEq 4 2
catsLawsEqForEq 1 1
catsLawsEqForEquiv 1 1
catsLawsEqForPartialOrder 2 2
catsLawsEqForPartialOrdering 2 2
catsLawsEqForOrder 1 1
catsLawsEqForOrdering 1 1
catsLawsEqForHash 1 1
catsLawsEqForSemigroup 2 2
catsLawsEqForCommutativeSemigroup 2 2
catsLawsEqForBand 3 3
catsLawsEqForMonoid 2 2
catsLawsEqForSemilattice 3 3
catsLawsEqForCommutativeMonoid 3 3
catsLawsEqForBoundedSemilattice 3 3
catsLawsEqForGroup 3 3
catsLawsEqForCommutativeGroup 3 3
$init$ 0 0
laws 0 0
flatMap 16 16
<init> 0 0
apply 1 1
$init$ 0 0
laws 0 0
foldable 12 12
<init> 0 0
apply 1 1
$init$ 0 0
laws 0 0
functor 9 9
<init> 0 0
apply 1 1
$init$ 0 0
laws 0 0
injectK 4 4
<init> 0 0
apply 1 1
$init$ 0 0
laws 0 0
inject 4 4
<init> 0 0
apply 1 1
$init$ 0 0
laws 0 0
invariantMonoidal 14 14
<init> 0 0
apply 1 1
$init$ 0 0
laws 0 0
invariantSemigroupal 14 14
<init> 0 0
apply 1 1
$init$ 0 0
laws 0 0
invariant 9 9
<init> 0 0
apply 1 1
$init$ 0 0
laws 0 0
monadError 27 27
<init> 0 0
apply 1 1
$init$ 0 0
laws 0 0
monad 20 20
stackUnsafeMonad 20 20
<init> 0 0
apply 1 1
$init$ 0 0
laws 0 0
monoidK 3 3
<init> 0 0
apply 1 1
$init$ 0 0
laws 0 0
nonEmptyParallel 8 8
<init> 0 0
apply 1 1
$init$ 0 0
laws 0 0
nonEmptyTraverse 38 38
<init> 0 0
apply 1 1
$init$ 0 0
laws 0 0
parallel 8 8
<init> 0 0
apply 1 1
$init$ 0 0
laws 0 0
profunctor 16 16
<init> 0 0
apply 1 1
$init$ 0 0
laws 0 0
reducible 16 16
<init> 0 0
apply 1 1
$init$ 0 0
laws 0 0
semigroupK 3 3
<init> 0 0
apply 1 1
$init$ 0 0
laws 0 0
semigroupal 9 9
<init> 0 0
apply 2 2
associativity 1 0
leftIdentity 1 0
rightIdentity 1 0
<init> 0 0
invariant 1 1
$init$ 0 0
laws 0 0
strong 19 19
<init> 0 0
apply 1 1
$init$ 0 0
laws 0 0
traverse 30 30
<init> 0 0
apply 1 1
$init$ 0 0
laws 0 0
unorderedFoldable 9 9
<init> 0 0
apply 1 1
$init$ 0 0
laws 0 0
unorderedTraverse 19 19
<init> 0 0
apply 1 1
<init> 0 0
catsLawsIsEqToProp 3 2
<init> 0 0
<init> 1 0
$less$minus$greater 1 0
<init> 2 0
tailForced 0 0
transform 3 1
map 2 1
mapBranchingRoot 2 1
mapBranchingS 2 1
mapBranchingT 2 1
coflatMap 2 1
coflatten 1 1
extract 0 0
forceTail 0 0
forceAll 1 1
<init> 0 0
unfold 3 1
cata 3 1
cataM 5 2
<init> 0 0
catsReducibleForCofree 1 1
<init> 0 0
catsTraverseForCofree 1 1
<init> 0 0
catsFreeComonadForCofree 1 1
$init$ 0 0
F 0 0
extract 1 0
coflatMap 2 0
coflatten 1 0
map 2 0
$init$ 0 0
F 0 0
foldMap 3 1
foldRight 3 0
foldLeft 3 0
reduceLeftTo 3 0
reduceRightTo 3 0
$init$ 0 0
F 0 0
traverse 3 1
<init> 0 0
k 0 0
run 1 1
foldMap 2 1
toYoneda 1 1
map 1 0
mapK 1 0
transform 1 0
<init> 0 0
lift 1 0
apply 2 0
unsafeApply 2 0
catsFreeFunctorForCoyoneda 0 0
<init> 0 0
map 1 0
mapK 1 0
flatMap 1 0
fold 3 1
step 0 0
resume 1 1
foldStep 3 0
go 2 1
run 1 1
runM 3 2
runTailRec 1 1
foldMap 2 1
compile 1 0
inject 1 1
toString 0 0
<init> 0 0
<init> 1 0
<init> 1 0
<init> 2 0
pure 1 0
liftF 1 0
roll 1 0
suspend 1 0
defer 1 0
mapK 1 0
compile 1 0
foldMap 2 1
inject 0 0
<init> 1 0
apply 2 1
injectRoll 2 1
match_ 3 2
catsFreeMonadForFree 0 0
$init$ 0 0
F 0 0
foldLeft 3 0
foldRight 3 0
$init$ 0 0
TraversableF 0 0
F 0 0
traverse 3 1
map 2 0
<init> 0 0
catsFreeFoldableForFree 1 1
catsFreeTraverseForFree 1 1
<init> 0 0
ap 1 0
map 1 0
map2 2 0
foldMap 2 1
fold 1 1
compile 1 0
flatCompile 1 0
analyze 2 1
monad 0 0
toString 0 0
<init> 0 0
foldArg 3 1
<init> 2 0
<init> 1 0
<init> 1 0
<init> 2 0
pure 1 0
ap 2 0
lift 1 0
freeApplicative 0 0
<init> 0 0
imap 2 0
product 1 0
foldMap 2 1
fold 1 1
compile 1 0
analyze 2 1
<init> 0 0
<init> 1 0
foldMap 2 1
<init> 1 0
foldMap 2 1
<init> 2 0
foldMap 2 1
<init> 3 0
foldMap 2 1
pure 1 0
lift 1 0
catsFreeInvariantMonoidal 0 0
<init> 0 0
map 2 1
mapK 1 0
flatMap 1 0
hoist 1 0
interpret 2 1
compile 2 1
foldMap 2 1
resume 2 2
runM 3 2
toM 1 1
step 0 0
toString 0 0
<init> 0 0
<init> 1 0
<init> 2 0
a 0 0
f 0 0
pure 2 1
suspend 2 1
defer 2 1
tailRecM 3 1
liftT 2 1
liftF 2 1
roll 2 1
compile 2 1
foldMap 2 1
<init> 0 0
catsFreeMonadErrorForFreeT 1 1
<init> 0 0
catsFreeMonadForFreeT 1 1
<init> 0 0
catsFreeFlatMapForFreeT 1 1
<init> 0 0
catsFreeAlternativeForFreeT 2 2
<init> 0 0
catsFreeSemigroupKForFreeT 2 2
$init$ 0 0
M 0 0
map 2 0
flatMap 2 0
tailRecM 2 0
$init$ 0 0
M 0 0
pure 1 0
$init$ 0 0
M 0 0
M1 0 0
empty 0 0
$init$ 0 0
M 0 0
M1 0 0
combineK 2 0
<init> 0 0
done 1 0
suspend 1 0
defer 1 0
delay 1 0
<init> 0 0
apply 1 0
run 0 0
toCoyoneda 0 0
map 1 0
mapK 1 0
<init> 0 0
catsFreeFunctorForYoneda 0 0
apply 2 1
<init> 0 0
<init> 0 0
cons 2 0
<init> 0 0
pureSemigroupKIsConsK 2 2
$init$ 0 0
empty 0 0
isEmpty 2 1
nonEmpty 2 1
<init> 0 0
apply 1 0
$init$ 0 0
iterableIsEmpty 1 1
$init$ 0 0
monoidIsEmpty 1 1
$init$ 0 0
empty 0 0
synthesize 0 0
<init> 0 0
<init> 0 0
instantiate 1 1
extract 1 0
<init> 0 0
comonadIsExtract 1 1
extractCoflatMapIsComonad 2 2
$init$ 0 0
one 0 0
isOne 2 1
nonOne 2 1
<init> 0 0
apply 1 0
pure 1 0
<init> 0 0
applicativeIsPure 1 1
pureFlatMapIsMonad 2 2
$init$ 0 0
zero 0 0
isZero 2 1
nonZero 2 1
<init> 0 0
apply 1 0
<init> 0 0
<init> 0 0
<init> 0 0
<init> 0 0
foldLeft 3 0
foldRight 3 0
foldMap 3 1
$init$ 0 0
legacyIterableFoldable 1 1
<init> 0 0
<init> 0 0
<init> 0 0
empty 0 0
<init> 0 0
cons 2 0
$init$ 0 0
alleycatsStdInstancesForMap 0 0
<init> 0 0
<init> 0 0
<init> 0 0
empty 0 0
<init> 0 0
<init> 0 0
pure 1 0
map 2 0
flatMap 2 0
tailRecM 2 0
<init> 0 0
foldLeft 3 0
foldRight 3 0
foldMap 3 1
traverse 3 1
get 2 0
size 1 0
exists 2 0
forall 2 0
isEmpty 1 0
fold 2 1
toList 1 0
reduceLeftOption 2 0
find 2 0
collectFirst 2 0
collectFirstSome 2 0
<init> 0 0
$init$ 0 0
legacySetMonad 1 1
legacySetTraverse 1 1
<init> 0 0
<init> 0 0
<init> 0 0
pure 1 0
map 2 0
flatMap 2 0
coflatMap 2 0
extract 1 0
tailRecM 2 0
$init$ 0 0
legacyTryBimonad 1 1
<init> 0 0
<init> 0 0
$init$ 0 0
<init> 2 1
isEmpty 1 1
nonEmpty 1 1
<init> 0 0
$init$ 0 0
<init> 2 1
foreach 1 0
$init$ 0 0
laws 0 0
tailRecM 4 4
<init> 0 0
apply 1 1
<init> 0 0
fold 0 0
traverseConst 0 0
<init> 0 0
combineAllCats 0 0
combineCats 0 0
combineScalaz 0 0
combineDirect 0 0
combineGeneric 0 0
combineMapsGeneric 3 0
foldMapCats 0 0
foldMapScalaz 0 0
<init> 0 0
eval 0 0
evalFib 1 0
trampoline 0 0
trampolineFib 1 0
<init> 1 0
areEquivalent 2 0
$init$ 0 0
lowPriorityCatsCanEqual 2 2
$init$ 0 0
convertToEqualizer 1 0
convertToCheckingEqualizer 1 0
unconstrainedEquality 1 1
catsCanEqual 2 2
<init> 0 0
$init$ 0 0
$init$ 0 0
catsSyntaxEq 2 1
even 1 0
$init$ 0 0
<init> 0 0
<init> 0 0
n 0 0
<init> 1 0
$init$ 0 0
<init> 1 0
<init> 1 0
<init> 0 0
<init> 1 0
<init> 0 0
<init> 0 0
partialCompare 2 0
<init> 1 0
<init> 0 0
<init> 0 0
compare 2 0
<init> 1 0
<init> 0 0
<init> 0 0
hash 1 0
eqv 2 0
<init> 1 0
<init> 0 0
<init> 0 0
combine 2 0
<init> 1 0
<init> 0 0
<init> 0 0
combine 2 0
<init> 1 0
<init> 0 0
<init> 0 0
empty 0 0
combine 2 0
<init> 1 0
<init> 0 0
<init> 0 0
combine 2 0
<init> 1 0
<init> 0 0
<init> 0 0
combine 2 0
<init> 1 0
<init> 0 0
<init> 0 0
empty 0 0
combine 2 0
<init> 1 0
<init> 0 0
<init> 0 0
empty 0 0
combine 2 0
<init> 1 0
<init> 0 0
<init> 0 0
empty 0 0
combine 2 0
inverse 1 0
<init> 1 0
<init> 0 0
<init> 0 0
empty 0 0
combine 2 0
inverse 1 0
