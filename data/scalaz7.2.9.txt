$init$ 0
futureComonad 2
futureMonoid 2
<init> 0
$init$ 0
map 2
traverseImpl 3
$init$ 0
_1 0
bind 2
tailrecM 2
<init> 0
_1 0
point 1
$init$ 0
map 2
traverseImpl 3
$init$ 0
_1 0
_2 0
bind 2
tailrecM 2
<init> 0
_1 0
_2 0
point 1
$init$ 0
map 2
traverseImpl 3
$init$ 0
_1 0
_2 0
_3 0
bind 2
tailrecM 2
<init> 0
_1 0
_2 0
_3 0
point 1
$init$ 0
map 2
traverseImpl 3
$init$ 0
_1 0
_2 0
_3 0
_4 0
bind 2
tailrecM 2
<init> 0
_1 0
_2 0
_3 0
_4 0
point 1
$init$ 0
map 2
traverseImpl 3
$init$ 0
_1 0
_2 0
_3 0
_4 0
_5 0
bind 2
tailrecM 2
<init> 0
_1 0
_2 0
_3 0
_4 0
_5 0
point 1
$init$ 0
map 2
traverseImpl 3
$init$ 0
_1 0
_2 0
_3 0
_4 0
_5 0
_6 0
bind 2
tailrecM 2
<init> 0
_1 0
_2 0
_3 0
_4 0
_5 0
_6 0
point 1
$init$ 0
map 2
traverseImpl 3
$init$ 0
_1 0
_2 0
_3 0
_4 0
_5 0
_6 0
_7 0
bind 2
tailrecM 2
<init> 0
_1 0
_2 0
_3 0
_4 0
_5 0
_6 0
_7 0
point 1
<init> 1
fold 1
toIndexedSeq 1
mapElements 2
<init> 1
fold 1
toIndexedSeq 1
mapElements 3
<init> 1
fold 1
toIndexedSeq 1
mapElements 4
<init> 1
fold 1
toIndexedSeq 1
mapElements 5
<init> 1
fold 1
toIndexedSeq 1
mapElements 6
<init> 1
fold 1
toIndexedSeq 1
mapElements 7
<init> 1
fold 1
toIndexedSeq 1
mapElements 8
<init> 1
fold 1
toIndexedSeq 1
mapElements 9
<init> 1
fold 1
toIndexedSeq 1
mapElements 10
<init> 1
fold 1
toIndexedSeq 1
mapElements 11
<init> 1
fold 1
toIndexedSeq 1
mapElements 12
$init$ 0
ToTuple2Ops 1
ToTuple3Ops 1
ToTuple4Ops 1
ToTuple5Ops 1
ToTuple6Ops 1
ToTuple7Ops 1
ToTuple8Ops 1
ToTuple9Ops 1
ToTuple10Ops 1
ToTuple11Ops 1
ToTuple12Ops 1
<init> 2
unit 1
counit 1
leftAdjunct 2
rightAdjunct 2
<init> 0
zapWith 3
<init> 0
zapWith 3
<init> 0
rep 1
unrep 1
<init> 0
point 1
bind 2
<init> 0
copoint 1
cobind 2
map 2
cojoin 1
compose 1
<init> 0
apply 3
<init> 0
compositeAdjunction 2
curryUncurryAdjunction 0
<init> 0
leftAdjunct 2
rightAdjunct 2
<init> 0
leftAdjunct 2
rightAdjunct 2
<init> 0
leftAdjunct 2
rightAdjunct 2
<init> 0
leftAdjunct 2
rightAdjunct 2
writerReaderAdjunction 0
$init$ 0
alignWith 1
product 1
align 2
padWith 1
pad 0
merge 3
alignSwap 2
alignA 2
alignB 2
alignThis 2
alignThat 2
alignBoth 2
$init$ 0
collapse 2
alignLaw 0
<init> 0
F 0
<init> 0
apply 1
<init> 0
toUpperChar 0
<init> 0
<init> 0
<init> 0
<init> 0
<init> 0
<init> 0
<init> 0
<init> 0
<init> 0
<init> 0
<init> 0
<init> 0
<init> 0
<init> 0
<init> 0
<init> 0
<init> 0
<init> 0
<init> 0
<init> 0
<init> 0
<init> 0
<init> 0
<init> 0
<init> 0
<init> 0
<init> 0
ToCharFromAlpha 1
<init> 0
$init$ 0
point 1
pure 1
map 2
apply2 3
traverse 3
sequence 2
replicateM 2
replicateM_ 2
filterM 2
unlessM 2
whenM 2
compose 1
product 1
flip 0
$init$ 0
identityAp 2
homomorphism 3
interchange 3
mapLikeDerived 3
applicativeLaw 0
<init> 0
F 0
<init> 0
apply 1
monoidApplicative 1
$init$ 0
compose 1
product 1
<init> 1
some 1
many 1
<init> 0
F 0
<init> 0
apply 1
$init$ 0
ap 2
traverse1 3
sequence1 2
compose 1
product 1
apF 1
ap2 3
ap3 4
ap4 5
ap5 6
ap6 7
ap7 8
ap8 9
apply2 3
apply3 4
apply4 5
apply5 6
apply6 7
apply7 8
apply8 9
apply9 10
apply10 11
apply11 12
apply12 13
tuple2 2
tuple3 3
tuple4 4
tuple5 5
lift2 1
lift3 1
lift4 1
lift5 1
lift6 1
lift7 1
lift8 1
lift9 1
lift10 1
lift11 1
lift12 1
applyApplicative 0
$init$ 0
composition 4
applyLaw 0
<init> 0
F 0
<init> 0
apply 1
$init$ 0
arr 1
covariantInstance 0
$less$less$less 2
$greater$greater$greater 2
second 1
splitA 2
split 2
product 1
combine 2
mapfst 2
mapsnd 2
<init> 0
F 0
<init> 0
apply 1
$init$ 0
reassociateLeft 1
reassociateRight 1
reassociateIso 0
$init$ 0
leftRight 2
rightLeft 2
associativeLaw 0
<init> 0
F 0
<init> 0
apply 1
$init$ 0
F 0
map 2
$init$ 0
F 0
map 2
$init$ 0
F 0
map 2
$init$ 0
F 0
foldMap 3
foldRight 3
foldLeft 3
$init$ 0
F 0
foldMap 3
foldRight 3
foldLeft 3
$init$ 0
F 0
foldMap 3
foldRight 3
foldLeft 3
$init$ 0
F 0
traverseImpl 3
$init$ 0
F 0
traverseImpl 3
$init$ 0
F 0
traverseImpl 3
$init$ 0
bifoldMap 4
bifoldRight 4
bifoldLeft 4
compose 1
product 1
bifoldMap1 4
bifoldR 4
bifoldL 4
leftFoldable 0
rightFoldable 0
uFoldable 0
embed 2
embedLeft 1
embedRight 1
$init$ 0
leftFMConsistent 3
rightFMConsistent 3
bifoldableLaw 0
<init> 0
F 0
<init> 0
apply 1
$init$ 0
bifoldRight 4
$init$ 0
bifoldMap 4
$init$ 0
bimap 3
compose 1
product 1
leftFunctor 0
leftMap 2
rightFunctor 0
uFunctor 0
rightMap 2
umap 2
embed 2
embedLeft 1
embedRight 1
<init> 0
F 0
<init> 0
apply 1
<init> 2
to 1
from 1
flip 0
toK 0
fromK 0
lens 2
partial 2
unary_$tilde 2
bimap 4
$times$times$times 3
$up$up$up 3
compose 3
$less$eq$less 3
andThen 3
$greater$eq$greater 3
<init> 0
bijection 2
liftBijection 4
bijectionId 2
curryB 0
eitherB 0
zipB 2
zipListB 0
zipEndoB 0
zipReaderB 0
tuple3B 0
tuple4B 0
tuple5B 0
tuple6B 0
tuple7B 0
<init> 0
bijectionTSplit 2
<init> 0
bijectionTCategory 2
$init$ 0
F 0
G 0
compose 2
split 2
$init$ 0
F 0
G 0
id 0
$init$ 0
bind 2
ap 2
join 1
ifM 3
forever 1
mproduct 2
product 1
$init$ 0
associativeBind 4
apLikeDerived 3
bindLaw 0
<init> 0
F 0
<init> 0
apply 1
$init$ 0
tailrecM 2
forever 1
product 1
$init$ 0
tailrecBindConsistency 3
bindRecLaw 0
<init> 0
F 0
<init> 0
apply 1
$init$ 0
bitraverseImpl 4
compose 1
product 1
bitraverseF 3
bimap 3
leftTraverse 0
rightTraverse 0
uTraverse 0
<init> 1
run 3
bitraversal 1
bitraversalS 0
bitraverse 4
bitraverseS 3
runBitraverseS 4
traverseSTrampoline 4
bitraverseKTrampoline 4
bifoldLShape 4
bisequence 2
bifoldLeft 4
bifoldMap 4
bifoldRight 4
embed 2
embedLeft 1
embedRight 1
<init> 0
F 0
<init> 0
apply 1
<init> 0
foldedCase 0
map 2
equals 1
hashCode 0
<init> 0
apply 2
mk 2
<init> 0
CaseInsensitiveMonoid 2
CaseInsensitiveEqual 1
CaseInsensitiveOrder 1
CaseInsensitiveShow 1
foldCase 1
<init> 0
<init> 0
<init> 0
foldCase 1
$init$ 0
attempt 1
fail 1
<init> 0
F 0
<init> 0
apply 1
$init$ 0
id 0
empty 0
monoid 0
$init$ 0
leftIdentity 2
rightIdentity 2
categoryLaw 0
<init> 0
F 0
<init> 0
apply 1
$init$ 0
choice 2
codiagonal 0
<init> 0
F 0
<init> 0
apply 1
$init$ 0
cobind 2
extend 2
cojoin 1
$init$ 0
cobindAssociative 5
cobindLaw 0
<init> 0
F 0
<init> 0
apply 1
<init> 0
apply 1
improve 1
flatMap 1
map 1
toRan 0
<init> 0
rep 2
pureCodensity 1
codensityMonadPlus 1
<init> 0
liftM 2
apply 1
<init> 0
codensityMonad 0
<init> 0
point 1
map 2
bind 2
<init> 0
head 0
t 0
applyCofree 3
tail 0
extract 0
copure 0
out 0
map 2
$eq$greater$greater 2
extend 2
scanr 2
duplicate 1
toPair 0
mapBranching 3
mapBranchingT 2
mapFirstBranching 1
inject 2
applyTail 3
zapWith 4
zap 3
<init> 0
apply 2
delay 2
unapply 1
applyT 3
CofreeZip 2
unfoldC 3
unfold 4
mapUnfold 3
<init> 0
cofreeFoldable 1
<init> 0
cofreeTraverse 1
cofreeZipFunctor 1
<init> 0
cofreeFoldable1 1
cofreeBind 2
<init> 0
cofreeTraverse1 1
cofreeZipApply 1
<init> 0
cofreeZipApplicative 1
cofreeMonad 2
<init> 0
cofreeComonad 1
$init$ 0
F 0
copoint 1
cojoin 1
map 2
cobind 2
$init$ 0
F 0
map 2
$init$ 0
F 0
ap 2
$init$ 0
F 0
point 1
$init$ 0
F 0
G 0
bind 2
$init$ 0
G 0
point 1
$init$ 0
F 0
foldMap 3
foldRight 3
foldLeft 3
foldMapLeft1 3
foldMapRight1 3
foldMap1 3
$init$ 0
F 0
foldMap1 3
$init$ 0
F 0
traverseImpl 3
traverse1Impl 3
$init$ 0
F 0
traverse1Impl 3
<init> 1
apply 1
dimap 3
contramapValue 1
map 1
flatMap 1
$less$less$eq 2
$eq$greater$eq 2
compose 2
$eq$less$eq 2
endo 1
<init> 0
<init> 0
cokleisliCompose 1
cokleisliProfunctor 1
<init> 0
cokleisliMonad 0
cokleisliArrow 1
$init$ 0
map 2
ap 2
point 1
bind 2
tailrecM 2
$init$ 0
F 0
compose 2
$init$ 0
F 0
dimap 3
mapfst 2
mapsnd 2
$init$ 0
F 0
left 1
right 1
arr 1
id 0
first 1
$init$ 0
copoint 1
copure 1
$init$ 0
cobindLeftIdentity 2
cobindRightIdentity 3
comonadLaw 0
<init> 0
F 0
<init> 0
apply 1
$init$ 0
pos 1
peek 2
peeks 2
seek 2
seeks 2
experiment 3
<init> 0
apply 1
lower 2
<init> 0
apply 1
cohoist 2
<init> 0
apply 1
$init$ 0
compose 2
$init$ 0
plus 2
$init$ 0
append 2
plus 0
semigroup 0
$init$ 0
associative 4
composeLaw 0
<init> 0
F 0
<init> 0
apply 1
$init$ 0
F 0
G 0
map 2
$init$ 0
F 0
G 0
ap 2
$init$ 0
F 0
G 0
point 1
$init$ 0
F 0
plus 2
$init$ 0
F 0
empty 0
F 0
G 0
$init$ 0
F 0
G 0
foldRight 3
foldMap 3
foldLeft 3
$init$ 0
F 0
G 0
traverseImpl 3
$init$ 0
F 0
G 0
foldMap1 3
foldMapRight1 3
foldMapLeft1 3
$init$ 0
F 0
G 0
traverse1Impl 3
$init$ 0
F 0
G 0
distributeImpl 3
$init$ 0
T 0
F 0
G 0
zip 2
$init$ 0
T 0
F 0
G 0
unzip 1
$init$ 0
F 0
G 0
bimap 3
$init$ 0
F 0
G 0
bifoldMap 4
bifoldRight 4
bifoldLeft 4
$init$ 0
F 0
G 0
bitraverseImpl 4
$init$ 0
F 0
G 0
bimap 3
$init$ 0
F 0
G 0
H 0
bimap 3
$init$ 0
F 0
G 0
bifoldMap 4
bifoldRight 4
bifoldLeft 4
$init$ 0
F 0
G 0
H 0
bifoldMap 4
bifoldRight 4
bifoldLeft 4
$init$ 0
F 0
G 0
bitraverseImpl 4
$init$ 0
F 0
G 0
H 0
bitraverseImpl 4
<init> 1
$init$ 0
A 0
append 2
$init$ 0
A 0
zero 0
$init$ 0
map 2
traverseImpl 3
$init$ 0
C 0
ap 2
$init$ 0
C 0
point 1
$init$ 0
OA 0
equal 2
equalIsNatural 0
$init$ 0
OA 0
order 2
<init> 0
contramap 2
<init> 0
constTraverse 0
constContravariant 0
<init> 0
constEqual 1
constSemigroup 1
constApply 1
<init> 0
constOrder 1
constMonoid 1
constApplicative 1
<init> 0
const 1
$init$ 0
contramap 2
xmap 3
compose 1
icompose 1
product 1
$init$ 0
identity 2
composite 4
contravariantLaw 0
<init> 0
F 0
<init> 0
apply 1
<init> 0
run 1
unlift 1
contramap 1
trans 1
<init> 0
contravariantCoyonedaContravariant 0
<init> 0
<init> 0
apply 2
by 0
apply 2
lift 1
iso 1
<init> 1
map 3
cobind 3
duplicate 2
copoint 2
contramap 3
fold 2
foldRight 4
foldMap 4
foldMap1 4
foldMapRight1 4
traverse 4
traverse1 4
isLeft 0
isRight 0
unary_$tilde 0
validation 0
<init> 0
coproductTraverse1 2
coproductIso 0
leftc 1
rightc 1
<init> 0
apply 1
<init> 0
apply 1
left 0
right 0
<init> 0
coproductEqual 1
coproductFunctor 2
coproductFoldable 2
<init> 0
coproductContravariant 2
coproductFoldable1 2
<init> 0
coproductCobind 2
<init> 0
coproductTraverse 2
<init> 0
coproductComonad 2
$init$ 0
F 0
G 0
map 2
$init$ 0
F 0
G 0
contramap 2
$init$ 0
F 0
G 0
foldRight 3
foldMap 3
$init$ 0
F 0
G 0
foldMap1 3
foldMapRight1 3
$init$ 0
F 0
G 0
map 2
traverseImpl 3
$init$ 0
F 0
G 0
traverse1Impl 3
map 2
$init$ 0
F 0
G 0
map 2
cobind 2
$init$ 0
F 0
G 0
map 2
copoint 1
cobind 2
cojoin 1
<init> 1
rangeError 1
apply 1
split 1
length 0
size 0
$plus$plus 1
$colon$plus 1
$plus$colon 1
$minus$colon 1
$colon$minus 1
tail 0
init 0
drop 1
take 1
map 1
toList 0
toStream 0
toVector 0
toString 0
flatMap 1
isEmpty 0
nonEmpty 0
<init> 0
cord 1
stringToCord 1
apply 1
fromStrings 1
mkCord 2
<init> 0
show 1
shows 1
<init> 0
zero 0
append 2
<init> 0
equal 2
<init> 0
run 1
unlift 1
toYoneda 1
map 1
trans 1
toLan 0
flatMap 1
extend 1
<init> 0
lift 1
<init> 0
apply 2
by 0
apply 2
iso 1
liftTF 2
liftT 1
<init> 0
coyonedaOrder 2
coyonedaBindRec 1
<init> 0
coyonedaComonad 1
<init> 0
coyonedaEqual 2
coyonedaCobind 1
<init> 0
coyonedaTraverse1 1
<init> 0
coyonedaMonadPlus 1
<init> 0
coyonedaApplicativePlus 1
<init> 0
coyonedaMonad 1
coyonedaPlusEmpty 2
<init> 0
coyonedaBind 1
coyonedaPlus 2
<init> 0
coyonedaApplicative 1
<init> 0
coyonedaFoldable1 1
coyonedaApply 1
<init> 0
coyonedaTraverse 1
coyonedaContravariant 2
<init> 0
coyonedaFoldable 1
coyonedaFunctor 0
$init$ 0
F 0
foldMap 3
foldRight 3
foldLeft 3
<init> 0
F 0
foldMap1 3
foldMapRight1 3
$init$ 0
cozip 1
cozip3 1
cozip4 1
cozip5 1
cozip6 1
cozip7 1
<init> 0
F 0
<init> 0
apply 1
cofzip 2
cofzip3 2
cofzip4 2
cofzip5 2
cofzip6 2
cofzip7 2
<init> 1
apply 1
toIList 0
toList 0
$plus$colon 1
$colon$plus 1
$plus$plus 1
uncons 2
headOption 0
isEmpty 0
tailOption 0
foldr 2
map 1
flatMap 1
zip 1
<init> 0
apply 1
mkDList 1
DL 1
fromList 1
fromIList 1
concat 1
replicate 2
unfoldr 2
<init> 0
dlistMonoid 0
<init> 0
point 1
bind 2
plus 2
empty 0
isEmpty 1
zip 2
traverseImpl 3
tailrecM 2
dlistEqual 1
<init> 0
isEmpty 0
frontMaybe 0
backMaybe 0
uncons 0
unsnoc 0
cons 1
snoc 1
$plus$colon 1
$colon$plus 1
toStream 0
toBackStream 0
toIList 0
toBackIList 0
$plus$plus 1
foldLeft 2
foldRight 2
map 1
size 0
reverse 0
<init> 0
apply 1
fromFoldable 2
empty 0
reverseNEL 1
<init> 1
isEmpty 0
frontMaybe 0
backMaybe 0
<init> 4
isEmpty 0
frontMaybe 0
backMaybe 0
<init> 0
apply 0
unapply 1
<init> 0
equalDequeue 1
dequeueMonoid 0
<init> 0
foldRight 3
foldLeft 3
foldMap 3
empty 0
plus 2
isEmpty 1
length 1
map 2
$init$ 0
A 0
equal 2
<init> 0
$plus 1
$plus 1
$minus 1
$minus 1
$plus$plus 1
$minus$minus 1
intervals 0
contains 1
contains 1
map 2
flatMap 2
filter 1
foreach 1
foldLeft 2
toSet 0
toList 0
<init> 0
subtractInterval 3
fixIntervalOrder 2
$init$ 0
<init> 2
<init> 0
<init> 1
<init> 2
adjacentBefore 1
adjacentAfter 1
construct 3
binarySearch 1
$plus 1
$plus 1
$minus 1
$minus 1
$plus$plus 1
$minus$minus 1
contains 1
contains 1
map 2
flatMap 2
filter 1
foreach 1
foldLeft 2
toSet 0
toList 0
toString 0
<init> 0
empty 1
fromValuesSeq 2
fromIntervalsSeq 2
<init> 0
dievEqual 1
dievMonoid 1
dievShow 1
<init> 0
toLong 0
toChar 0
<init> 0
<init> 0
<init> 0
<init> 0
<init> 0
<init> 0
<init> 0
<init> 0
<init> 0
<init> 0
<init> 0
DigitLong 1
digitFromChar 1
digitFromInt 1
digitFromLong 1
mod10Digit 1
longDigits 2
digits 2
digitsOr 3
digitsCollapse 2
traverseDigits 2
traverseDigitsOr 3
<init> 0
<init> 0
succ 1
pred 1
succn 2
predn 2
min 0
max 0
shows 1
order 2
equal 2
append 2
zero 0
$init$ 0
distributeImpl 3
compose 1
product 1
<init> 1
run 2
distribution 1
distribute 3
cosequence 2
<init> 0
apply 1
$init$ 0
divide 3
divide1 2
divide2 3
divide3 4
divide4 5
divide5 6
divide6 7
divide7 8
divide8 9
divide9 10
divide10 11
divide11 12
divide12 13
divide13 14
divide14 15
divide15 16
divide16 17
divide17 18
divide18 19
divide19 20
divide20 21
divide21 22
divide22 23
tuple2 2
tuple3 3
tuple4 4
tuple5 5
tuple6 6
tuple7 7
tuple8 8
tuple9 9
tuple10 10
tuple11 11
tuple12 12
tuple13 13
tuple14 14
tuple15 15
tuple16 16
tuple17 17
tuple18 18
tuple19 19
tuple20 20
tuple21 21
tuple22 22
deriving2 3
deriving3 4
deriving4 5
deriving5 6
deriving6 7
deriving7 8
deriving8 9
deriving9 10
deriving10 11
deriving11 12
deriving12 13
deriving13 14
deriving14 15
deriving15 16
deriving16 17
deriving17 18
deriving18 19
deriving19 20
deriving20 21
deriving21 22
deriving22 23
$init$ 0
delta 0
composition 4
divideLaw 0
<init> 0
F 0
<init> 0
apply 1
$init$ 0
conquer 0
$init$ 0
rightIdentity 2
leftIdentity 2
divisibleLaw 0
<init> 0
F 0
<init> 0
apply 1
<init> 0
apply 1
<init> 0
dualSemigroup 1
<init> 0
dualMonoid 1
dualOrder 1
$init$ 0
F 0
append 2
$init$ 0
F 0
zero 0
<init> 0
<init> 1
$less$less$qmark$colon 1
$colon$qmark$greater$greater 1
isLeft 0
isRight 0
fold 2
loopr 2
loopl 2
swap 0
unary_$tilde 0
swapped 1
$tilde 1
bimap 2
leftMap 1
bitraverse 3
map 1
traverse 2
foreach 1
ap 1
flatMap 1
foldRight 2
filter 2
exists 1
forall 1
toList 0
toStream 0
toOption 0
toMaybe 0
toEither 0
getOrElse 1
$bar 1
valueOr 1
orElse 1
$bar$bar$bar 1
$plus$plus$plus 3
ensure 2
recover 1
recoverWith 1
$eq$eq$eq 3
compare 3
show 2
validation 0
validationNel 0
validationed 1
$at$bslash$qmark$div 1
merge 1
toThese 0
<init> 1
<init> 1
<init> 0
left 0
right 0
fromEither 1
fromTryCatchThrowable 3
fromTryCatchNonFatal 1
loopRight 3
loopLeft 3
<init> 0
DisjunctionOrder 2
DisjunctionMonoid 2
<init> 0
DisjunctionEqual 2
DisjunctionShow 2
DisjunctionSemigroup 2
<init> 0
DisjunctionInstances1 0
<init> 0
<init> 0
bimap 3
bitraverseImpl 4
<init> 0
reassociateLeft 1
reassociateRight 1
<init> 0
fold 3
eitherLeft 0
eitherRight 0
leftOr 2
middleOr 2
rightOr 2
<init> 1
<init> 1
<init> 1
<init> 0
left3 1
middle3 1
right3 1
equal 3
show 3
<init> 1
<init> 1
$less$less$qmark$colon 2
$colon$qmark$greater$greater 1
fold 3
foldM 3
isLeft 1
isRight 1
swap 1
unary_$tilde 1
swapped 2
$tilde 2
bimap 3
leftMap 2
bitraverse 4
map 2
mapT 1
traverse 3
app 2
flatMap 2
flatMapF 2
foldRight 3
filter 3
withFilter 3
exists 2
forall 2
toList 1
toThese 1
toStream 1
toOption 1
toMaybe 1
toEither 1
getOrElse 2
$bar 2
valueOr 2
orElse 2
$bar$bar$bar 2
$plus$plus$plus 4
ensure 3
$eq$eq$eq 4
compare 4
show 3
cozip 1
validation 1
validationed 2
merge 2
<init> 0
eitherT 1
fromDisjunction 0
<init> 0
apply 2
eitherTU 4
monadTell 1
monadListen 1
left 2
right 2
leftU 0
rightU 0
<init> 1
apply 2
<init> 1
apply 2
fromEither 2
fromTryCatchThrowable 4
fromTryCatchNonFatal 2
<init> 0
eitherTBindRec 2
<init> 0
eitherTMonadError 1
<init> 0
eitherTFunctor 1
<init> 0
eitherTMonad 1
eitherTPlus 2
<init> 0
eitherTBifunctor 1
eitherTBifoldable 1
eitherTMonadPlus 2
eitherTFoldable 1
<init> 0
eitherTBitraverse 1
eitherTTraverse 1
eitherTHoist 0
eitherTEqual 1
eitherTShow 1
$init$ 0
F 0
map 2
$init$ 0
F 0
bind 2
$init$ 0
F 0
B 0
tailrecM 2
$init$ 0
F 0
point 1
$init$ 0
F 0
G 0
plus 2
$init$ 0
G 0
empty 0
$init$ 0
F 0
foldRight 3
$init$ 0
F 0
traverseImpl 3
$init$ 0
F 0
bimap 3
$init$ 0
F 0
bifoldMap 4
$init$ 0
F 0
bitraverseImpl 4
$init$ 0
hoist 2
liftM 2
apply 1
$init$ 0
MT 0
F 0
writer 2
left 1
right 1
$init$ 0
MT 0
listen 1
$init$ 0
F 0
raiseError 1
handleError 2
<init> 1
apply 1
compose 1
andThen 1
<init> 0
endo 1
constantEndo 1
idEndo 0
IsoEndo 0
<init> 0
to 1
from 1
<init> 0
endoInstance 0
<init> 0
xmap 3
zip 2
unzip 1
<init> 1
compose 2
andThen 2
<init> 0
endoKleisli 2
<init> 0
endomorphicMonoid 1
<init> 0
kleisliEndoInstance 1
cokleisliEndoInstance 1
<init> 0
endomorphicSemigroup 1
<init> 0
kleisliEndoSemigroup 1
cokleisliEndoSemigroup 1
$init$ 0
F 0
append 2
$init$ 0
succ 1
pred 1
succn 2
predn 2
min 0
max 0
succx 0
predx 0
succState 1
succStateZeroM 3
succStateZero 3
succStateMinM 2
succStateMin 2
predState 1
predStateZeroM 3
predStateZero 3
predStateMaxM 2
predStateMax 2
from 1
fromStep 2
fromTo 2
fromToL 2
fromStepTo 3
fromStepToL 3
$init$ 0
succpred 1
predsucc 1
minmaxpred 0
minmaxsucc 0
succn 2
predn 2
succorder 1
predorder 1
enumLaw 0
<init> 0
F 0
<init> 0
apply 1
succn 3
predn 3
<init> 0
isEmpty 0
head 0
tail 0
headOption 0
tailOption 0
toList 0
foldRight 2
foldLeft 2
filter 1
dropWhile 1
$plus$plus 1
flatMap 1
map 1
length 0
tails 0
inits 0
findM 2
findMapM 2
reverse 0
zip 1
unzip 1
alignWith 2
interleave 1
take 1
takeWhile 1
zipWithIndex 0
memoized 0
<init> 0
<init> 0
isEmpty 1
cojoin 1
cobind 2
plus 2
bind 2
point 1
empty 0
zip 2
unzip 1
alignWith 1
toEphemeralStream 1
foldRight 3
foldMap 3
foldMap1Opt 3
foldLeft 3
foldMapRight1Opt 3
foldMapLeft1Opt 3
zipWithL 3
zipWithR 3
traverseImpl 3
index 2
tailrecM 2
ephemeralStreamEqual 1
<init> 0
emptyEphemeralStream 0
consImpl 2
cons 2
unfold 2
iterate 2
range 2
fromStream 1
toIterable 1
weakMemo 1
apply 0
apply 1
<init> 1
$hash$hash$colon$colon 1
consWrapper 1
<init> 0
unapply 1
$init$ 0
equal 2
contramap 1
equalIsNatural 0
$init$ 0
commutative 2
reflexive 1
transitive 3
naturality 2
equalLaw 0
<init> 0
F 0
<init> 0
apply 1
equalA 0
equalRef 0
equalBy 2
<init> 0
contramap 2
conquer 0
divide 3
equal 1
<init> 0
fold 2
headOption 0
tailOption 0
head 0
tail 0
<init> 0
fold 2
lastOption 0
initOption 0
last 0
init 0
<init> 0
foldMap 2
$plus$colon 1
$colon$plus 1
$bar$minus$colon 1
$colon$minus$bar 1
lhead 0
ltail 0
rhead 0
rtail 0
toTree 0
map 2
foreach 1
iterator 0
reverseIterator 0
measure 0
toList 0
split1 2
<init> 3
foldMap 2
$plus$colon 1
$colon$plus 1
$bar$minus$colon 1
$colon$minus$bar 1
lhead 0
ltail 0
rhead 0
rtail 0
toTree 0
map 2
foreach 1
iterator 0
reverseIterator 0
split1 2
<init> 4
foldMap 2
$plus$colon 1
$colon$plus 1
$bar$minus$colon 1
$colon$minus$bar 1
lhead 0
ltail 0
rhead 0
rtail 0
toTree 0
map 2
foreach 1
iterator 0
reverseIterator 0
sg 0
split1 2
<init> 5
foldMap 2
$plus$colon 1
$colon$plus 1
$bar$minus$colon 1
$colon$minus$bar 1
lhead 0
ltail 0
rhead 0
rtail 0
toTree 0
map 2
foreach 1
iterator 0
reverseIterator 0
sg 0
split1 2
<init> 6
foldMap 2
$plus$colon 1
$colon$plus 1
$bar$minus$colon 1
$colon$minus$bar 1
lhead 0
ltail 0
rhead 0
rtail 0
toTree 0
map 2
foreach 1
iterator 0
reverseIterator 0
sg 0
split1 2
<init> 1
fold 2
foldMap 2
toDigit 0
map 2
foreach 1
iterator 0
reverseIterator 0
sg 0
split1 2
<init> 1
measure 0
foldMap 2
foldRight 2
foldLeft 2
fold 3
$plus$colon 1
$colon$plus 1
$bar$minus$colon 1
$colon$minus$bar 1
$less$plus$plus$greater 1
sg 0
add1 2
add2 3
add3 4
add4 5
addDigits0 4
addDigits1 5
addDigits2 6
addDigits3 7
addDigits4 8
split 1
split1 1
split1 2
isEmpty 0
viewl 0
viewr 0
head 0
last 0
tail 0
init 0
map 2
traverseTree 3
traverseNode 4
traverseFinger 4
foreach 1
iterator 0
reverseIterator 0
toStream 0
toList 0
toString 0
<init> 0
viewLFunctor 1
viewRFunctor 1
fingerFoldable 0
fingerMeasure 1
nodeMeasure 1
fingerTreeMeasure 1
nodeFoldable 0
fingerTreeFoldable 0
fingerTreeMonoid 1
fingerTreeShow 2
fingerTreeEqual 1
<init> 0
Node2 4
Node3 5
EmptyR 0
OnR 2
EmptyL 0
OnL 2
one 2
two 3
three 4
four 5
node2 3
node3 4
mappendVal 3
empty 1
single 2
single 3
deep 4
deep 5
deepL 4
deepR 4
rotL 3
rotR 3
<init> 1
sizer 0
apply 1
replace 2
split 1
$plus$plus 1
$colon$plus 1
$plus$colon 1
length 0
tail 0
init 0
drop 1
take 1
map 1
flatMap 1
<init> 0
indSeq 1
apply 1
fromSeq 1
<init> 0
indSeqEqual 1
<init> 0
G 0
traverseImpl 3
length 1
index 2
isEmpty 1
empty 1
point 1
bind 2
map 2
plus 2
empty 0
<init> 0
partition 1
insert 1
$plus$plus 1
<init> 0
ordSeq 2
unwrap 1
apply 2
$init$ 0
foldMap 3
foldMap1Opt 3
foldRight 3
compose 1
bicompose 1
product 1
product0 1
foldLeft 3
foldRightM 4
foldLeftM 4
foldMapM 4
fold 2
traverse_ 3
traverseU_ 3
traverseS_ 2
sequence_ 2
sequenceS_ 1
sequenceF_ 1
foldr 3
foldMapRight1Opt 3
foldRight1Opt 2
foldr1Opt 2
foldl 3
foldMapLeft1Opt 3
foldLeft1Opt 2
foldl1Opt 2
foldrM 4
foldlM 4
findMapM 3
findLeft 2
findRight 2
count 1
length 1
index 2
indexOr 3
toList 1
toVector 1
toSet 1
toStream 1
to 2
toIList 1
toEphemeralStream 1
all 2
allM 3
any 2
anyM 3
maximum 2
maximumOf 3
maximumBy 3
minimum 2
minimumOf 3
minimumBy 3
sumr 2
sumr1Opt 2
suml 2
suml1Opt 2
msuml 2
longDigits 2
empty 1
element 3
intercalate 3
splitWith 2
selectSplit 2
distinct 2
distinctE 2
collapse 2
$init$ 0
leftFMConsistent 2
rightFMConsistent 2
foldableLaw 0
<init> 0
F 0
<init> 0
apply 1
$init$ 0
foldRight 3
$init$ 0
foldMap 3
$init$ 0
product 1
compose 1
foldMap1 3
foldMap1Opt 3
foldMapRight1 3
foldMap 3
foldRight1 2
foldRight 3
foldMapLeft1 3
foldLeft1 2
foldr1 2
foldMapRight1Opt 3
foldr1Opt 2
foldl1 2
foldMapLeft1Opt 3
foldl1Opt 2
fold1 2
maximum1 2
maximumOf1 3
maximumBy1 3
minimum1 2
minimumOf1 3
minimumBy1 3
maximum 2
maximumOf 3
maximumBy 3
minimum 2
minimumOf 3
minimumBy 3
distinct1 2
distinctE1 2
sumr1 2
suml1 2
msuml1 2
intercalate1 3
intercalate 3
traverse1_ 4
sequence1_ 3
empty 1
product0 1
toNel 1
scanLeft1 2
scanRight1 2
$init$ 0
leftFM1Consistent 2
rightFM1Consistent 2
foldable1Law 0
<init> 0
F 0
<init> 0
apply 1
$init$ 0
apply 0
map 1
<init> 0
$init$ 0
apply 1
<init> 0
reset 1
return_ 2
pure 1
roll 1
suspend 2
liftFU 2
joinF 1
pause 0
produce 1
await 0
apply 1
<init> 1
<init> 1
<init> 2
a 0
f 0
liftF 1
point 1
<init> 0
map 1
$greater$greater$eq 1
flatMap 1
fold 3
resume 1
mapSuspension 1
mapFirstSuspension 1
flatMapSuspension 1
zapWith 4
zap 3
bounce 2
go 2
runM 3
runRecM 4
step 0
foldMap 2
foldMapRec 3
foldRight 3
foldRun 3
foldRunM 4
run 1
zipWith 2
collect 1
drive 2
feed 2
drain 2
duplicateF 0
extendF 1
extractF 1
toFreeT 1
<init> 0
done 1
delay 1
suspend 1
$init$ 0
<init> 0
point 1
bind 2
copoint 1
cobind 2
cojoin 1
tailrecM 2
<init> 0
$init$ 0
sinkMonad 0
<init> 0
$init$ 0
sourceMonad 0
<init> 0
freeFoldable 2
<init> 0
freeFoldable1 2
<init> 0
freeTraverse 1
<init> 0
freeTraverse1 1
freeSemigroup 1
<init> 0
freeMonad 0
freeZip 2
freeMonoid 1
$init$ 0
map 2
bind 2
$init$ 0
F 0
F0 0
foldMap 3
foldLeft 3
foldRight 3
$init$ 0
F 0
F0 0
foldMap1 3
foldMapRight1 3
foldMapLeft1 3
$init$ 0
F 0
F0 0
map 2
traverseImpl 3
<init> 0
F 0
traverse1Impl 3
<init> 0
foldMap 2
para 2
analyze 2
hoist 1
retract 1
monadic 0
ap 1
map 1
<init> 0
freeInstance 0
point 1
pure 1
lift 1
liftU 2
<init> 1
<init> 0
apply 2
<init> 0
<init> 1
<init> 0
gosub 2
point 2
suspend 1
tailrecM 3
liftM 2
liftMU 2
liftF 3
roll 3
isoFree 1
<init> 0
map 3
flatMap 1
hoistN 3
hoistM 3
interpretS 3
interpretT 3
resume 3
runM 4
step 0
<init> 0
freeTMonadTell 2
<init> 0
freeTMonadReader 2
<init> 0
freeTMonadState 2
<init> 0
freeTMonadError 3
<init> 0
freeTBind 2
freeTHoist 1
freeTFoldable 5
<init> 0
freeTTraverse 4
<init> 0
freeTMonad 2
freeTPlus 4
<init> 0
freeTMonadPlus 3
$init$ 0
S 0
M 0
map 2
bind 2
$init$ 0
M 0
point 1
tailrecM 2
$init$ 0
S 0
M 0
M1 0
M2 0
plus 2
$init$ 0
S 0
M 0
M1 0
F 0
M2 0
foldMap 3
$init$ 0
S 0
F 0
M2 0
M 0
M1 0
traverseImpl 3
$init$ 0
map 2
xmap 3
apply 2
lift 1
strengthL 2
strengthR 2
mapply 2
fpair 1
fproduct 2
void 1
counzip 1
compose 1
icompose 1
bicompose 1
product 1
widen 2
$init$ 0
identity 2
composite 4
functorLaw 0
<init> 0
F 0
<init> 0
apply 1
$init$ 0
reduce 2
to 3
from 3
<init> 0
$init$ 0
FoldrGenerator 1
FoldlGenerator 1
<init> 0
fold 2
isEmpty 0
nonEmpty 0
size 0
insert 2
$plus 2
insertAll 2
insertAllF 3
union 1
uncons 0
minimum 0
minimumO 0
deleteMin 0
adjustMin 1
toUnsortedStream 0
toUnsortedList 0
toStream 0
toList 0
map 2
forall 1
exists 1
foreach 1
filter 1
partition 1
split 1
take 1
drop 1
splitAt 1
break 1
span 1
takeWhile 1
dropWhile 1
nub 0
flatMap 2
traverse 3
foldRight 2
withList 1
insertWith 2
splitWithList 1
toString 0
<init> 2
<init> 0
<init> 0
apply 0
unapply 1
fromData 3
fromCodata 3
fromDataWith 3
sort 3
sortWith 3
singleton 2
replicate 3
apply 3
unapply 1
<init> 0
rightZ 0
adjustZ 1
rezip 0
rootZ 0
zipper 1
emptyZ 0
minZ 1
minZp 1
heapify 1
singletonWith 2
rank 1
skewLink 4
link 1
skewInsert 3
getMin 2
splitForest 0
skewMeld 3
ins 2
uniqify 1
unionUniq 1
<init> 0
<init> 0
foldRight 3
heapMonoid 0
heapEqual 1
<init> 0
$plus$plus 1
$plus$plus$colon 1
$plus$colon 1
$div$colon 2
$colon$plus 1
$colon$colon 1
$colon$colon$colon 1
$colon$bslash 2
$less$up$greater 2
collect 1
collectFirst 1
concat 1
containsSlice 2
count 1
distinct 1
drop 1
dropRight 1
dropRightWhile 1
dropWhile 1
endsWith 2
filter 1
filterNot 1
find 1
flatMap 1
flatten 1
foldLeft 2
foldRight 2
groupBy 2
groupBy1 2
headOption 0
headMaybe 0
indexOf 2
indexOfSlice 2
indexWhere 1
initOption 0
inits 0
interleave 1
intersperse 1
isEmpty 0
lastIndexOf 2
lastIndexOfSlice 2
lastIndexWhere 1
lastOption 0
length 0
map 1
mapAccum 3
mapAccumLeft 2
mapAccumRight 2
nonEmpty 0
padTo 2
partition 1
patch 3
prefixLength 1
reduceLeftOption 1
reduceRightOption 1
reverse 0
reverseMap 1
reverse_$colon$colon$colon 1
scan0 3
scanLeft 2
scanRight 2
slice 2
sortBy 2
sorted 1
span 1
splitAt 1
startsWith 2
tails 0
tailOption 0
take 1
takeRight 1
takeRightWhile 1
takeWhile 1
toEphemeralStream 0
toList 0
toNel 0
toMap 2
toStream 0
toString 0
toVector 0
toZipper 0
uncons 2
unzip 1
updated 2
zip 1
widen 1
zipWithIndex 0
<init> 0
<init> 2
<init> 0
apply 1
single 1
empty 0
fromList 1
fromFoldable 2
fromOption 1
fill 2
<init> 0
to 1
from 1
<init> 0
equal 1
<init> 0
<init> 0
findLeft 2
findRight 2
map 2
point 1
bind 2
plus 2
empty 0
zip 2
isEmpty 1
empty 1
cobind 2
cojoin 1
traverseImpl 3
unzip 1
alignWith 1
toIList 1
foldLeft 3
foldRight 3
foldMapRight1Opt 3
foldMap 3
foldMap1Opt 3
foldMapLeft1Opt 3
index 2
reverse 1
mapAccumL 3
mapAccumR 3
any 2
all 2
widen 2
tailrecM 2
order 1
monoid 0
show 1
$init$ 0
A 0
equal 2
$init$ 0
A 0
order 2
<init> 0
isEmpty 0
member 2
contains 2
notMember 2
lookupLT 2
lookupGT 2
lookupLE 2
lookupGE 2
isSubsetOf 2
isSubsetOfX 2
isProperSubsetOf 2
insert 2
delete 2
union 2
insertR 2
difference 2
$bslash$bslash 2
intersection 2
filter 1
partition 1
split 2
splitMember 2
splitRoot 0
elemAt 1
lookupIndex 2
deleteAt 1
map 2
foldRight 2
foldr 2
foldLeft 2
foldl 2
findMin 0
findMax 0
deleteMin 0
deleteMax 0
deleteFindMin 0
deleteFindMax 0
minView 0
maxView 0
elems 0
toList 0
toAscList 0
toDescList 0
glue 2
join 3
insertMax 1
insertMin 1
merge 1
trim 3
filterGt 2
filterLt 2
equals 1
hashCode 0
<init> 0
setEqual 1
setOrder 1
setShow 1
setMonoid 1
<init> 0
findLeft 2
findRight 2
foldMap 3
foldRight 3
foldLeft 3
index 2
toIList 1
toList 1
length 1
maximum 2
minimum 2
empty 1
any 2
all 2
<init> 0
empty 0
singleton 1
fromList 2
fromFoldable 3
unions 2
balanceL 3
balanceR 3
<init> 0
<init> 0
apply 0
<init> 3
$init$ 0
A 0
equal 2
$init$ 0
<init> 0
point 1
bind 2
cobind 2
cojoin 1
copoint 1
zip 2
unzip 1
alignWith 1
cozip 1
traverse1Impl 3
distributeImpl 3
foldRight 3
foldMapRight1 3
lift 1
join 1
traverse 3
sequence 2
ap 2
compose 1
pextract 1
getOrElse 2
isDefined 1
toOption 1
toMaybe 1
tailrecM 2
<init> 0
<init> 1
map 2
flatMap 2
flatMapF 2
foldRight 3
traverse 3
ap 2
<init> 0
idTFunctor 1
<init> 0
idTApply 1
<init> 0
idTApplicative 1
<init> 0
idTFoldable 1
idTBindRec 1
<init> 0
idTMonad 1
idTOrder 1
<init> 0
idTTraverse 1
idTEqual 1
<init> 0
$init$ 0
F 0
map 2
$init$ 0
F 0
ap 2
$init$ 0
F 0
point 1
$init$ 0
F 0
bind 2
$init$ 0
F 0
tailrecM 2
F 0
$init$ 0
F 0
foldRight 3
$init$ 0
F 0
traverseImpl 3
<init> 0
liftM 2
hoist 2
apply 1
<init> 0
elemTag 0
apply 1
length 0
isEmpty 0
toArray 1
copyToArray 3
slice 2
$plus$plus 2
<init> 0
immutableArrayEqual 1
<init> 0
foldLeft 3
foldMap 3
foldRight 3
zip 2
index 2
length 1
empty 1
all 2
any 2
<init> 0
make 1
fromArray 1
fromString 1
newBuilder 1
newStringArrayBuilder 0
canBuildFrom 1
canBuildFromChar 1
<init> 1
componentType 0
apply 1
length 0
toArray 1
copyToArray 3
slice 2
$plus$plus 2
<init> 1
<init> 1
elemTag 0
<init> 1
elemTag 0
<init> 1
elemTag 0
<init> 1
elemTag 0
<init> 1
elemTag 0
<init> 1
elemTag 0
<init> 1
elemTag 0
<init> 1
elemTag 0
<init> 1
elemTag 0
<init> 1
elemTag 0
apply 1
length 0
toArray 1
copyToArray 3
slice 2
$plus$plus 2
wrapArray 1
unwrapArray 1
<init> 1
apply 1
length 0
stringPrefix 0
arrayBuilder 0
newBuilder 0
<init> 0
<init> 1
arrayBuilder 0
<init> 1
elemTag 0
arrayBuilder 0
<init> 1
<init> 1
elemTag 0
<init> 1
elemTag 0
<init> 1
elemTag 0
<init> 1
elemTag 0
<init> 1
elemTag 0
<init> 1
elemTag 0
<init> 1
elemTag 0
<init> 1
elemTag 0
<init> 1
elemTag 0
<init> 1
asString 0
wrapRopeChar 1
<init> 1
run 1
apply 1
run_ 3
map 2
flatten 2
flatMap 2
contramap 3
imap 2
bimap 4
xmap 4
bmap 3
plus 2
<init> 0
apply 1
empty 1
$init$ 0
point 2
liftM 3
xhoist 3
contracohoist 1
shift 4
reset 4
callCC 2
<init> 0
IndexedContsTFunctorRight 1
<init> 0
ContsTBind 1
<init> 0
ContsTMonad 1
<init> 0
IndexedContsTFunctorLeft 1
IndexedContsTContravariant 2
IndexedContsTBifunctor 2
ContsTMonadPlus 2
$init$ 0
map 2
$init$ 0
map 2
$init$ 0
contramap 2
$init$ 0
bimap 3
leftFunctor 0
leftMap 2
rightFunctor 0
rightMap 2
$init$ 0
bind 2
join 1
$init$ 0
point 1
$init$ 0
empty 0
plus 2
<init> 0
apply 1
unapply 1
inj 1
prj 1
<init> 0
reflexiveInjectInstance 0
leftInjectInstance 0
rightInjectInstance 1
<init> 0
inject 2
match_ 3
apply 1
<init> 0
<init> 0
<init> 0
<init> 0
<init> 0
<init> 0
DisjunctionInjective 0
EitherInjective 0
EitherRightProjectionInjective 0
EitherLeftProjectionInjective 0
FractionalInjective 0
Function0Injective 0
Function1Injective 0
Function2Injective 0
Function3Injective 0
Function4Injective 0
IndexedSeqInjective 0
IntegralInjective 0
IterableInjective 0
IteratorInjective 0
ListInjective 0
OptionInjective 0
PartialFunctionInjective 0
PartialOrderingInjective 0
Product1Injective 0
Product2Injective 0
Product3Injective 0
Product4Injective 0
Product5Injective 0
SetInjective 0
Tuple2Injective 0
Tuple3Injective 0
Tuple4Injective 0
Tuple5Injective 0
ValidationInjective 0
StreamInjective 0
$init$ 0
xmap 3
xmapb 2
xmapi 2
$init$ 0
invariantIdentity 2
invariantComposite 6
invariantFunctorLaw 0
<init> 0
F 0
<init> 0
apply 1
$init$ 0
isEmpty 1
$init$ 0
emptyIsEmpty 0
emptyPlusIdentity 2
isEmptyLaw 0
<init> 0
F 0
<init> 0
apply 1
<init> 0
isoCommutative 1
isoNaturalCommutative 1
<init> 0
isoRefl 0
isoNaturalRefl 0
<init> 0
$init$ 0
to 0
from 0
flip 0
$percent$tilde 2
$init$ 0
to 0
from 0
flip 0
unlift 2
$percent$tilde 3
$init$ 0
to 0
from 0
flip 0
unlift 2
unlift1 2
unlift2 2
$percent$tilde 3
$init$ 0
<init> 0
apply 1
<init> 0
apply 1
to 1
from 1
$init$ 0
<init> 0
apply 1
<init> 0
apply 1
to 1
from 1
<init> 0
$init$ 0
G 0
iso 0
append 2
$init$ 0
G 0
zero 0
$init$ 0
G 0
iso 0
equal 2
$init$ 0
G 0
iso 0
show 1
$init$ 0
G 0
iso 0
order 2
$init$ 0
G 0
iso 0
succ 1
pred 1
$init$ 0
G 0
iso 0
map 2
$init$ 0
G 0
iso 0
contramap 2
$init$ 0
G 0
iso 0
xmap 3
$init$ 0
G 0
divide 3
$init$ 0
G 0
conquer 0
$init$ 0
G 0
ap 2
$init$ 0
G 0
alignWith 1
$init$ 0
G 0
point 1
ap 2
$init$ 0
G 0
bind 2
$init$ 0
G 0
tailrecM 2
G 0
$init$ 0
G 0
ask 0
local 2
$init$ 0
G 0
init 0
get 0
put 1
$init$ 0
G 0
writer 2
$init$ 0
G 0
raiseError 1
handleError 2
$init$ 0
G 0
chooseAny 2
$init$ 0
G 0
cobind 2
cojoin 1
$init$ 0
G 0
copoint 1
$init$ 0
G 0
pos 1
peek 2
$init$ 0
G 0
iso 0
plus 2
$init$ 0
G 0
empty 0
$init$ 0
G 0
isEmpty 1
G 0
G 0
$init$ 0
G 0
naturalTrans 0
foldMap 3
foldLeft 3
foldRight 3
$init$ 0
G 0
naturalTrans 0
traverseImpl 3
$init$ 0
G 0
foldMap1 3
foldMapLeft1 3
foldMapRight1 3
$init$ 0
G 0
traverse1Impl 3
$init$ 0
G 0
iso 0
pextract 1
$init$ 0
G 0
iso 0
attempt 1
fail 1
$init$ 0
G 0
iso 0
cozip 1
$init$ 0
G 0
iso 0
zip 2
$init$ 0
G 0
iso 0
unzip 1
$init$ 0
G 0
iso 0
reassociateLeft 1
reassociateRight 1
$init$ 0
G 0
iso 0
bimap 3
$init$ 0
G 0
iso 0
mapfst 2
mapsnd 2
$init$ 0
G 0
left 1
right 1
$init$ 0
G 0
first 1
second 1
$init$ 0
G 0
iso 0
compose 2
$init$ 0
G 0
id 0
$init$ 0
G 0
choice 2
$init$ 0
G 0
split 2
$init$ 0
G 0
arr 1
$init$ 0
biNaturalTrans 0
G 0
bifoldMap 4
bifoldRight 4
bifoldLeft 4
$init$ 0
biNaturalTrans 0
G 0
bitraverseImpl 4
$init$ 0
apply 1
map 1
toAdjoint 1
<init> 0
ranFunctor 0
toRan 3
fromRan 2
adjointToRan 2
ranToAdjoint 2
composedAdjointToRan 3
gran 1
$init$ 0
v 0
f 1
toLan 2
toAdjoint 2
map 1
<init> 0
lanApplicative 2
fromLan 2
glan 1
adjointToLan 2
lanToAdjoint 2
composedAdjointToLan 2
<init> 0
lanFunctor 0
<init> 0
lanApply 2
$init$ 0
map 2
$init$ 0
G 0
H 0
<init> 0
value 0
ap 2
<init> 1
dimap 3
$greater$eq$greater 2
andThen 2
$greater$eq$eq$greater 2
andThenK 2
$less$eq$less 2
compose 2
$less$eq$eq$less 2
composeK 2
traverse 3
$eq$less$less 2
map 2
mapT 1
mapK 1
flatMapK 2
flatMap 2
lift 1
transform 1
lower 1
unlift 2
unliftId 2
rwst 2
state 1
liftMK 2
local 1
endo 2
liftF 1
tap 1
<init> 0
kleisliFunctor 1
<init> 0
kleisliApply 1
<init> 0
kleisliDistributive 1
<init> 0
kleisliBind 1
<init> 0
kleisliZip 1
<init> 0
kleisliApplicative 1
kleisliPlus 1
<init> 0
kleisliBindRec 1
<init> 0
kleisliApplicativePlus 1
kleisliSemigroup 1
<init> 0
kleisliMonadError 1
<init> 0
kleisliMonadPlus 1
<init> 0
kleisliMonadReader 1
<init> 0
kleisliIdFunctor 0
<init> 0
kleisliIdApplicative 0
kleisliStrong 1
<init> 0
kleisliIdApply 0
kleisliProChoice 1
kleisliCompose 1
<init> 0
kleisliArrow 1
kleisliContravariant 0
kleisliIdMonadReader 0
kleisliMonoid 1
kleisliPlusEmpty 1
kleisliMonadTrans 0
kleisliCatchable 1
<init> 0
kleisli 1
kleisliU 2
kleisliFn 1
ask 1
local 2
$init$ 0
F 0
map 2
$init$ 0
F 0
ap 2
$init$ 0
F 0
distributeImpl 3
$init$ 0
F 0
bind 2
$init$ 0
F 0
point 1
$init$ 0
F 0
tailrecM 2
F 0
$init$ 0
F 0
ask 0
local 2
$init$ 0
hoist 2
liftM 2
apply 1
F 0
$init$ 0
F 0
handleError 2
raiseError 1
$init$ 0
contramap 2
$init$ 0
F 0
first 1
second 1
mapfst 2
mapsnd 2
$init$ 0
F 0
left 1
right 1
$init$ 0
F 0
compose 2
$init$ 0
F 0
second 1
id 0
arr 1
choice 2
split 2
$init$ 0
FB 0
append 2
$init$ 0
FB 0
zero 0
$init$ 0
F 0
plus 2
$init$ 0
F 0
empty 0
$init$ 0
F 0
attempt 1
fail 1
<init> 0
fold 2
$qmark 2
isLeft 0
isRight 0
swap 0
toEither 0
disjunction 0
getOrElse 1
exists 1
forall 1
orElse 1
toLazyOption 0
toOption 0
toMaybe 0
toList 0
toStream 0
map 1
bimap 2
leftMap 1
foreach 1
flatMap 1
traverse 2
foldRight 2
ap 1
left 0
<init> 1
<init> 1
<init> 0
condLazyEither 3
<init> 0
apply 1
lazyLeft 0
<init> 0
apply 1
lazyRight 0
<init> 1
getOrElse 1
exists 1
forall 1
orElse 1
toLazyOption 0
toOption 0
toList 0
toStream 0
map 1
foreach 1
flatMap 1
<init> 0
lazyEitherInstance 0
<init> 0
reassociateLeft 1
reassociateRight 1
<init> 0
bimap 3
bitraverseImpl 4
<init> 1
$qmark 3
isLeft 1
isRight 1
swap 1
getOrElse 2
$bar 2
exists 2
forall 2
orElse 2
$bar$bar$bar 2
toLazyOption 1
toOption 1
toMaybe 1
toList 1
toStream 1
map 2
flatMap 2
bimap 3
leftMap 2
bitraverse 4
traverse 3
foldRight 3
app 2
left 0
<init> 0
lazyEitherT 1
lazyEitherTU 4
lazyLeftT 2
lazyRightT 2
lazyEitherTLeftProjectionEIso2 0
lazyEitherTLeftProjectionIso2 0
<init> 1
getOrElse 2
exists 2
forall 2
orElse 2
toLazyOption 1
toOption 1
toList 1
toStream 1
map 2
flatMap 2
lazyEitherTMonadPlus 2
<init> 0
lazyEitherTFunctor 1
lazyEitherTLeftProjectionFunctor 1
lazyEitherTMonadError 1
lazyEitherTPlus 2
lazyEitherTBindRec 2
<init> 0
lazyEitherTBifunctor 1
lazyEitherTBifoldable 1
lazyEitherTLeftProjectionBifunctor 1
lazyEitherTMonad 1
lazyEitherTLeftProjectionMonad 1
lazyEitherTFoldable 1
lazyEitherTLeftProjectionFoldable 1
<init> 0
lazyEitherTBitraverse 1
lazyEitherTLeftProjectionBitraverse 1
lazyEitherTTraverse 1
lazyEitherTLeftProjectionTraverse 1
lazyEitherTHoist 0
$init$ 0
F 0
map 2
$init$ 0
F 0
point 1
bind 2
$init$ 0
F 0
E 0
plus 2
$init$ 0
E 0
empty 0
$init$ 0
F 0
foldRight 3
$init$ 0
F 0
traverseImpl 3
$init$ 0
F 0
bimap 3
$init$ 0
F 0
bifoldMap 4
$init$ 0
F 0
bitraverseImpl 4
$init$ 0
B 0
tailrecM 2
$init$ 0
raiseError 1
handleError 2
<init> 0
fold 2
$qmark 2
isDefined 0
isEmpty 0
getOrElse 1
$bar 1
exists 1
forall 1
toOption 0
toLazyRight 1
toLazyLeft 1
toRight 1
toLeft 1
toList 0
orElse 1
map 1
foreach 1
filter 1
flatMap 1
ap 1
traverse 2
foldRight 2
zip 1
unzip 1
<init> 1
<init> 0
<init> 0
<init> 0
cobind 2
cojoin 1
traverseImpl 3
foldRight 3
ap 2
plus 2
bind 2
point 1
empty 0
cozip 1
zip 2
unzip 1
alignWith 1
pextract 1
isDefined 1
tailrecM 2
lazyOptionEqual 1
lazyOptionMonoid 1
lazyOptionShow 1
<init> 0
lazySome 1
lazyNone 0
fromOption 1
condLazyOption 2
<init> 1
$qmark 3
isDefined 1
isEmpty 1
getOrElse 2
$bar 2
orZero 2
unary_$tilde 2
exists 2
forall 2
toOption 1
toLazyRight 2
toLazyLeft 2
toRight 2
toLeft 2
orElse 2
map 2
filter 2
flatMap 2
mapLazyOption 2
<init> 0
lazyOptionTFunctor 1
<init> 0
lazyOptionEqual 1
lazyOptionTMonadPlus 1
<init> 0
<init> 0
lazyOptionTBindRec 2
lazyOptionOrder 1
<init> 0
lazyOptionT 1
lazySomeT 2
lazyNoneT 1
$init$ 0
F 0
map 2
$init$ 0
F 0
ap 2
point 1
bind 2
plus 2
empty 0
$init$ 0
B 0
tailrecM 2
$init$ 0
liftM 2
hoist 2
apply 1
<init> 0
_1 0
_2 0
<init> 0
_1 0
_2 0
_3 0
<init> 0
_1 0
_2 0
_3 0
_4 0
<init> 0
apply 2
<init> 0
apply 3
<init> 0
apply 4
<init> 0
lazyTuple2 2
lazyTuple3 3
lazyTuple4 4
<init> 0
<init> 0
bimap 3
bitraverseImpl 4
lazyTuple2Semigroup 2
lazyTuple2Functor 0
<init> 0
reassociateLeft 1
reassociateRight 1
<init> 0
lazyTuple2Show 2
lazyTuple2Order 2
lazyTuple2Monoid 2
lazyTuple2Monad 1
<init> 0
lazyTuple3Semigroup 3
lazyTuple3Functor 0
lazyTuple3Equal 3
<init> 0
lazyTuple3Show 3
lazyTuple3Order 3
lazyTuple3Monoid 3
lazyTuple3Monad 2
<init> 0
lazyTuple4Semigroup 4
lazyTuple4Functor 0
lazyTuple4Equal 4
<init> 0
lazyTuple4Show 4
lazyTuple4Order 4
lazyTuple4Monoid 4
lazyTuple4Monad 3
$init$ 0
map 2
$init$ 0
map 2
$init$ 0
map 2
$init$ 0
_1 0
_2 0
append 2
$init$ 0
_1 0
_2 0
_3 0
append 2
$init$ 0
_1 0
_2 0
_3 0
_4 0
append 2
$init$ 0
_1 0
_2 0
equal 2
$init$ 0
_1 0
_2 0
_3 0
equal 2
$init$ 0
_1 0
_2 0
_3 0
_4 0
equal 2
$init$ 0
_1 0
_2 0
show 1
$init$ 0
_1 0
_2 0
_3 0
show 1
$init$ 0
_1 0
_2 0
_3 0
_4 0
show 1
$init$ 0
_1 0
_2 0
order 2
$init$ 0
_1 0
_2 0
_3 0
order 2
$init$ 0
_1 0
_2 0
_3 0
_4 0
order 2
$init$ 0
_1 0
_2 0
zero 0
$init$ 0
_1 0
_2 0
_3 0
zero 0
$init$ 0
_1 0
_2 0
_3 0
_4 0
zero 0
$init$ 0
_1 0
bind 2
point 1
$init$ 0
_1 0
_2 0
bind 2
point 1
$init$ 0
_1 0
_2 0
_3 0
bind 2
point 1
<init> 0
apply 1
subst 1
compose 1
andThen 1
onF 1
onCov 2
onContra 2
<init> 0
<init> 0
id 0
compose 2
<init> 0
refl 0
witness 1
subst 2
trans 2
symm 1
lift 1
lift2 2
lift3 3
force 0
lower 1
lower2 1
<init> 0
run 1
apply 1
xmapA 2
xmapbA 1
xmapB 2
xmapbB 1
get 1
set 2
setf 3
st 0
mod 2
$eq$greater$eq 1
modf 3
$eq$greater$greater$eq 2
modp 2
mods 1
$percent$eq 1
modo 1
$less$percent$eq 1
assign 1
$colon$eq 1
assigno 1
$less$colon$eq 1
mods_ 1
$percent$eq$eq 1
lifts 1
$percent$percent$eq 1
map 1
$greater$minus 1
flatMap 1
$greater$greater$minus 1
$minus$greater$greater$minus 1
liftsNT 0
compose 1
$less$eq$less 1
andThen 1
$greater$eq$greater 1
sum 1
$bar$bar$bar 1
product 1
$times$times$times 1
$init$ 0
identity 2
retention 3
doubleSet 4
lensLaw 0
partial 0
unary_$tilde 0
<init> 0
apply 1
$init$ 0
lensFamily 1
lensFamilyg 2
lensFamilyu 2
lensFamilyId 0
codiagLensFamily 0
firstLensFamily 0
secondLensFamily 0
lazyFirstLensFamily 0
lazySecondLensFamily 0
predicateLensFamily 0
factorLensFamily 0
distributeLensFamily 0
$init$ 0
lens 1
lensg 2
lensu 2
lensId 0
trivialLens 0
codiagLens 0
firstLens 0
secondLens 0
lazyFirstLens 0
lazySecondLens 0
nelHeadLens 0
nelTailLens 0
mapVLens 1
mapWithDefaultLens 1
setMembershipLens 1
applyLens 2
predicateLens 0
factorLens 0
distributeLens 0
<init> 0
seqLikeLensFamily 1
<init> 0
<init> 0
LensFamilyState 1
LensFamilyUnzip 0
<init> 1
contains 1
$amp$eq 1
$amp$tilde$eq 1
$bar$eq 1
$plus$eq 1
$plus$eq 3
$plus$plus$eq 1
$minus$eq 1
$minus$eq 3
$minus$minus$eq 1
setLensFamily 1
<init> 1
member 1
at 1
$plus$eq 3
$plus$eq 1
$plus$plus$eq 1
update 2
$minus$eq 1
$minus$eq 3
$minus$minus$eq 1
mapLensFamily 1
<init> 1
sortWith 1
sortBy 2
sort 1
seqLensFamily 1
<init> 1
enqueue 1
dequeue 0
length 0
queueLensFamily 1
<init> 1
at 1
length 0
arrayLensFamily 1
<init> 2
$plus$eq 1
$minus$eq 1
$times$eq 1
numericLensFamily 2
<init> 2
$div$eq 1
fractionalLensFamily 2
<init> 2
$percent$eq 1
integralLensFamily 2
tuple2LensFamily 1
tuple3LensFamily 1
tuple4LensFamily 1
tuple5LensFamily 1
tuple6LensFamily 1
tuple7LensFamily 1
$init$ 0
compose 2
id 0
choice 2
split 2
<init> 0
apply 1
subst 1
$times 1
andThen 1
compose 1
onF 1
<init> 0
<init> 0
id 0
compose 2
<init> 0
isa 0
witness 1
refl 0
trans 2
co 1
co2 1
co2_2 1
co3 1
co4 1
lift2 2
lift3 3
lift4 4
contra 1
contra1_2 1
contra2_2 1
contra1_3 1
contra2_3 1
contra3_3 1
contra1_4 1
contra2_4 1
contra3_4 1
contra4_4 1
liftF1 2
liftF2 3
liftF3 4
liftF4 5
force 0
unco 2
unco2_1 2
unco2_2 2
uncontra 2
uncontra2_1 2
uncontra2_2 2
<init> 1
uncons 1
$colon$colon 2
collect 2
isEmpty 1
headOption 1
find 2
headMaybe 1
tailM 1
filter 2
drop 2
dropWhile 2
take 2
takeWhile 2
$plus$plus 2
flatMap 2
flatMapF 2
map 2
mapT 1
tail 1
foldLeft 3
toList 0
foldRight 3
length 1
<init> 0
listTFunctor 1
listTSemigroup 1
<init> 0
listTMonoid 1
<init> 0
listTMonadPlus 1
listTEqual 1
listTShow 1
<init> 0
<init> 0
listT 0
empty 1
fromList 1
$init$ 0
F 0
map 2
$init$ 0
F 0
append 2
$init$ 0
F 0
zero 0
$init$ 0
F 0
bind 2
point 1
empty 0
plus 2
$init$ 0
apply 1
liftM 2
hoist 2
<init> 0
isEmpty 0
$plus 2
insert 3
insertWith 4
insertWithKey 4
$minus 2
delete 2
adjust 3
adjustWithKey 3
update 3
updateWithKey 3
updateLookupWithKey 3
alter 3
lookup 2
lookupAssoc 2
values 0
keys 0
keySet 0
toList 0
toAscList 0
toDescList 0
member 2
notMember 2
lookupIndex 2
elemAt 1
updateAt 2
deleteAt 1
findMin 0
findMax 0
deleteMin 0
deleteMax 0
updateMin 1
updateMinWithKey 1
updateMax 1
updateMaxWithKey 1
updateAppend 4
minViewWithKey 0
maxViewWithKey 0
minView 0
maxView 0
merge 1
glue 2
deleteFindMax 1
deleteFindMin 1
map 1
mapWithKey 1
mapAccum 2
mapAccumWithKey 2
mapAccumL 2
mapKeys 2
mapKeysWith 3
fold 2
foldlWithKey 2
foldrWithKey 2
union 2
unionWith 3
unionWithKey 3
hedgeUnionL 4
$bslash$bslash 2
difference 2
differenceWith 3
differenceWithKey 3
intersection 2
intersectionWith 3
intersectionWithKey 3
isSubmapOf 3
isSubmapOfBy 3
submap 3
filter 2
filterWithKey 2
partition 2
partitionWithKey 2
mapOption 2
mapOptionWithKey 2
mapEither 2
mapEitherWithKey 2
split 2
splitLookup 2
splitLookupWithKey 2
trim 2
trimLookupLo 3
equals 1
hashCode 0
filterGt 2
filterLt 2
join 4
insertMax 2
insertMin 2
<init> 0
scalazMapInstance 1
<init> 0
mapShow 2
mapEqual 2
mapOrder 2
mapUnion 2
mapIntersection 2
mapCovariant 0
<init> 0
bifoldMap 4
bifoldRight 4
bifoldLeft 4
$init$ 0
A 0
B 0
equal 2
<init> 0
<init> 0
unapply 1
apply 0
<init> 4
apply 2
empty 0
singleton 2
fromList 2
fromListWith 3
fromListWithKey 3
fromFoldable 3
fromFoldableWith 4
fromFoldableWithKey 4
unions 2
unionsWith 3
balance 4
rotateL 4
singleL 4
doubleL 4
rotateR 4
singleR 4
doubleR 4
<init> 0
cata 2
getOrElse 1
$bar 1
toFailure 1
toSuccess 1
toLeft 1
$less$bslash$div 1
toRight 1
$bslash$div$greater 1
isJust 0
isEmpty 0
map 1
flatMap 1
toOption 0
orElse 1
getOrElseF 2
first 0
last 0
min 0
max 0
cojoin 0
cobind 1
zip 1
zipWith 2
filter 1
filterNot 1
forall 1
exists 1
orZero 1
unary_$tilde 1
orEmpty 2
<init> 0
<init> 0
<init> 1
<init> 0
to 1
from 1
fromNullable 1
empty 0
just 1
fromOption 1
fromTryCatchThrowable 3
fromTryCatchNonFatal 1
<init> 0
maybeEqual 1
maybeOrder 1
maybeShow 1
maybeMonoid 1
maybeFirstMonoid 0
maybeFirstShow 1
maybeFirstOrder 1
maybeFirstMonad 0
maybeLastMonoid 0
maybeLastShow 1
maybeLastOrder 1
maybeLastMonad 0
maybeMin 1
maybeMinShow 1
maybeMinOrder 1
maybeMinMonad 0
maybeMax 1
maybeMaxShow 1
maybeMaxOrder 1
maybeMaxMonad 0
<init> 0
point 1
ap 2
bind 2
tailrecM 2
map 2
traverseImpl 3
empty 0
plus 2
foldRight 3
cozip 1
zip 2
unzip 1
alignWith 1
cobind 2
cojoin 1
pextract 1
isDefined 1
toOption 1
toMaybe 1
filter 2
$init$ 0
A 0
equal 2
<init> 1
map 2
mapT 1
flatMap 2
flatMapF 2
foldRight 3
traverse 3
ap 2
app 2
isJust 1
isDefined 1
isEmpty 1
filter 2
cata 3
getOrElse 2
$bar 2
getOrElseF 2
orZero 2
unary_$tilde 2
exists 2
forall 2
orElse 2
$bar$bar$bar 2
toRight 2
toLeft 2
mapO 2
<init> 0
maybeTFunctor 1
<init> 0
maybeTMonadError 1
<init> 0
maybeTFoldable 1
maybeTBindRec 2
<init> 0
maybeTMonadPlus 1
<init> 0
<init> 0
maybeTTraverse 1
maybeTEqual 1
<init> 0
maybeT 0
just 2
empty 1
monadTell 1
monadListen 1
$init$ 0
F 0
map 2
$init$ 0
F 0
ap 2
point 1
bind 2
$init$ 0
B 0
tailrecM 2
$init$ 0
F 0
foldRight 3
$init$ 0
F 0
traverseImpl 3
$init$ 0
liftM 2
hoist 2
apply 1
$init$ 0
F 0
empty 0
plus 2
$init$ 0
F 0
raiseError 1
handleError 2
$init$ 0
MT 0
F 0
writer 2
$init$ 0
MT 0
listen 1
<init> 0
apply 1
<init> 0
<init> 0
memo 1
nilMemo 0
<init> 2
apply 1
<init> 2
apply 1
arrayMemo 2
doubleArrayMemo 2
mutableMapMemo 1
mutableHashMapMemo 0
weakHashMapMemo 0
immutableMapMemo 1
immutableHashMapMemo 0
immutableListMapMemo 0
immutableTreeMapMemo 1
$init$ 0
map 2
whileM 3
whileM_ 2
untilM 3
untilM_ 2
iterateWhile 2
iterateUntil 2
product 1
$init$ 0
rightIdentity 2
leftIdentity 3
monadLaw 0
<init> 0
F 0
<init> 0
apply 1
monadMTMAB 2
$init$ 0
raiseError 1
handleError 2
$init$ 0
raisedErrorsHandled 3
errorsRaised 3
errorsStopComputation 3
monadErrorLaw 0
<init> 0
F 0
<init> 0
apply 1
$init$ 0
listen 1
pass 1
<init> 0
F 0
<init> 0
apply 1
$init$ 0
filter 2
unite 2
separate 2
uniteU 2
product 1
$init$ 0
emptyMap 2
leftZero 2
$init$ 0
rightZero 2
monadPlusLaw 0
strongMonadPlusLaw 0
<init> 0
F 0
<init> 0
apply 1
$init$ 0
ask 0
local 2
scope 2
asks 1
<init> 0
apply 1
$init$ 0
state 1
constantState 2
init 0
get 0
gets 1
put 1
modify 1
<init> 0
apply 1
$init$ 0
writer 2
tell 1
<init> 0
F 0
<init> 0
apply 1
$init$ 0
liftM 2
liftMU 2
apply 1
<init> 0
apply 1
hoist 2
<init> 0
apply 1
$init$ 0
apply 1
promote 1
compose 1
transform 1
<init> 0
transitive 2
<init> 0
id 1
transformer 2
<init> 0
$init$ 0
zero 0
multiply 2
isMZero 2
ifEmpty 4
onNotEmpty 4
onEmpty 4
category 0
applicative 0
$init$ 0
leftIdentity 2
rightIdentity 2
monoidLaw 0
<init> 0
F 0
<init> 0
apply 1
instance 2
$init$ 0
F 0
M 0
liftMonoid 2
liftPlusEmpty 1
<init> 0
xmap 3
<init> 1
$bar$plus$bar 3
appendLeft 3
appendRight 3
prependLeft 3
prependRight 3
left 1
right 1
both 2
fold 3
untangle 4
untangleLeft 3
untangleRight 3
<init> 0
inL 1
inR 1
empty 0
monoidCoproductEqual 2
instance 2
<init> 0
value 0
<init> 0
<init> 1
<init> 0
apply 1
unapply 1
<init> 0
foldMap1 3
foldLeft 3
foldRight 3
alignWith 1
cozip 1
foldMapRight1 3
traverse1Impl 3
unzip 1
zip 2
point 1
map 2
ap 2
bind 2
cobind 2
cojoin 1
copoint 1
distributeImpl 3
tailrecM 2
nameEqual 1
<init> 0
apply 1
unapply 1
<init> 0
foldMap1 3
foldLeft 3
foldRight 3
alignWith 1
cozip 1
foldMapRight1 3
traverse1Impl 3
unzip 1
zip 2
point 1
map 2
ap 2
bind 2
cobind 2
cojoin 1
copoint 1
distributeImpl 3
tailrecM 2
needEqual 1
<init> 0
<init> 0
foldMap1 3
foldLeft 3
foldRight 3
alignWith 1
cozip 1
foldMapRight1 3
traverse1Impl 3
unzip 1
zip 2
point 1
bind 2
cobind 2
cojoin 1
copoint 1
distributeImpl 3
tailrecM 2
valueEqual 1
$init$ 0
apply 1
compose 1
andThen 1
$init$ 0
id 0
refl 0
natToFunction 1
<init> 0
$init$ 0
apply 1
compose 1
apply 2
apply 3
apply 1
<init> 2
$less$colon$colon 1
$less$colon$colon$colon 1
$colon$colon$colon$greater 1
append 1
map 1
foreach 1
flatMap 1
distinct 1
traverse1 2
list 0
stream 0
toZipper 0
zipperEnd 0
init 0
inits 0
last 0
tails 0
reverse 0
sortBy 2
sortWith 1
sorted 1
size 0
zip 1
unzip 1
zipWithIndex 0
toString 0
equals 1
hashCode 0
<init> 0
apply 2
unapply 1
nel 2
nels 2
lift 1
<init> 0
nonEmptyListEqual 1
<init> 0
<init> 0
findLeft 2
traverse1Impl 3
foldMapRight1 3
foldMapLeft1 3
foldMap1 3
foldLeft 3
bind 2
point 1
plus 2
copoint 1
cobind 2
cojoin 1
zip 2
unzip 1
alignWith 1
length 1
toNel 1
toIList 1
all 2
any 2
tailrecM 2
nonEmptyListSemigroup 0
nonEmptyListShow 1
nonEmptyListOrder 1
$init$ 0
choose 2
chooseAny 1
chooseAny 2
mapBoth 3
nmap2 3
nmap3 4
nmap4 5
nmap5 6
nmap6 7
both 2
gatherUnordered 1
gatherUnordered1 1
reduceUnordered 2
gather 1
gather1 1
aggregate 2
aggregate1 2
aggregateCommutative 2
aggregateCommutative1 2
parallel 0
<init> 0
F 0
<init> 0
apply 1
<init> 0
isNotNothing 0
isNothingAmb1 0
isNothingAmb2 0
<init> 1
apply 1
dimap 2
map 1
contramap 1
flatMap 1
ap 1
zip 1
$times$times$times 1
$plus$plus$plus 1
left 0
right 0
compose 1
andThen 1
$bar$plus$bar 2
cokleisli 0
on 2
lower 0
never 0
zero 1
pair 0
<init> 0
apply 1
always 1
zero 1
pair 2
cokleisli 1
<init> 0
nullArgumentSemigroup 1
<init> 0
mapfst 2
mapsnd 2
dimap 3
<init> 0
nullArgumentMonoid 1
<init> 0
compose 2
split 2
mapfst 2
mapsnd 2
nullArgumentMonad 0
nullArgumentContravariant 0
$init$ 0
append 2
$init$ 0
zero 0
<init> 1
apply 1
dimap 2
map 1
contramap 1
flatMap 1
ap 1
zip 1
$times$times$times 1
$plus$plus$plus 1
first 0
second 0
left 0
right 0
$bar 1
compose 1
andThen 1
$bar$plus$bar 2
$eq$greater$greater 1
isDefinedAt 1
isEmptyAt 1
or 2
carry 0
cancel 0
kleisli 0
state 0
traverse 2
on 2
<init> 0
apply 1
kleisli 1
lift 1
always 1
never 0
zero 1
<init> 0
head 0
tail 0
<init> 0
nullResultSemigroup 1
<init> 0
mapfst 2
mapsnd 2
dimap 3
<init> 0
nullResultMonoid 1
<init> 0
id 0
compose 2
split 2
mapfst 2
mapsnd 2
arr 1
first 1
left 1
right 1
choice 2
nullResultMonadPlus 0
nullResultContravariant 0
$init$ 0
append 2
$init$ 0
zero 0
<init> 2
$init$ 0
F 0
map 2
$init$ 0
F 0
G 0
ap 2
$init$ 0
F 0
alignWith 1
$init$ 0
F 0
point 1
$init$ 0
F 0
G 0
bind 2
$init$ 0
F 0
G 0
plus 2
$init$ 0
F 0
G 0
$init$ 0
F 0
findLeft 2
findRight 2
foldMap1 3
foldMapRight1 3
foldMapLeft1 3
foldMap 3
foldRight 3
foldLeft 3
traverseS_ 2
length 1
index 2
toVector 1
toList 1
toIList 1
toSet 1
toStream 1
toEphemeralStream 1
all 2
any 2
$init$ 0
F 0
foldMap1 3
foldMapRight1 3
$init$ 0
F 0
traverse1Impl 3
traverseImpl 3
traverseS 2
$init$ 0
F 0
traverse1Impl 3
<init> 0
oneAndFunctor 1
<init> 0
oneAndApply 2
oneAndAlign 1
<init> 0
oneAndApplicative 1
<init> 0
oneAndBind 2
<init> 0
oneAndMonad 1
oneAndFoldable 1
$init$ 0
OA 0
OFA 0
equal 2
equalIsNatural 0
<init> 0
oneAndFoldable1 1
oneAndEqual 2
oneAndTraverse 1
<init> 0
oneAndPlus 2
oneAndTraverse1 1
oneAndShow 2
oneAndOrder 2
oneAndSemigroup 2
oneAndZip 1
oneAndUnzip 1
<init> 0
oneAnd 2
<init> 0
to 1
from 1
<init> 1
map 2
ap 2
cojoin 1
cobind 2
copoint 1
foldMap 3
foldRight 3
foldLeft 3
foldMap1 3
foldMapRight1 3
foldMapLeft1 3
traverse 3
traverse1 3
$init$ 0
F 0
map 2
$init$ 0
F 0
cobind 2
$init$ 0
F 0
copoint 1
$init$ 0
F 0
ap 2
point 1
$init$ 0
F 0
findLeft 2
findRight 2
foldMap 3
foldRight 3
foldLeft 3
$init$ 0
F 0
foldMap1 3
foldMapRight1 3
foldMapLeft1 3
$init$ 0
F 0
traverseImpl 3
$init$ 0
F 0
traverse1Impl 3
$init$ 0
OA 0
OFA 0
equal 2
equalIsNatural 0
$init$ 0
OA 0
OFA 0
order 2
$init$ 0
OA 0
OFA 0
show 1
<init> 0
<init> 0
OneOrFunctor 1
OneOrEqual 2
OneOrShow 2
<init> 0
OneOrCobind 1
OneOrOrder 2
<init> 0
OneOrComonad 1
<init> 0
OneOrApplicative 1
<init> 0
OneOrFoldable 1
<init> 0
OneOrFoldable1 1
<init> 0
OneOrTraverse 1
<init> 0
OneOrTraverse1 1
<init> 1
map 2
mapT 1
flatMap 2
flatMapF 2
foldRight 3
traverse 3
ap 2
app 2
isDefined 1
isEmpty 1
filter 2
fold 3
getOrElse 2
$bar 2
getOrElseF 2
orZero 2
unary_$tilde 2
exists 2
forall 2
orElse 2
$bar$bar$bar 2
toRight 2
toListT 1
toLeft 2
mapO 2
<init> 0
optionTFunctor 1
<init> 0
optionTBindRec 2
<init> 0
optionTFoldable 1
optionTMonadError 1
<init> 0
optionTMonadPlus 1
<init> 0
<init> 0
optionTTraverse 1
optionTEqual 1
optionTShow 1
<init> 0
optionT 0
some 2
none 1
monadTell 1
monadListen 1
$init$ 0
F 0
map 2
$init$ 0
F 0
ap 2
$init$ 0
F 0
bind 2
$init$ 0
F 0
B 0
tailrecM 2
$init$ 0
F 0
point 1
$init$ 0
F 0
raiseError 1
handleError 2
$init$ 0
F 0
foldRight 3
$init$ 0
F 0
traverseImpl 3
$init$ 0
liftM 2
hoist 2
apply 1
$init$ 0
F 0
empty 0
plus 2
$init$ 0
MT 0
F 0
writer 2
$init$ 0
MT 0
listen 1
$init$ 0
pextract 1
getOrElse 2
isDefined 1
nonEmpty 1
isEmpty 1
orElse 2
$qmark 3
toOption 1
toMaybe 1
<init> 0
F 0
<init> 0
apply 1
$init$ 0
apply 2
order 2
equal 2
lessThan 2
lessThanOrEqual 2
greaterThan 2
greaterThanOrEqual 2
max 2
min 2
sort 2
contramap 1
toScalaOrdering 0
reverseOrder 0
$init$ 0
antisymmetric 2
transitiveOrder 3
orderAndEqualConsistent 2
orderLaw 0
<init> 0
F 0
<init> 0
apply 1
<init> 0
contramap 2
conquer 0
divide 3
fromScalaOrdering 1
orderBy 2
order 1
orderMonoid 0
<init> 2
complement 0
<init> 0
<init> 0
complement 0
<init> 0
complement 0
<init> 0
complement 0
fromLessThan 3
fromInt 1
<init> 0
<init> 0
order 2
shows 1
append 2
zero 0
succ 1
pred 1
succn 2
predn 2
min 0
max 0
<init> 0
run 1
apply 1
kleisli 0
xmapA 2
xmapbA 1
xmapB 2
xmapbB 1
get 1
getK 0
getOr 2
getOrZ 2
set 2
setK 1
setOr 3
setOrZ 3
trySet 1
trySetK 0
trySetOr 2
trySetOrZ 2
as 2
is 1
isNot 1
exists 2
forall 2
modg 2
$eq$qmark$greater$eq 1
mod 2
$eq$greater$eq 1
st 0
$percent$eq 1
$colon$eq 1
$percent$eq$eq 1
$percent$percent$eq 1
$greater$minus 1
$greater$greater$minus 1
$minus$greater$greater$minus 1
compose 1
$less$eq$less 1
andThen 1
$greater$eq$greater 1
sum 1
$bar$bar$bar 1
product 1
$times$times$times 1
<init> 0
apply 1
$init$ 0
plensFamily 1
plensFamilyf 1
plensFamilyg 2
plensFamilyId 0
codiagPLensFamily 0
nilFamily 0
somePLensFamily 0
leftPLensFamily 0
rightPLensFamily 0
tuple2PLensFamily 1
tuple3PLensFamily 1
tuple4PLensFamily 1
tuple5PLensFamily 1
tuple6PLensFamily 1
tuple7PLensFamily 1
eitherLensFamily 1
lazySomePLensFamily 0
lazyLeftPLensFamily 0
lazyRightPLensFamily 0
factorPLensFamily 0
distributePLensFamily 0
$init$ 0
plens 1
plensf 1
plensg 2
plensgf 2
plensId 0
trivialPLens 0
codiagPLens 0
nil 0
somePLens 0
leftPLens 0
rightPLens 0
tuple2PLens 1
tuple3PLens 1
tuple4PLens 1
tuple5PLens 1
tuple6PLens 1
tuple7PLens 1
eitherLens 1
lazySomePLens 0
lazyLeftPLens 0
lazyRightPLens 0
listHeadPLens 0
listTailPLens 0
listNthPLens 1
listLookupByPLens 1
listLookupPLens 2
vectorHeadPLens 0
vectorNthPLens 1
vectorLastPLens 0
streamHeadPLens 0
streamTailPLens 0
streamNthPLens 1
streamLookupByPLens 1
streamLookupPLens 2
ephemeralStreamHeadPLens 0
ephemeralStreamTailPLens 0
ephemeralStreamNthPLens 1
ephemeralStreamLookupByPLens 1
ephemeralStreamLookupPLens 2
mapVPLens 1
factorPLens 0
distributePLens 0
<init> 0
<init> 0
PLensFamilyState 1
PLensFamilyUnzip 0
<init> 3
$plus$eq 1
$minus$eq 1
$times$eq 1
numericPLens 2
<init> 2
$div$eq 1
fractionalPLens 2
<init> 2
$percent$eq 1
integralPLens 2
$init$ 0
compose 2
id 0
choice 2
split 2
$init$ 0
compose 0
product 1
plus 2
semigroup 0
$init$ 0
associative 4
plusLaw 0
<init> 0
F 0
<init> 0
apply 1
$init$ 0
empty 0
compose 0
product 1
monoid 0
$init$ 0
rightPlusIdentity 2
leftPlusIdentity 2
plusEmptyLaw 0
<init> 0
F 0
<init> 0
apply 1
liftPlusEmpty 2
$init$ 0
left 1
right 1
<init> 0
F 0
<init> 0
apply 1
$init$ 0
F 0
G 0
map 2
$init$ 0
F 0
G 0
ap 2
$init$ 0
F 0
G 0
point 1
$init$ 0
F 0
G 0
bind 2
$init$ 0
F 0
G 0
tailrecM 2
F 0
G 0
$init$ 0
F 0
G 0
plus 2
$init$ 0
F 0
G 0
empty 0
F 0
G 0
F 0
G 0
$init$ 0
F 0
G 0
foldRight 3
foldMap 3
foldLeft 3
$init$ 0
F 0
foldMapRight1 3
foldMap1 3
foldMapLeft1 3
$init$ 0
G 0
foldMapRight1 3
foldMap1 3
foldMapLeft1 3
$init$ 0
F 0
G 0
foldMapRight1 3
foldMap1 3
foldMapLeft1 3
$init$ 0
F 0
G 0
traverseImpl 3
$init$ 0
F 0
traverse1Impl 3
traverseImpl 3
$init$ 0
G 0
traverse1Impl 3
traverseImpl 3
$init$ 0
F 0
G 0
traverse1Impl 3
traverseImpl 3
$init$ 0
F 0
G 0
distributeImpl 3
$init$ 0
F 0
G 0
alignWith 1
$init$ 0
F 0
G 0
zip 2
$init$ 0
F 0
G 0
unzip 1
$init$ 0
F 0
G 0
bimap 3
$init$ 0
F 0
G 0
bifoldMap 4
bifoldRight 4
bifoldLeft 4
$init$ 0
F 0
G 0
bitraverseImpl 4
$init$ 0
mapfst 2
mapsnd 2
dimap 3
$init$ 0
map 2
invariantFunctor 0
covariantInstance 0
contravariantInstance 0
<init> 0
F 0
<init> 0
apply 1
upStarProfunctor 1
downStarProfunctor 1
upStarFunctor 1
downStarFunctor 0
<init> 0
getF 0
run 3
state 2
mapT 2
runZero 3
eval 3
evalZero 3
exec 3
execZero 3
map 2
flatMap 3
<init> 0
apply 1
create 1
<init> 0
irwstFunctor 1
<init> 0
rwstBind 2
<init> 0
irwstPlus 1
rwstBindRec 3
<init> 0
irwstPlusEmpty 1
rwstMonad 2
<init> 0
rwstMonadPlus 2
rwstHoist 1
$init$ 0
F 0
plus 2
$init$ 0
F 0
empty 0
$init$ 0
F 0
map 2
$init$ 0
F 0
W 0
bind 2
$init$ 0
F 0
A 0
tailrecM 2
<init> 0
F 0
$init$ 0
F 0
W 0
point 1
ask 0
local 2
scope 2
asks 1
init 0
get 0
put 1
modify 1
gets 1
writer 2
tell 1
listen 1
$init$ 0
W 0
hoist 2
liftM 2
apply 1
<init> 0
monoid 0
unit 1
snoc 2
cons 2
zero 0
append 2
compose 1
<init> 0
monoid 0
unit 1
snoc 2
cons 2
<init> 0
apply 2
<init> 0
apply 4
<init> 0
ListReducer 0
StreamReducer 0
UnitReducer 0
VectorReducer 0
EndoReducer 0
DualReducer 1
FirstReducer 0
FirstOptionReducer 0
LastReducer 0
LastOptionReducer 0
reducer 4
foldReduce 3
unitReducer 2
unitConsReducer 3
identityReducer 1
<init> 1
rep 1
unrep 1
$init$ 0
repUnrep 2
unrepRep 3
representableLaw 0
<init> 0
readerRepresentable 0
curryRepresentable 0
<init> 0
rep 1
unrep 1
<init> 0
<init> 1
corep 1
uncorep 1
$init$ 0
corepUncorep 2
uncorepCorep 3
corepresentableLaw 0
<init> 0
$init$ 0
append 2
multiply1 2
$init$ 0
compose 2
compose 0
$init$ 0
map 2
ap 2
apply 0
$init$ 0
associative 4
semigroupLaw 0
<init> 0
F 0
<init> 0
apply 1
instance 1
firstSemigroup 0
firstTaggedSemigroup 0
lastSemigroup 0
lastTaggedSemigroup 0
minSemigroup 1
minTaggedSemigroup 1
maxSemigroup 1
maxTaggedSemigroup 1
$init$ 0
F 0
M 0
append 2
liftSemigroup 2
repeat 3
iterate 4
<init> 0
xmap 3
$init$ 0
show 1
shows 1
<init> 0
F 0
<init> 0
apply 1
showFromToString 0
showA 0
show 1
shows 1
<init> 0
contramap 2
$init$ 0
split 2
<init> 0
F 0
<init> 0
apply 1
$init$ 0
constantIndexedState 2
iPut 1
iModify 1
$init$ 0
constantState 2
state 1
init 0
get 0
gets 1
put 1
modify 1
<init> 0
getF 0
apply 2
run 2
runZero 2
eval 2
evalZero 2
exec 2
execZero 2
map 2
xmap 2
mapT 2
mapK 2
bmap 1
contramap 1
imap 2
bimap 3
leftMap 2
flatMap 2
lift 2
unlift 3
unliftId 3
rwst 2
zoom 2
liftF 1
mapsf 1
<init> 0
apply 2
createState 1
<init> 0
indexedStateTContravariant 0
<init> 0
indexedStateTFunctorLeft 1
<init> 0
indexedStateTBifunctor 1
<init> 0
indexedStateTFunctorRight 1
indexedStateTPlus 2
<init> 0
stateTBindRec 2
<init> 0
stateTMonadState 1
<init> 0
stateTMonadPlus 1
<init> 0
StateMonadTrans 0
<init> 0
stateMonad 0
$init$ 0
constantIndexedStateT 3
$init$ 0
constantStateT 3
stateT 2
$init$ 0
contramap 2
$init$ 0
F 0
bimap 3
$init$ 0
F 0
map 2
$init$ 0
F 0
map 2
$init$ 0
F 0
map 2
bind 2
$init$ 0
F 0
B 0
tailrecM 2
$init$ 0
F 0
point 1
init 0
get 0
put 1
modify 1
gets 1
$init$ 0
liftM 2
hoist 2
apply 1
$init$ 0
F 0
G 0
plus 2
$init$ 0
F 0
G 0
empty 0
<init> 1
xmap 3
bmap 2
imap 1
contramap 2
bimap 3
leftMap 1
put 2
puts 2
putf 3
putsf 3
set 0
pos 0
peek 2
peeks 2
seek 1
seeks 1
experiment 3
copoint 2
map 2
duplicate 1
cobind 2
product 2
$times$times$times 2
mapRunT 2
<init> 0
$init$ 0
indexedStoreT 1
indexedStore 2
$init$ 0
storeT 1
store 2
<init> 0
indexedStoreTContravariant 1
<init> 0
indexedStoreTFunctorLeft 0
<init> 0
indexedStoreTBifunctor 1
<init> 0
indexedStoreTFunctorRight 1
<init> 0
storeTCobind 1
<init> 0
storeTComonad 1
<init> 0
storeTComonadStore 1
<init> 0
storeTCohoist 0
$init$ 0
map 2
$init$ 0
F 0
map 2
$init$ 0
F 0
contramap 2
$init$ 0
F 0
bimap 3
$init$ 0
F 0
cobind 2
$init$ 0
F 0
cojoin 1
copoint 1
$init$ 0
pos 1
peek 2
peeks 2
seek 2
seeks 2
experiment 3
$init$ 0
lower 2
cohoist 2
<init> 1
uncons 1
unconsRec 1
$colon$colon 2
isEmpty 1
isEmptyRec 1
head 1
headRec 1
headOption 1
headOptionRec 1
tailM 1
tailMRec 1
trans 3
filter 2
drop 2
dropWhile 2
take 2
takeWhile 2
$plus$plus 2
flatMap 2
map 2
mapM 2
tail 1
foldLeft 3
foldLeftRec 3
toStream 1
toStreamRec 1
asStream 1
foldRight 3
foldRightRec 3
foldRightM 3
foldMap 3
length 1
lengthRec 1
foreach 2
foreachRec 3
stepMap 2
stepBind 2
rev 1
revRec 1
<init> 0
StreamTInstance1 1
StreamTSemigroup 1
<init> 0
StreamTMonoid 1
StreamTMonadPlus 1
StreamTEqual 2
StreamTShow 2
<init> 0
StreamTFoldable 1
<init> 0
apply 1
empty 1
fromStream 2
unfoldM 3
unfold 2
fromIterable 1
wrapEffect 2
<init> 0
apply 3
runStreamT 2
<init> 0
apply 2
unapply 1
<init> 0
apply 1
unapply 1
<init> 0
apply 3
unapply 1
$init$ 0
F 0
map 2
bind 2
plus 2
$init$ 0
F 0
append 2
$init$ 0
F 0
zero 0
$init$ 0
F 0
point 1
empty 0
$init$ 0
apply 1
liftM 2
hoist 2
<init> 2
runBottomUp 1
foldMap 2
foldRight 2
drawTree 1
scanr 1
flatten 0
size 0
levels 0
toTree 0
cobind 1
foldNode 1
map 1
flatMap 1
traverse1 2
zip 1
hashCode 0
equals 1
<init> 0
<init> 0
point 1
cobind 2
copoint 1
map 2
bind 2
traverse1Impl 3
foldRight 3
foldMapRight1 3
foldLeft 3
foldMapLeft1 3
foldMap 3
alignWith 1
zip 2
treeEqual 1
treeOrder 1
<init> 0
<init> 0
apply 2
unapply 1
<init> 0
apply 1
unapply 1
unfoldForest 2
unfoldTree 2
badEqInstance 0
scanrReducer 3
mapReducer 3
flatMapReducer 3
foldMapReducer 4
hashCodeReducer 2
<init> 2
rootLabel 0
hasNext 0
next 0
<init> 3
hasNext 0
next 0
<init> 2
whichHasNext 0
hasNext 0
next 0
ToStrictTreeUnzip 1
$init$ 0
A 0
<init> 2
equal 2
<init> 1
unzipCombiner 2
unzip 0
$init$ 0
first 1
second 1
<init> 0
F 0
<init> 0
apply 1
<init> 0
apply 1
unwrap 1
subst 1
subst1 1
unsubst 1
<init> 0
apply 1
unwrap 1
subst 1
subst1 1
onF 1
onCov 2
onContra 2
unsubst 1
unapply 1
of 0
<init> 0
<init> 0
isThis 0
isThat 0
isBoth 0
a 0
b 0
onlyThis 0
onlyThat 0
onlyThisOrThat 0
onlyBoth 0
pad 0
fold 3
swap 0
unary_$tilde 0
swapped 1
$tilde 1
append 3
bimap 2
leftMap 1
bitraverse 3
map 1
traverse 2
foreach 1
flatMap 2
$amp$amp$amp 2
foldRight 2
foldMap 2
bifoldRight 3
bifoldMap 3
exists 1
forall 1
toList 0
getOrElse 1
$bar 1
valueOr 2
$eq$eq$eq 3
show 2
<init> 0
<init> 1
<init> 1
<init> 2
apply 2
unapply 1
concatThisList 1
concatThisStream 1
concatThis 2
concatThatList 1
concatThatStream 1
concatThat 2
unalignList 1
unalignStream 1
unalign 2
merge 2
tailrecM 3
<init> 0
<init> 0
TheseInstance0 1
<init> 0
bimap 3
bifoldMap 4
bifoldRight 4
bitraverseImpl 4
TheseOrder 2
<init> 0
TheseInstance1 0
TheseEqual 2
TheseSemigroup 2
TheseShow 2
<init> 1
map 2
mapT 1
flatMap 3
flatMapF 3
swap 1
unary_$tilde 1
isThis 1
isThat 1
isBoth 1
onlyThis 1
onlyThat 1
onlyThisOrThat 1
onlyBoth 1
pad 1
fold 4
exists 2
forall 2
toList 1
getOrElse 2
$bar 2
valueOr 3
swapped 2
$tilde 2
a 1
b 1
append 4
leftMap 2
bimap 3
traverse 3
bitraverse 4
$amp$amp$amp 3
show 3
foldRight 3
<init> 0
TheseTInstance1 1
TheseTHoist 1
<init> 0
theseTMonad 2
theseTBitraverse 1
theseTSemigroup 3
theseTEqual 1
<init> 0
<init> 0
theseT 1
this 2
that 2
both 2
<init> 1
map 2
cobind 3
trans 1
copoint 2
lower 2
contramap 2
<init> 0
tracedTFunctor 1
tracedTContravariant 1
<init> 0
tracedTDistributive 1
<init> 0
tracedTApply 1
<init> 0
tracedTApplicative 1
<init> 0
tracedTCobind 2
<init> 0
tracedTComonad 2
tracedTCohoist 1
tracedTEqual 1
<init> 0
tracedTComonadStore 2
<init> 0
tracedTU 4
iso 0
$init$ 0
W 0
map 2
$init$ 0
W 0
distributeImpl 3
$init$ 0
W 0
ap 2
$init$ 0
W 0
point 1
$init$ 0
W 0
C 0
cobind 2
$init$ 0
W 0
C 0
copoint 1
$init$ 0
traverseImpl 3
compose 1
bicompose 1
product 1
product0 1
<init> 1
run 2
traversal 1
traversalS 0
traverse 3
traverseU 3
traverseM 4
traverseS 2
runTraverseS 3
traverseSTrampoline 3
traverseKTrampoline 3
sequence 2
sequenceS 1
sequenceU 2
map 2
foldLShape 3
foldLeft 3
foldMap 3
foldRight 3
reverse 1
zipWith 3
zipWithL 3
zipWithR 3
indexed 1
zipL 2
zipR 2
mapAccumL 3
mapAccumR 3
$init$ 0
identityTraverse 3
sequentialFusion 6
purity 3
naturality 5
parallelFusion 6
traverseLaw 0
<init> 0
F 0
<init> 0
apply 1
$init$ 0
product 1
product0 1
compose 1
traverse1Impl 3
traverseImpl 3
foldMap1 3
traverse1 3
traverse1U 3
sequence1 2
sequence1U 2
$init$ 0
identityTraverse1 3
sequentialFusion1 6
naturality1 5
parallelFusion1 6
traverse1Law 0
<init> 0
F 0
<init> 0
apply 1
<init> 0
rootLabel 0
subForest 0
foldMapTrampoline 2
foldMap 2
foldRight 2
drawTree 1
scanr 1
draw 1
flatten 0
levels 0
toStrictTree 0
cobind 1
loc 0
unzip 1
foldNode 1
map 1
flatMap 1
traverse1 2
<init> 0
<init> 0
point 1
cobind 2
copoint 1
map 2
bind 2
traverse1Impl 3
foldRight 3
foldMapRight1 3
foldLeft 3
foldMapLeft1 3
foldMap 3
alignWith 1
zip 2
treeEqual 1
treeOrder 1
<init> 0
apply 1
<init> 0
apply 2
unapply 1
<init> 0
apply 1
unapply 1
node 2
leaf 1
unfoldForest 2
unfoldTree 2
$init$ 0
A 0
equal 2
<init> 4
parent 0
root 0
left 0
right 0
firstChild 0
lastChild 0
getChild 1
findChild 1
find 1
toTree 0
toForest 0
isRoot 0
isFirst 0
isLast 0
isLeaf 0
isChild 0
hasChildren 0
setTree 1
modifyTree 1
modifyLabel 1
getLabel 0
setLabel 1
insertLeft 1
insertRight 1
insertDownFirst 1
insertDownLast 1
insertDownAt 2
delete 0
path 0
map 1
cojoin 0
downParents 0
combChildren 3
splitChildren 3
<init> 0
<init> 0
copoint 1
map 2
cobind 2
cojoin 1
all 2
any 2
foldMap1 3
foldMap 3
foldLeft 3
foldMapLeft1 3
traverse1Impl 3
foldMapRight1 3
<init> 0
all 2
any 2
foldLeft 3
foldMap 3
traverse1Impl 3
foldMapRight1 3
treeLocEqual 1
treeLocOrder 1
<init> 0
loc 4
fromForest 1
$init$ 0
E 0
equal 2
$init$ 0
TC 0
leibniz 0
apply 1
<init> 0
unapplyMFABCDE5 1
<init> 0
unapplyA 1
<init> 0
unapplyMFABC1and2 1
unapplyMFABC3 1
<init> 0
unapplyMFAB1 1
unapplyMFAB2 1
<init> 0
unapplyMABCDEFG7 1
unapplyMABCDEF6 1
unapplyMABCDE5 1
unapplyMABCD4 1
unapplyMABC3 1
<init> 0
unapplyMFA 1
unapplyMAB1 1
unapplyMAB2 1
<init> 0
apply 1
unapplyMA 1
unapplyMTMAB 1
$init$ 0
TC 0
leibniz 0
apply 1
<init> 0
unapplyMFAB 1
<init> 0
apply 1
unapplyMAB 1
$init$ 0
TC 0
leibniz 0
apply 1
<init> 0
apply 1
unapply210MFABC 1
TC 0
_1 1
_2 1
<init> 0
apply 1
<init> 1
<init> 0
mkSingletonOf 1
unapply 3
<init> 1
on 0
unary_$plus 0
mapValue 2
mapUnwritten 2
unwritten 1
value 1
swap 1
map 2
mapT 1
ap 2
flatMap 2
traverse 3
foldRight 3
bimap 3
leftMap 2
bitraverse 4
wpoint 2
colocal 2
<init> 0
<init> 0
unwriterTFunctor 1
<init> 0
unwriterTApply 1
<init> 0
unwriterTBifunctor 1
unwriterTBind 1
unwriterTFoldable 1
unwriterTEqual 1
<init> 0
unwriterTBitraverse 1
unwriterComonad 0
unwriterTTraverse 1
unwriterEqual 2
$init$ 0
unwriterT 1
unwriter 1
tell 1
unput 3
unputWith 3
$init$ 0
F 0
map 2
$init$ 0
F 0
ap 2
$init$ 0
F 0
bind 2
$init$ 0
F 0
foldRight 3
$init$ 0
F 0
traverseImpl 3
$init$ 0
F 0
bimap 3
$init$ 0
F 0
bitraverseImpl 4
$init$ 0
cojoin 1
cobind 2
copoint 1
$init$ 0
unzip 1
firsts 1
seconds 1
compose 2
product 1
unzip3 1
unzip4 1
unzip5 1
unzip6 1
unzip7 1
<init> 0
F 0
<init> 0
apply 1
<init> 0
<init> 1
$less$less$qmark$colon 1
$colon$qmark$greater$greater 1
isSuccess 0
isFailure 0
fold 2
loopSuccess 2
loopFailure 2
unary_$tilde 0
swap 0
swapped 1
$tilde 1
bimap 2
leftMap 1
bitraverse 3
map 1
traverse 2
foreach 1
ap 2
foldRight 2
filter 2
exists 1
forall 1
toList 0
toStream 0
toOption 0
toMaybe 0
toEither 0
getOrElse 1
$bar 1
valueOr 1
orElse 1
$bar$bar$bar 1
$plus$plus$plus 3
ensure 2
$eq$eq$eq 3
compare 3
show 2
append 3
$plus$bar$plus 3
findSuccess 2
toValidationNel 0
disjunction 0
disjunctioned 1
$at$bslash$div 1
excepting 1
<init> 1
<init> 1
<init> 0
loopSuccess 3
loopFailure 3
<init> 0
ValidationFlatMapRequested 1
success 0
failure 0
failureNel 1
lift 3
liftNel 3
fromTryCatchThrowable 3
fromTryCatchNonFatal 1
fromEither 1
<init> 0
<init> 0
ValidationOrder 2
ValidationMonoid 2
ValidationAssociative 0
<init> 1
flatMap 1
<init> 0
ValidationEqual 2
ValidationShow 2
ValidationSemigroup 2
<init> 0
ValidationInstances1 0
<init> 0
<init> 0
bimap 3
bitraverseImpl 4
ValidationApplicative 1
<init> 1
off 0
unary_$minus 0
mapValue 2
mapWritten 2
mapT 1
written 1
value 1
swap 1
$colon$plus$plus$greater 3
$colon$plus$plus$greater$greater 3
$less$plus$plus$colon 3
$less$less$plus$plus$colon 3
reset 2
map 2
ap 3
flatMap 3
flatMapF 3
traverse 3
foldRight 3
bimap 3
leftMap 2
bitraverse 4
rwst 1
wpoint 2
colocal 2
<init> 0
<init> 0
writerTMonoid 1
writerTPlus 1
<init> 0
writerFunctor 0
writerTPlusEmpty 1
<init> 0
writerTFunctor 1
<init> 0
writerBind 1
<init> 0
writerBindRec 1
<init> 0
writerTApply 2
<init> 0
writerTBind 2
<init> 0
writerTApplicative 2
<init> 0
writerTBindRec 3
<init> 0
writerMonad 1
<init> 0
writerTMonad 2
<init> 0
writerFoldable 0
writerEqual 1
writerTMonadError 2
<init> 0
writerTBifunctor 1
writerTFoldable 1
writerTEqual 1
writerTMonadPlus 2
<init> 0
writerComonad 0
<init> 0
<init> 0
F 0
writerTraverse 0
<init> 0
writerTBitraverse 1
writerTTraverse 1
<init> 0
writerTMonadListen 2
writerTHoist 1
writerTShow 1
$init$ 0
writerT 1
writerTU 4
writer 1
tell 1
put 3
putWith 3
$init$ 0
F 0
plus 2
$init$ 0
F 0
empty 0
$init$ 0
F 0
map 2
$init$ 0
F 0
W 0
ap 2
$init$ 0
F 0
W 0
point 1
$init$ 0
F 0
bind 2
$init$ 0
F 0
A 0
tailrecM 2
F 0
F 0
$init$ 0
F 0
handleError 2
raiseError 1
$init$ 0
F 0
foldRight 3
$init$ 0
F 0
traverseImpl 3
$init$ 0
F 0
bimap 3
$init$ 0
F 0
bitraverseImpl 4
$init$ 0
copoint 1
cojoin 1
cobind 2
$init$ 0
liftM 2
W 0
apply 1
hoist 2
$init$ 0
F 0
W 0
writer 2
listen 1
<init> 0
apply 1
run 0
toCoyoneda 0
map 1
toRan 0
extend 2
flatMap 1
<init> 0
yonedaFunctor 0
apply 2
$init$ 0
zapWith 3
zap 2
flip 0
<init> 0
<init> 0
zapWith 3
productCoproductZap 2
coproductProductZap 2
monadComonadZap 2
comonadMonadZap 2
<init> 0
$init$ 0
zip 2
compose 2
product 1
zipWith 4
apzip 2
apzipPL 3
ap 1
$init$ 0
zipPreservation 3
zipSymmetric 4
zipLaw 0
<init> 0
F 0
<init> 0
apply 1
fzip 2
<init> 3
map 1
toStream 0
update 1
modify 1
next 0
nextOr 1
previous 0
previousOr 1
tryPrevious 0
insert 0
insertLeft 1
insertRight 1
delete 0
deleteLeft 0
deleteLeftOr 1
deleteRight 0
deleteRightOr 1
deleteOthers 0
foldLeft 2
foldRight 2
length 0
atStart 0
atEnd 0
withFocus 0
move 1
start 0
end 0
moveOr 2
findZ 1
findZor 2
findBy 2
findNext 1
findPrevious 1
positions 0
index 0
nextC 0
previousC 0
deleteLeftC 0
deleteLeftCOr 1
deleteRightC 0
deleteC 0
deleteRightCOr 1
traverse 2
ap 1
toString 0
<init> 0
zipper 3
<init> 0
<init> 0
cojoin 1
cobind 2
copoint 1
traverseImpl 3
foldRight 3
foldLeft 3
foldMap 3
point 1
ap 2
map 2
all 2
any 2
foldMap1 3
foldMapRight1 3
foldMapLeft1 3
traverse1Impl 3
zipperEqual 1
zipperShow 1
<init> 0
<init> 0
apply 1
<init> 0
apply 2
<init> 0
apply 2
<init> 0
apply 2
<init> 0
apply 1
<init> 0
apply 1
<init> 0
apply 1
<init> 0
apply 2
<init> 0
apply 2
Traced 1
<init> 0
apply 1
<init> 0
apply 1
<init> 0
apply 1
<init> 0
apply 1
<init> 0
apply 1
<init> 0
apply 1
<init> 0
apply 1
<init> 0
apply 1
<init> 0
apply 1
<init> 0
apply 1
<init> 0
apply 1
<init> 0
apply 1
<init> 0
<init> 0
$init$ 0
<init> 0
shows 1
append 2
zero 0
order 2
succ 1
pred 1
succn 2
predn 2
min 0
max 0
equalIsNatural 0
<init> 0
shows 1
order 2
succ 1
pred 1
succn 2
predn 2
min 0
max 0
equalIsNatural 0
<init> 0
append 2
zero 0
<init> 0
append 2
zero 0
<init> 0
append 2
zero 0
order 2
succ 1
pred 1
succn 2
predn 2
min 0
max 0
<init> 0
append 2
zero 0
order 2
succ 1
pred 1
succn 2
predn 2
min 0
max 0
<init> 0
shows 1
append 2
zero 0
order 2
succ 1
pred 1
succn 2
predn 2
min 0
max 0
equalIsNatural 0
<init> 0
append 2
zero 0
order 2
succ 1
pred 1
succn 2
predn 2
min 0
max 0
equalIsNatural 0
<init> 0
shows 1
append 2
zero 0
order 2
succ 1
pred 1
succn 2
predn 2
min 0
max 0
equalIsNatural 0
<init> 0
append 2
zero 0
order 2
succ 1
pred 1
succn 2
predn 2
min 0
max 0
equalIsNatural 0
<init> 0
shows 1
append 2
zero 0
order 2
succ 1
pred 1
succn 2
predn 2
min 0
max 0
equalIsNatural 0
<init> 0
append 2
zero 0
succ 1
pred 1
succn 2
predn 2
min 0
max 0
order 2
<init> 0
shows 1
append 2
zero 0
order 2
succ 1
pred 1
succn 2
predn 2
min 0
max 0
equalIsNatural 0
<init> 0
append 2
zero 0
succ 1
pred 1
succn 2
predn 2
min 0
max 0
order 2
<init> 0
shows 1
append 2
zero 0
order 2
succ 1
pred 1
succn 2
predn 2
min 0
max 0
equalIsNatural 0
<init> 0
append 2
zero 0
succ 1
pred 1
succn 2
predn 2
min 0
max 0
order 2
<init> 0
shows 1
equalIsNatural 0
order 2
<init> 0
shows 1
equalIsNatural 0
order 2
$init$ 0
conjunction 2
disjunction 2
nor 2
nand 2
conditional 2
inverseConditional 2
negConditional 2
negInverseConditional 2
unless 2
when 2
unlessM 3
unlessMU 3
whenM 3
whenMU 3
fold 3
option 2
test 1
valueOrZero 3
zeroOrValue 3
pointOrEmpty 4
emptyOrPure 4
pointOrEmptyNT 3
emptyOrPureNT 3
$init$ 0
heaviside 1
$init$ 0
heaviside 1
$init$ 0
heaviside 1
$init$ 0
heaviside 1
$init$ 0
heaviside 1
<init> 0
<init> 0
<init> 0
<init> 0
<init> 0
<init> 0
<init> 0
$init$ 0
eitherEqual 2
eitherLeftEqual 1
eitherRightEqual 1
eitherFirstRightEqual 1
eitherLastRightEqual 1
eitherFirstLeftEqual 1
eitherLastLeftEqual 1
eitherFirstLeftSemigroup 1
eitherFirstRightSemigroup 1
eitherLastLeftSemigroup 1
eitherLastRightSemigroup 1
eitherLeftSemigroup 2
eitherRightSemigroup 2
$init$ 0
<init> 0
bimap 3
bitraverseImpl 4
eitherMonad 0
LeftProjectionEIso2 0
FirstLeftProjectionEIso2 0
LastLeftProjectionEIso2 0
<init> 0
to 1
from 1
<init> 0
to 1
from 1
<init> 0
to 1
from 1
RightProjectionAIso2 0
FirstRightProjectionAIso2 0
LastRightProjectionAIso2 0
<init> 0
to 1
from 1
<init> 0
to 1
from 1
<init> 0
to 1
from 1
<init> 0
iso 0
G 0
<init> 0
iso 0
G 0
<init> 0
iso 0
G 0
eitherRightLInstance 0
eitherFirstRightLInstance 0
eitherLastRightLInstance 0
eitherLeftRInstance 0
eitherFirstLeftRInstance 0
eitherLastLeftRInstance 0
eitherOrder 2
eitherLeftOrder 1
eitherRightOrder 1
eitherFirstLeftOrder 1
eitherFirstRightOrder 1
eitherLastLeftOrder 1
eitherLastRightOrder 1
eitherFirstLeftMonoid 1
eitherFirstRightMonoid 1
eitherLastLeftMonoid 1
eitherLastRightMonoid 1
eitherLeftMonoid 2
eitherRightMonoid 2
eitherAssociative 0
eitherShow 2
<init> 0
$init$ 0
A 0
equal 2
$init$ 0
A 0
equal 2
$init$ 0
A 0
B 0
equal 2
$init$ 0
append 2
$init$ 0
append 2
$init$ 0
append 2
$init$ 0
append 2
$init$ 0
A 0
X 0
append 2
$init$ 0
X 0
A 0
append 2
$init$ 0
X 0
zero 0
$init$ 0
X 0
zero 0
$init$ 0
X 0
zero 0
$init$ 0
X 0
zero 0
$init$ 0
X 0
zero 0
$init$ 0
X 0
zero 0
$init$ 0
A 0
B 0
order 2
$init$ 0
A 0
order 2
$init$ 0
A 0
order 2
$init$ 0
function1Semigroup 1
function1Cobind 1
$init$ 0
function1Monoid 1
function1Comonad 1
function1CovariantByName 0
$init$ 0
<init> 0
point 1
copoint 1
cobind 2
cojoin 1
bind 2
map 2
traverseImpl 3
foldRight 3
distributeImpl 3
tailrecM 2
function0Equal 1
<init> 0
left 1
right 1
arr 1
first 1
compose 2
id 0
choice 2
split 2
function1Covariant 0
function1Contravariant 0
function2Instance 0
function3Instance 0
function4Instance 0
function5Instance 0
function6Instance 0
function7Instance 0
function8Instance 0
$init$ 0
fix 1
<init> 0
$init$ 0
R 0
append 2
$init$ 0
R 0
zero 0
$init$ 0
M 0
cojoin 1
cobind 2
map 2
$init$ 0
M 0
copoint 1
$init$ 0
futureInstance 1
futureSemigroup 2
<init> 1
point 1
bind 2
map 2
cobind 2
cojoin 1
chooseAny 2
mapBoth 3
both 2
gather 1
ap 2
attempt 1
fail 1
raiseError 1
handleError 2
<init> 0
$init$ 0
iterableShow 1
iterableOrder 1
iterableEqual 1
iterableSubtypeFoldable 0
<init> 0
$init$ 0
listEqual 1
$init$ 0
<init> 0
findLeft 2
findRight 2
index 2
length 1
point 1
bind 2
empty 0
plus 2
map 2
filter 2
zip 2
unzip 1
alignWith 1
traverseImpl 3
traverseS 2
foldLeft 3
foldRight 3
toList 1
isEmpty 1
cobind 2
cojoin 1
any 2
all 2
tailrecM 2
listMonoid 0
listShow 1
listOrder 1
$init$ 0
intersperse 2
tailOption 1
nil 0
toNel 1
toZipper 1
zipperEnd 1
$less$up$greater 3
takeWhileM 3
takeUntilM 3
filterM 3
findM 3
powerset 1
partitionM 3
spanM 3
breakM 3
groupWhenM 3
groupBy1 2
groupWhen 2
mapAccum 3
mapAccumLeft 3
mapAccumRight 3
tailz 1
initz 1
allPairs 1
adjacentPairs 1
<init> 0
<init> 0
$init$ 0
A 0
equalIsNatural 0
equal 2
$init$ 0
A 0
order 2
$init$ 0
buildXMap 1
ab_$plus 4
ab_$minus 3
fromSeq 2
$init$ 0
buildXMap 1
ab_$plus 4
ab_$minus 3
$init$ 0
$init$ 0
OK 0
OV 0
equal 2
$init$ 0
foldLeft 3
foldRight 3
all 2
any 2
mapEqual 2
mapFoldable 0
$init$ 0
mapInstance 1
mapMonoid 2
mapShow 2
mapOrder 2
$init$ 0
alter 4
intersectWithKey 4
intersectWith 4
mapKeys 3
unionWithKey 4
unionWith 4
insertWith 5
getOrAdd 5
<init> 0
$init$ 0
optionEqual 1
$init$ 0
<init> 0
point 1
index 2
length 1
ap 2
bind 2
map 2
traverseImpl 3
empty 0
plus 2
foldRight 3
cozip 1
zip 2
unzip 1
alignWith 1
cobind 2
cojoin 1
pextract 1
isDefined 1
toOption 1
getOrElse 2
tailrecM 2
optionMonoid 1
optionOrder 1
optionShow 1
optionFirst 0
optionFirstShow 1
optionFirstOrder 1
optionFirstMonad 0
optionLast 0
optionLastShow 1
optionLastOrder 1
optionLastMonad 0
optionMin 1
optionMinShow 1
optionMinOrder 1
optionMinMonad 0
optionMax 1
optionMaxShow 1
optionMaxOrder 1
optionMaxMonad 0
$init$ 0
some 1
none 0
cata 3
fold 3
toSuccess 2
toFailure 2
toSuccessNel 2
toFailureNel 2
toRight 2
toLeft 2
toMaybe 1
orEmpty 3
foldLift 4
foldLiftOpt 3
<init> 0
<init> 0
getOrElseF 3
$init$ 0
A 0
equalIsNatural 0
equal 2
$init$ 0
A 0
order 2
$init$ 0
<init> 0
arr 1
compose 2
id 0
choice 2
split 2
first 1
<init> 0
$init$ 0
<init> 0
length 1
empty 0
plus 2
isEmpty 1
toSet 1
foldRight 3
all 2
any 2
setOrder 1
setMonoid 0
setShow 1
<init> 0
$init$ 0
buildXMap 1
ab_$plus 4
ab_$minus 3
<init> 0
$init$ 0
<init> 0
cojoin 1
cobind 2
traverseImpl 3
length 1
index 2
foldLeft 3
foldMapLeft1Opt 3
foldMap 3
foldMap1Opt 3
foldMapRight1Opt 3
foldRight 3
toStream 1
zipWithL 3
zipWithR 3
filter 2
bind 2
empty 0
plus 2
isEmpty 1
point 1
zip 2
unzip 1
alignWith 1
tailrecM 2
<init> 0
point 1
ap 2
streamMonoid 0
streamEqual 1
streamOrder 1
streamShow 1
$init$ 0
interleave 2
toZipper 1
zipperEnd 1
heads 1
tails 1
zapp 2
unfoldForest 2
unfoldForestM 3
intersperse 2
unfold 2
unfoldm 2
<init> 0
<init> 0
$init$ 0
A 0
equal 2
$init$ 0
<init> 0
append 2
zero 0
show 1
order 2
equal 2
equalIsNatural 0
empty 0
plus 2
isEmpty 1
$init$ 0
plural 2
charsNel 1
charsNel 2
charsNelErr 2
unsafeCharsNel 1
parseBoolean 1
parseByte 1
parseShort 1
parseInt 1
parseLong 1
parseFloat 1
parseDouble 1
<init> 0
<init> 0
parseBigInt 1
parseBigDecimal 1
$init$ 0
cata 3
toDisjunction 1
fromDisjunction 1
toValidation 1
toValidationNel 1
fromValidation 1
$init$ 0
<init> 0
to 1
from 1
<init> 0
to 1
from 1
<init> 0
$init$ 0
tuple2Instance 0
tuple3Functor 0
tuple4Functor 0
tuple5Functor 0
tuple6Functor 0
tuple7Functor 0
tuple8Functor 0
$init$ 0
<init> 0
bimap 3
bitraverseImpl 4
<init> 0
reassociateLeft 1
reassociateRight 1
tuple1Semigroup 1
tuple2Semigroup 2
tuple3Semigroup 3
tuple4Semigroup 4
tuple5Semigroup 5
tuple6Semigroup 6
tuple7Semigroup 7
tuple8Semigroup 8
<init> 0
cojoin 1
copoint 1
cobind 2
tuple2BindRec 1
tuple3BindRec 2
tuple4BindRec 3
tuple5BindRec 4
tuple6BindRec 5
tuple7BindRec 6
tuple8BindRec 7
tuple1Equal 1
tuple2Equal 2
tuple3Equal 3
tuple4Equal 4
tuple5Equal 5
tuple6Equal 6
tuple7Equal 7
tuple8Equal 8
$init$ 0
tuple1Show 1
tuple2Show 2
tuple3Show 3
tuple4Show 4
tuple5Show 5
tuple6Show 6
tuple7Show 7
tuple8Show 8
tuple1Order 1
tuple2Order 2
tuple3Order 3
tuple4Order 4
tuple5Order 5
tuple6Order 6
tuple7Order 7
tuple8Order 8
tuple1Monoid 1
tuple2Monoid 2
tuple3Monoid 3
tuple4Monoid 4
tuple5Monoid 5
tuple6Monoid 6
tuple7Monoid 7
tuple8Monoid 8
<init> 0
tuple2Cozip 0
tuple3Cozip 0
tuple4Cozip 0
tuple5Cozip 0
tuple6Cozip 0
tuple7Cozip 0
tuple8Cozip 0
tuple2Monad 1
tuple3Monad 2
tuple4Monad 3
tuple5Monad 4
tuple6Monad 5
tuple7Monad 6
tuple8Monad 7
<init> 0
<init> 0
$init$ 0
_1 0
append 2
$init$ 0
_1 0
_2 0
append 2
$init$ 0
_1 0
_2 0
_3 0
append 2
$init$ 0
_1 0
_2 0
_3 0
_4 0
append 2
$init$ 0
_1 0
_2 0
_3 0
_4 0
_5 0
append 2
$init$ 0
_1 0
_2 0
_3 0
_4 0
_5 0
_6 0
append 2
$init$ 0
_1 0
_2 0
_3 0
_4 0
_5 0
_6 0
_7 0
append 2
$init$ 0
_1 0
_2 0
_3 0
_4 0
_5 0
_6 0
_7 0
_8 0
append 2
$init$ 0
map 2
traverseImpl 3
$init$ 0
cozip 1
$init$ 0
cozip 1
$init$ 0
cozip 1
$init$ 0
cozip 1
$init$ 0
cozip 1
$init$ 0
cozip 1
$init$ 0
cozip 1
$init$ 0
cozip 1
$init$ 0
_1 0
equal 2
$init$ 0
_1 0
_2 0
equal 2
$init$ 0
_1 0
_2 0
_3 0
equal 2
$init$ 0
_1 0
_2 0
_3 0
_4 0
equal 2
$init$ 0
_1 0
_2 0
_3 0
_4 0
_5 0
equal 2
$init$ 0
_1 0
_2 0
_3 0
_4 0
_5 0
_6 0
equal 2
$init$ 0
_1 0
_2 0
_3 0
_4 0
_5 0
_6 0
_7 0
equal 2
$init$ 0
_1 0
_2 0
_3 0
_4 0
_5 0
_6 0
_7 0
_8 0
equal 2
$init$ 0
_1 0
show 1
$init$ 0
_1 0
_2 0
show 1
$init$ 0
_1 0
_2 0
_3 0
show 1
$init$ 0
_1 0
_2 0
_3 0
_4 0
show 1
$init$ 0
_1 0
_2 0
_3 0
_4 0
_5 0
show 1
$init$ 0
_1 0
_2 0
_3 0
_4 0
_5 0
_6 0
show 1
$init$ 0
_1 0
_2 0
_3 0
_4 0
_5 0
_6 0
_7 0
show 1
$init$ 0
_1 0
_2 0
_3 0
_4 0
_5 0
_6 0
_7 0
_8 0
show 1
$init$ 0
_1 0
order 2
$init$ 0
_1 0
_2 0
order 2
$init$ 0
_1 0
_2 0
_3 0
order 2
$init$ 0
_1 0
_2 0
_3 0
_4 0
order 2
$init$ 0
_1 0
_2 0
_3 0
_4 0
_5 0
order 2
$init$ 0
_1 0
_2 0
_3 0
_4 0
_5 0
_6 0
order 2
$init$ 0
_1 0
_2 0
_3 0
_4 0
_5 0
_6 0
_7 0
order 2
$init$ 0
_1 0
_2 0
_3 0
_4 0
_5 0
_6 0
_7 0
_8 0
order 2
$init$ 0
_1 0
zero 0
$init$ 0
_1 0
_2 0
zero 0
$init$ 0
_1 0
_2 0
_3 0
zero 0
$init$ 0
_1 0
_2 0
_3 0
_4 0
zero 0
$init$ 0
_1 0
_2 0
_3 0
_4 0
_5 0
zero 0
$init$ 0
_1 0
_2 0
_3 0
_4 0
_5 0
_6 0
zero 0
$init$ 0
_1 0
_2 0
_3 0
_4 0
_5 0
_6 0
_7 0
zero 0
$init$ 0
_1 0
_2 0
_3 0
_4 0
_5 0
_6 0
_7 0
_8 0
zero 0
$init$ 0
bind 2
point 1
$init$ 0
<init> 0
id 0
compose 2
<init> 0
id 0
compose 2
<init> 0
$init$ 0
vectorEqual 1
$init$ 0
<init> 0
index 2
length 1
point 1
bind 2
empty 0
plus 2
isEmpty 1
map 2
filter 2
zip 2
unzip 1
traverseImpl 3
traverseS 2
toVector 1
foldRight 3
tailrecM 2
alignWith 1
all 2
any 2
vectorMonoid 0
vectorShow 1
vectorOrder 1
$init$ 0
empty 0
lazyFoldRight 3
intersperse 2
toNel 1
toZipper 1
zipperEnd 1
$less$up$greater 3
takeWhileM 3
takeUntilM 3
filterM 3
findM 3
powerset 1
partitionM 3
spanM 3
breakM 3
groupWhenM 3
groupWhen 2
mapAccumLeft 3
mapAccumRight 3
tailz 1
initz 1
allPairs 1
adjacentPairs 1
$init$ 0
A 0
equalIsNatural 0
equal 2
$init$ 0
A 0
order 2
<init> 0
<init> 0
$init$ 0
enumInstance 0
<init> 0
$init$ 0
<init> 0
$init$ 0
<init> 0
shows 1
append 2
zero 0
succ 1
pred 1
succn 2
predn 2
min 0
max 0
order 2
<init> 0
shows 1
append 2
zero 0
order 2
<init> 0
$init$ 0
callableOrder 1
<init> 0
map 2
bind 2
point 1
<init> 0
$init$ 0
<init> 0
bimap 3
bitraverseImpl 4
<init> 0
$init$ 0
<init> 0
shows 1
append 2
zero 0
order 2
succ 1
pred 1
succn 2
predn 2
min 0
max 0
<init> 0
append 2
zero 0
<init> 0
$init$ 0
<init> 0
shows 1
append 2
zero 0
order 2
succ 1
pred 1
succn 2
predn 2
min 0
max 0
<init> 0
shows 1
append 2
zero 0
order 2
<init> 0
$init$ 0
orderingMonoid 0
$init$ 0
ToScalazOrderFromOrdering 1
<init> 0
<init> 0
<init> 2
align 1
alignWith 2
pad 1
padWith 2
merge 2
alignSwap 1
alignA 1
alignB 1
alignThis 1
alignThat 1
alignBoth 1
$init$ 0
ToAlignOpsUnapply 2
$init$ 0
ToAlignOps 2
$init$ 0
ToAlignOps 1
F 0
$init$ 0
apply 2
tupled 1
$u229B 1
$bar$at$bar 1
<init> 0
apply 2
tupled 1
$u229B 1
$bar$at$bar 1
<init> 0
apply 2
tupled 1
$u229B 1
$bar$at$bar 1
<init> 0
apply 2
tupled 1
$u229B 1
$bar$at$bar 1
<init> 0
apply 2
tupled 1
$u229B 1
$bar$at$bar 1
<init> 0
apply 2
tupled 1
$u229B 1
$bar$at$bar 1
<init> 0
apply 2
tupled 1
$u229B 1
$bar$at$bar 1
<init> 0
apply 2
tupled 1
$u229B 1
$bar$at$bar 1
<init> 0
apply 2
tupled 1
$u229B 1
$bar$at$bar 1
<init> 0
apply 2
tupled 1
$u229B 1
$bar$at$bar 1
<init> 0
apply 2
tupled 1
<init> 2
$init$ 0
ToApplicativePlusOpsUnapply 2
$init$ 0
ToApplicativePlusOps 2
$init$ 0
ToApplicativePlusOps 1
F 0
<init> 2
unlessM 1
whenM 1
replicateM 1
replicateM_ 1
$init$ 0
ToApplicativeOpsUnapply 2
$init$ 0
ToApplicativeOps 2
ApplicativeIdV 1
$init$ 0
point 1
pure 1
η 1
$init$ 0
ToApplicativeOps 1
F 0
point 2
pure 2
η 2
ApplicativeIdV 1
$init$ 0
point 1
pure 1
η 1
<init> 2
$less$times$greater 1
tuple 1
$times$greater 1
$less$times 1
$bar$at$bar 1
$u229B 1
$init$ 0
ToApplyOpsUnapply 2
$init$ 0
ToApplyOps 2
$up 4
$up$up 5
$up$up$up 6
$up$up$up$up 7
$up$up$up$up$up 8
$up$up$up$up$up$up 9
$init$ 0
ToApplyOps 1
F 0
$up 3
$up$up 4
$up$up$up 5
$up$up$up$up 6
$up$up$up$up$up 7
$up$up$up$up$up$up 8
<init> 2
$times$times$times 1
$amp$amp$amp 1
product 0
$init$ 0
ToArrowOpsUnapply 2
$init$ 0
ToArrowOps 2
ToArrowVFromKleisliLike 2
$init$ 0
ToArrowOps 1
F 0
<init> 2
reassociateLeft 1
reassociateRight 1
$init$ 0
ToAssociativeOpsUnapply 2
$init$ 0
ToAssociativeOps 2
ToAssociativeVFromKleisliLike 2
$init$ 0
ToAssociativeOps 1
F 0
<init> 2
bifoldMap 3
bifoldRight 3
bifoldLeft 3
bifoldMap1 3
bifoldR 3
bifoldL 3
$init$ 0
ToBifoldableOpsUnapply 2
$init$ 0
ToBifoldableOps 2
ToBifoldableVFromKleisliLike 2
$init$ 0
ToBifoldableOps 1
F 0
<init> 2
bimap 2
$colon$minus$greater 1
$less$minus$colon 1
$less$colon$greater 2
umap 2
rightMap 1
leftMap 1
rightAs 1
leftAs 1
widen 0
$init$ 0
ToBifunctorOpsUnapply 2
$init$ 0
ToBifunctorOps 2
ToBifunctorVFromKleisliLike 2
$init$ 0
ToBifunctorOps 1
F 0
<init> 2
$init$ 0
ToBindRecOpsUnapply 2
$init$ 0
ToBindRecOps 2
$init$ 0
ToBindRecOps 1
F 0
<init> 2
flatMap 1
$greater$greater$eq 1
$u2217 1
join 1
μ 1
$greater$greater 1
$greater$greater$bang 1
ifM 3
mproduct 1
$init$ 0
ToBindOpsUnapply 2
$init$ 0
ToBindOps 2
$init$ 0
ToBindOps 1
F 0
<init> 2
bitraverse 3
bitraverseU 3
bisequence 3
bisequenceU 3
$init$ 0
ToBitraverseOpsUnapply 2
$init$ 0
ToBitraverseOps 2
ToBitraverseVFromKleisliLike 2
$init$ 0
ToBitraverseOps 1
F 0
<init> 2
attempt 0
$init$ 0
ToCatchableOpsUnapply 2
$init$ 0
ToCatchableOps 2
$init$ 0
ToCatchableOps 1
F 0
<init> 2
$init$ 0
ToCategoryOpsUnapply 2
$init$ 0
ToCategoryOps 2
ToCategoryVFromKleisliLike 2
$init$ 0
ToCategoryOps 1
F 0
<init> 2
$bar$bar$bar 1
$init$ 0
ToChoiceOpsUnapply 2
$init$ 0
ToChoiceOps 2
ToChoiceVFromKleisliLike 2
$init$ 0
ToChoiceOps 1
F 0
<init> 2
cojoin 0
coflatten 0
cobind 1
coflatMap 1
$init$ 0
ToCobindOpsUnapply 2
$init$ 0
ToCobindOps 2
$init$ 0
ToCobindOps 1
F 0
<init> 2
copoint 0
$init$ 0
ToComonadOpsUnapply 2
$init$ 0
ToComonadOps 2
$init$ 0
ToComonadOps 1
F 0
<init> 2
$less$less$less 1
$u22D8 1
$greater$greater$greater 1
$u22D9 1
$init$ 0
ToComposeOpsUnapply 2
$init$ 0
ToComposeOps 2
ToComposeVFromKleisliLike 2
$init$ 0
ToComposeOps 1
F 0
<init> 2
contramap 1
$u2219 1
$init$ 0
ToContravariantOpsUnapply 2
$init$ 0
ToContravariantOps 2
$init$ 0
ToContravariantOps 1
F 0
<init> 2
$init$ 0
ToCozipOpsUnapply 2
$init$ 0
ToCozipOps 2
$init$ 0
ToCozipOps 1
F 0
<init> 2
$init$ 0
ToDivideOpsUnapply 2
$init$ 0
ToDivideOps 2
$init$ 0
ToDivideOps 1
F 0
<init> 2
$init$ 0
ToDivisibleOpsUnapply 2
$init$ 0
ToDivisibleOps 2
$init$ 0
ToDivisibleOps 1
F 0
<init> 1
left 0
right 0
$init$ 0
ToEitherOps 1
<init> 2
succ 0
$minus$plus$minus 1
succx 0
pred 0
$minus$minus$minus 1
predx 0
from 0
fromStep 1
$bar$eq$greater 1
$bar$minus$greater 1
$bar$eq$eq$greater 2
$bar$minus$minus$greater 2
$init$ 0
ToEnumOps 2
$init$ 0
ToEnumOps 1
F 0
<init> 2
$eq$eq$eq 1
$div$eq$eq 1
$eq$div$eq 1
$u225F 1
$u2260 1
assert_$eq$eq$eq 3
$init$ 0
ToEqualOps 2
$init$ 0
ToEqualOps 1
F 0
<init> 2
foldMapRight1 2
foldMapLeft1 2
foldRight1 1
foldLeft1 1
foldr1 1
foldl1 1
foldMap1 2
sumr1 1
suml1 1
maximum1 1
maximumOf1 2
maximumBy1 2
minimum1 1
minimumOf1 2
minimumBy1 2
distinct1 1
distinctE1 1
intercalate1 2
msuml1 2
toNel 0
scanLeft1 1
scanRight1 1
$init$ 0
ToFoldable1OpsUnapply 2
$init$ 0
ToFoldable1Ops 2
$init$ 0
ToFoldable1Ops 1
F 0
<init> 2
foldMap 2
foldMap1Opt 2
foldRight 2
foldMapRight1Opt 2
foldRight1Opt 1
foldLeft 2
foldMapLeft1Opt 2
foldLeft1Opt 1
foldRightM 3
foldLeftM 3
foldMapM 3
findMapM 2
findLeft 1
findRight 1
fold 1
fold1Opt 1
foldr 2
foldr1Opt 1
foldl 2
foldl1Opt 1
foldrM 3
foldlM 3
length 0
index 1
indexOr 2
sumr 1
sumr1Opt 1
suml 1
suml1Opt 1
toList 0
toVector 0
toSet 0
toStream 0
toIList 0
toEphemeralStream 0
to 1
all 1
$u2200 1
allM 2
anyM 2
any 1
$u2203 1
filterLength 1
count 0
maximum 1
maximumOf 2
maximumBy 2
minimum 1
minimumOf 2
minimumBy 2
distinct 1
distinctE 1
longDigits 1
empty 0
element 2
splitWith 1
splitBy 2
splitByRelation 1
selectSplit 1
collapse 1
concatenate 1
intercalate 2
traverse_ 2
traverseU_ 2
traverseS_ 1
sequence_ 2
sequenceS_ 1
sequenceF_ 1
msuml 2
msumlU 1
$init$ 0
ToFoldableOpsUnapply 2
$init$ 0
ToFoldableOps 2
$init$ 0
ToFoldableOps 1
F 0
<init> 2
map 1
distribute 2
cosequence 2
cotraverse 3
$u2218 1
strengthL 1
strengthR 1
fpair 0
fproduct 1
void 0
fpoint 1
$greater$bar 1
as 1
widen 1
$init$ 0
ToFunctorOpsUnapply 2
$init$ 0
ToFunctorOps 2
ToLiftV 1
$init$ 0
lift 1
ToFunctorIdV 1
$init$ 0
mapply 2
$init$ 0
ToFunctorOps 1
F 0
ToLiftV 1
$init$ 0
lift 0
<init> 1
$qmark$qmark 2
$bar$greater 1
$u25B9 1
unsafeTap 1
$less$bar 1
$u25C3 1
squared 0
matchOrZero 2
doWhile 2
whileDo 2
visit 2
$init$ 0
ToIdOps 1
<init> 2
xmap 2
xmapb 1
xmapi 1
$init$ 0
ToInvariantFunctorOpsUnapply 2
$init$ 0
ToInvariantFunctorOps 2
$init$ 0
ToInvariantFunctorOps 1
F 0
<init> 2
isEmpty 0
$init$ 0
ToIsEmptyOpsUnapply 2
$init$ 0
ToIsEmptyOps 2
$init$ 0
ToIsEmptyOps 1
F 0
<init> 1
liftKleisliId 0
liftReader 0
<init> 1
liftKleisli 0
liftReaderT 0
$init$ 0
ToKleisliOpsUnapply 2
$init$ 0
ToKleisliIdOps 1
ToKleisliFAOps 1
<init> 1
just 0
$init$ 0
ToMaybeOps 1
<init> 1
raiseError 1
<init> 2
handleError 1
$init$ 0
ToMonadErrorOps 2
ToMonadErrorIdOps 1
$init$ 0
ToMonadErrorOps 1
F 0
<init> 2
written 0
listen 0
$init$ 0
ToMonadListenOps 2
$init$ 0
ToMonadListenOps 2
<init> 2
filter 1
withFilter 1
uniteU 1
unite 2
lefts 2
rights 2
separate 2
$init$ 0
ToMonadPlusOpsUnapply 2
$init$ 0
ToMonadPlusOps 2
$init$ 0
ToMonadPlusOps 1
F 0
<init> 2
liftM 1
whileM 2
whileM_ 1
untilM 2
untilM_ 1
iterateWhile 1
iterateUntil 1
$init$ 0
ToMonadOpsUnapply 2
$init$ 0
ToMonadOps 2
$init$ 0
ToMonadOps 1
F 0
<init> 2
$colon$plus$plus$greater 1
$colon$plus$plus$greater$greater 1
$init$ 0
ToMonadTellOps 2
$init$ 0
ToMonadTellOps 1
F 0
<init> 2
multiply 1
ifEmpty 3
isMZero 1
onNotEmpty 3
onEmpty 3
$init$ 0
ToMonoidOps 2
mzero 1
$u2205 1
$init$ 0
ToMonoidOps 1
F 0
mzero 1
$u2205 1
<init> 1
wrapNel 0
$init$ 0
ToNelOps 1
<init> 2
$init$ 0
ToNondeterminismOpsUnapply 2
$init$ 0
ToNondeterminismOps 2
$init$ 0
ToNondeterminismOps 1
F 0
self 0
<init> 2
pextract 0
getOrElse 1
isDefined 0
orElse 1
nonEmpty 0
isEmpty 0
<init> 1
$bar 1
$qmark 1
toOption 0
toMaybe 0
$init$ 0
ToOptionalOpsUnapply 2
$init$ 0
ToOptionalOps 2
$init$ 0
ToOptionalOps 1
F 0
<init> 2
$less 1
$less$eq 1
$greater 1
$greater$eq 1
max 1
min 1
cmp 1
$qmark$bar$qmark 1
lte 1
gte 1
lt 1
gt 1
$init$ 0
ToOrderOps 2
$init$ 0
ToOrderOps 1
F 0
<init> 2
$init$ 0
ToPlusEmptyOpsUnapply 2
$init$ 0
ToPlusEmptyOps 2
mempty 1
$init$ 0
ToPlusEmptyOps 1
F 0
<init> 2
$less$plus$greater 1
$init$ 0
ToPlusOpsUnapply 2
$init$ 0
ToPlusOps 2
$init$ 0
ToPlusOps 1
F 0
<init> 2
proleft 0
proright 0
$init$ 0
ToProChoiceOpsUnapply 2
$init$ 0
ToProChoiceOps 2
ToProChoiceVFromKleisliLike 2
$init$ 0
ToProChoiceOps 1
F 0
<init> 2
$up$greater$greater 1
$greater$greater$up 1
mapfst 1
mapsnd 1
dimap 2
$init$ 0
ToProfunctorOpsUnapply 2
$init$ 0
ToProfunctorOps 2
ToProfunctorVFromKleisliLike 2
$init$ 0
ToProfunctorOps 1
F 0
<init> 1
unit 1
snoc 2
cons 2
$init$ 0
ToReducerOps 1
<init> 2
$bar$plus$bar 1
mappend 1
$u22B9 1
$init$ 0
ToSemigroupOps 2
$init$ 0
ToSemigroupOps 1
F 0
mappend 3
<init> 2
show 0
shows 0
print 0
println 0
$init$ 0
ToShowOps 2
$init$ 0
ToShowOps 1
F 0
<init> 2
$minus$times$minus 1
$init$ 0
ToSplitOpsUnapply 2
$init$ 0
ToSplitOps 2
ToSplitVFromKleisliLike 2
$init$ 0
ToSplitOps 1
F 0
<init> 1
state 0
stateT 1
$init$ 0
ToStateOps 1
<init> 1
strictNode 1
strictLeaf 0
$init$ 0
ToStrictTreeOps 1
<init> 2
first 0
second 0
$init$ 0
ToStrongOpsUnapply 2
$init$ 0
ToStrongOps 2
ToStrongVFromKleisliLike 2
$init$ 0
ToStrongOps 1
F 0
$init$ 0
<init> 0
<init> 0
<init> 0
<init> 0
<init> 0
<init> 0
<init> 0
<init> 0
<init> 0
<init> 0
<init> 0
<init> 0
<init> 0
<init> 0
<init> 0
<init> 0
<init> 0
<init> 0
<init> 0
<init> 0
<init> 0
<init> 0
<init> 0
<init> 0
<init> 0
<init> 0
<init> 0
<init> 0
<init> 0
<init> 0
<init> 0
<init> 0
<init> 0
<init> 0
<init> 0
<init> 0
<init> 0
<init> 0
<init> 0
<init> 0
<init> 0
<init> 0
<init> 0
<init> 0
<init> 0
<init> 0
<init> 0
<init> 0
<init> 0
<init> 0
<init> 0
<init> 0
<init> 0
<init> 0
<init> 0
<init> 0
<init> 0
<init> 0
<init> 1
unwrap 0
$init$ 0
ToTagOps 1
<init> 1
wrapThis 0
this 0
wrapThat 0
that 0
<init> 1
both 0
$init$ 0
ToTheseOps 1
ToThesePairOps 1
<init> 2
traverse1 2
traverse1U 2
sequence1 2
sequence1U 1
$init$ 0
ToTraverse1OpsUnapply 2
$init$ 0
ToTraverse1Ops 2
$init$ 0
ToTraverse1Ops 1
F 0
<init> 2
tmap 1
traverse 2
traverseU 2
traverseM 3
sequence 2
sequenceU 1
traverseS 1
traverseSTrampoline 2
traverseKTrampoline 2
runTraverseS 2
reverse 0
zipWith 2
zipWithL 2
zipWithR 2
indexed 0
zipL 1
zipR 1
mapAccumL 2
mapAccumR 2
$init$ 0
ToTraverseOpsUnapply 2
$init$ 0
ToTraverseOps 2
$init$ 0
ToTraverseOps 1
F 0
<init> 1
node 1
leaf 0
$init$ 0
ToTreeOps 1
<init> 2
$init$ 0
ToUnzipOpsUnapply 2
$init$ 0
ToUnzipOps 2
ToUnzipPairOps 2
<init> 2
unfzip 0
firsts 0
seconds 0
$init$ 0
ToUnzipOps 1
F 0
<init> 1
success 0
successNel 0
failure 0
failureNel 0
$init$ 0
ToValidationOps 1
<init> 1
set 1
tell 0
$init$ 0
ToWriterOps 1
<init> 2
fzip 1
fzipWith 3
apzip 1
$less$times$bar$times$greater 1
$init$ 0
ToZipOpsUnapply 2
$init$ 0
ToZipOps 2
$init$ 0
ToZipOps 1
F 0
<init> 0
<init> 0
<init> 1
conjunction 0
disjunction 0
$bar$u2227$bar 0
$bar$div$bslash$bar 0
$bar$u2228$bar 0
$bar$bslash$div$bar 0
$u2227 1
$div$bslash 1
$u2228 1
$bslash$div 1
$bang$bar$bar 1
$bang$amp$amp 1
$minus$minus$greater 1
$less$minus$minus 1
$less$minus$minus$greater 1
$u21D0 1
$u21CF 1
$minus$div$greater 1
$u21CD 1
$less$bslash$minus 1
unless 1
when 1
unlessM 2
unlessMU 2
whenM 2
whenMU 2
fold 2
<init> 1
$bar 1
$qmark 1
option 1
lazyOption 1
<init> 1
or 1
either 1
$qmark$qmark 2
$bang$qmark 2
<init> 0
apply 3
guard 0
prevent 0
$init$ 0
ToBooleanOpsFromBoolean 1
<init> 1
disjunction 0
validation 0
$init$ 0
ToEitherOpsFromEither 1
<init> 1
on 3
arrow 1
kleisli 1
unary_$bang 1
toValidation 2
byName 0
endo 1
comparing 1
equaling 1
succState 1
succStateZeroM 3
succStateZero 3
succStateMinM 2
succStateMin 2
predState 1
predStateZeroM 3
predStateZero 3
predStateMaxM 2
predStateMax 2
$init$ 0
ToFunction1OpsFromBoolean 1
<init> 1
flip 0
on 3
contramap 2
lift 1
byName 0
$init$ 0
ToFunction2Ops 1
<init> 1
intersperse 1
tailOption 0
toNel 0
toZipper 0
zipperEnd 0
$less$up$greater 2
takeWhileM 2
takeUntilM 2
filterM 2
findM 2
powerset 0
partitionM 2
spanM 2
breakM 2
groupWhenM 2
groupBy1 1
groupWhen 1
lookup 3
mapAccumLeft 2
mapAccumRight 2
tailz 0
initz 0
allPairs 0
adjacentPairs 0
$init$ 0
ToListOpsFromList 1
<init> 2
alter 3
intersectWithKey 3
intersectWith 3
mapKeys 2
unionWithKey 3
unionWith 3
insertWith 4
getOrAdd 4
$init$ 0
ToMapOpsFromMap 1
<init> 1
some 0
$init$ 0
ToOptionIdOps 1
<init> 1
cata 2
<init> 1
none 1
some 1
<init> 1
$bar 1
$qmark 1
ifNone 1
err 1
$bar 1
unary_$tilde 1
orZero 1
toSuccess 1
toFailure 1
toSuccessNel 1
toFailureNel 1
toRightDisjunction 1
toLeftDisjunction 1
$bslash$div$greater 1
$less$bslash$div 1
first 0
last 0
orEmpty 2
getOrElseF 2
foldLift 3
foldLiftOpt 2
toMaybe 0
$init$ 0
ToOptionOpsFromOption 1
$init$ 0
ToSortedMapOpsFromMap 1
<init> 1
interleave 1
toZipper 0
zipperEnd 0
heads 0
tails 0
zapp 1
unfoldForest 1
unfoldForestM 2
intersperse 1
$init$ 0
ToStreamOpsFromStream 1
<init> 1
plural 1
charsNel 0
charsNel 1
charsNelErr 1
unsafeCharsNel 0
parseBoolean 0
parseByte 0
parseShort 0
parseInt 0
parseLong 0
parseFloat 0
parseDouble 0
parseBigInt 0
parseBigDecimal 0
$init$ 0
ToStringOpsFromString 1
<init> 1
cata 2
toDisjunction 0
toValidation 0
toValidationNel 0
$init$ 0
ToTryOpsFromTry 1
<init> 1
intersperse 1
toNel 0
toZipper 0
zipperEnd 0
$less$up$greater 2
takeWhileM 2
takeUntilM 2
filterM 2
findM 2
powerset 0
partitionM 2
spanM 2
breakM 2
groupWhenM 2
groupWhen 1
mapAccumLeft 2
mapAccumRight 2
tailz 0
initz 0
allPairs 0
adjacentPairs 0
$init$ 0
ToVectorOpsFromVector 1
<init> 0
<init> 0
<init> 0
<init> 0
<init> 0
<init> 0
<init> 0
<init> 0
<init> 0
<init> 0
<init> 0
<init> 0
<init> 0
<init> 0
<init> 0
dup 1
<init> 0
<init> 0
dup 1
<init> 0
dup 3
copy 2
<init> 0
<init> 0
<init> 0
apply 1
finalizerHandle 1
<init> 0
apply 1
unsafePerformIO 0
unsafeInterleaveIO 0
unsafeZipWith 2
unsafeZip 1
unsafeZip_ 1
map 1
flatMap 1
liftIO 1
except 1
catchSome 2
catchLeft 0
catchSomeLeft 1
onException 1
bracket 2
ensuring 1
bracket_ 2
bracketOnError 2
bracketIO 3
using 2
<init> 0
IOSemigroup 1
<init> 0
<init> 0
<init> 0
IOMonoid 1
<init> 0
<init> 0
<init> 0
<init> 0
attempt 1
fail 1
$init$ 0
point 1
map 2
bind 2
tailrecM 2
$init$ 0
liftIO 1
$init$ 0
except 2
<init> 0
apply 1
getChar 0
putChar 1
putStr 1
putStrLn 1
readLn 0
put 2
putLn 2
hoistRunInBase 2
io 1
newIORef 1
throwIO 1
idLiftControl 2
controlIO 2
onExit 2
runRegionT 2
tailrecM 2
IOToST 1
<init> 0
read 0
write 1
mod 1
<init> 0
$init$ 0
ioRef 1
<init> 0
fold 2
map 1
flatMap 1
forall 1
exists 1
toOption 0
valueOr 1
<init> 0
apply 1
unapply 1
ioException 0
ioExceptionOr 1
$init$ 0
G 0
iso 0
close 1
$init$ 0
G 0
iso 0
liftIO 1
G 0
$init$ 0
G 0
except 2
$init$ 0
G 0
iso 0
liftControlIO 1
G 0
$init$ 0
liftControlIO 1
<init> 0
F 0
<init> 0
apply 1
$init$ 0
liftIO 1
<init> 0
F 0
<init> 0
apply 1
idTLiftIO 1
listTLiftIO 1
optionTLiftIO 1
eitherTLiftIO 1
theseTLiftIO 1
streamTLiftIO 2
kleisliLiftIO 1
writerTLiftIO 2
stateTLiftIO 2
except 2
<init> 0
apply 1
theseTMonadCatchIO 2
<init> 0
except 3
catchSome 4
catchLeft 2
catchSomeLeft 3
onException 3
bracket 4
ensuring 3
bracket_ 4
bracketOnError 4
using 4
KleisliMonadCatchIO 1
$init$ 0
<init> 0
F 0
<init> 0
apply 1
$init$ 0
<init> 0
F 0
<init> 0
apply 1
regionTMonadIO 1
$init$ 0
FM 0
FLO 0
point 1
bind 2
liftIO 1
fromLiftIO 2
idTMonadIO 1
listTMonadIO 1
optionTMonadIO 1
eitherTMonadIO 1
theseTMonadIO 2
streamTMonadIO 2
kleisliMonadIO 1
writerTMonadIO 2
stateTMonadIO 1
<init> 0
<init> 0
apply 2
$init$ 0
refCountedFinalizer 2
<init> 0
value 0
runT 1
mapT 1
<init> 0
apply 1
regionT 1
<init> 0
RegionTLiftIO 1
RegionTMonad 1
RegionTHoist 0
<init> 0
$init$ 0
M 0
point 1
bind 2
$init$ 0
L 0
liftIO 1
$init$ 0
close 1
contramap 1
<init> 0
F 0
<init> 0
apply 1
resource 1
resourceFromCloseable 0
<init> 0
contramap 2
<init> 0
read 0
mod 1
write 1
$bar$eq 1
swap 1
<init> 0
apply 0
stRef 0
<init> 0
STRefEqual 0
<init> 0
size 0
z 0
tag 0
value 0
read 1
write 2
freeze 0
fill 2
update 3
<init> 0
apply 3
stArray 3
<init> 0
apply 1
flatMap 1
map 1
<init> 0
apply 1
st 1
STToIO 1
returnST 1
runST 1
newVar 0
newArr 3
fixST 1
accumArray 6
<init> 0
stSemigroup 1
<init> 0
stMonoid 1
stMonad 0
$init$ 0
run 1
runl 1
runc 0
main 1
<init> 0
<init> 0
$init$ 0
<init> 0
$init$ 0
closeableResource 0
<init> 0
$init$ 0
forkIO 2
<init> 0
$init$ 0
<init> 0
close 1
<init> 0
$init$ 0
<init> 0
close 1
<init> 0
$init$ 0
<init> 0
close 1
<init> 0
$init$ 0
<init> 0
close 1
<init> 0
$init$ 0
<init> 0
<init> 0
<init> 0
<init> 0
<init> 0
<init> 1
put 1
putLn 1
tap 1
$init$ 0
ToEffectIdOps 1
<init> 2
$init$ 0
ToLiftControlIOOpsUnapply 2
$init$ 0
ToLiftControlIOOps 2
$init$ 0
ToLiftControlIOOps 1
F 0
<init> 2
$init$ 0
ToLiftIOOpsUnapply 2
$init$ 0
ToLiftIOOps 2
$init$ 0
ToLiftIOOps 1
F 0
<init> 0
F 0
except 1
catchSome 2
catchLeft 0
catchSomeLeft 1
onException 1
bracket 2
ensuring 1
bracket_ 2
bracketOnError 2
using 2
$init$ 0
ToMonadCatchIOOpsUnapply 2
$init$ 0
ToMonadCatchIOOps 2
$init$ 0
ToMonadCatchIOOps 2
<init> 2
$init$ 0
ToMonadControlIOOpsUnapply 2
$init$ 0
ToMonadControlIOOps 2
$init$ 0
ToMonadControlIOOps 1
F 0
<init> 2
$init$ 0
ToMonadIOOpsUnapply 2
$init$ 0
ToMonadIOOps 2
$init$ 0
ToMonadIOOps 1
F 0
<init> 2
close 0
$init$ 0
ToResourceOps 2
$init$ 0
ToResourceOps 1
F 0
<init> 0
<init> 3
$bang 1
apply 1
contramap 1
schedule 1
act 2
scheduleLastTry 1
lastTry 1
next 1
<init> 1
<init> 0
<init> 0
<init> 0
<init> 0
contramap 2
$init$ 0
actor 3
ToFunctionFromActor 1
$init$ 0
compareAndSet 2
get 0
getAndSet 1
set 1
update 1
<init> 0
$init$ 0
newAtomic 1
release 0
await 0
<init> 0
apply 0
<init> 0
read 0
write 1
<init> 0
newChan 0
<init> 2
<init> 2
read 0
write 1
<init> 0
<init> 0
flatMap 1
map 1
unsafePerformListen 1
listen 1
unsafePerformListenInterruptibly 2
listenInterruptibly 2
step 0
stepInterruptibly 1
unsafeStart 0
start 0
unsafePerformAsync 1
runAsync 1
unsafePerformAsyncInterruptibly 2
runAsyncInterruptibly 2
unsafePerformSync 0
run 0
unsafePerformSyncFor 1
unsafePerformSyncFor 1
runFor 1
runFor 1
unsafePerformSyncAttemptFor 1
unsafePerformSyncAttemptFor 1
attemptRunFor 1
attemptRunFor 1
timed 2
timed 2
unsafePerformTimed 2
unsafePerformTimed 2
after 1
after 1
<init> 0
<init> 1
<init> 1
<init> 1
<init> 2
<init> 2
<init> 0
bind 2
point 1
chooseAny 2
reduceUnordered 2
now 1
delay 1
fork 2
suspend 1
async 1
apply 2
schedule 3
gatherUnordered 1
reduceUnordered 2
<init> 0
put 1
take 0
read 0
modify 1
<init> 0
$init$ 0
newMVar 1
newEmptyMVar 0
<init> 3
take 0
put 1
read 1
write 2
<init> 0
release 0
await 0
awaitFor 2
awaitPhase 1
awaitPhaseFor 3
currentPhase 0
<init> 0
$init$ 0
newPhasedLatch 0
$init$ 0
run 1
strategy 0
$bang 1
contramap 1
<init> 0
apply 2
RunFrom 1
<init> 0
contramap 2
apply 1
<init> 0
$init$ 0
<init> 0
newThread 1
$init$ 0
<init> 0
apply 1
Executor 1
<init> 0
apply 1
<init> 0
apply 1
<init> 0
apply 1
<init> 0
apply 1
<init> 1
flatMap 1
map 1
attempt 0
onFinish 1
handle 1
handleWith 1
or 1
unsafePerformSync 0
run 0
unsafePerformSyncAttempt 0
attemptRun 0
unsafePerformAsyncInterruptibly 2
runAsyncInterruptibly 2
unsafePerformAsyncInterruptibly 1
runAsyncInterruptibly 1
unsafePerformAsync 1
runAsync 1
unsafePerformSyncFor 1
unsafePerformSyncFor 1
runFor 1
runFor 1
unsafePerformSyncAttemptFor 1
attemptRunFor 1
unsafePerformSyncAttemptFor 1
attemptRunFor 1
timed 2
timed 2
unsafePerformTimed 2
unsafePerformTimed 2
retryAccumulating 2
unsafePerformRetryAccumulating 2
retry 2
unsafePerformRetry 2
retryInternal 3
ensure 2
after 1
<init> 0
<init> 0
point 1
bind 2
chooseAny 2
reduceUnordered 2
fail 1
attempt 1
tailrecM 2
raiseError 1
handleError 2
<init> 0
fillInStackTrace 0
point 1
fail 1
now 1
delay 1
suspend 1
apply 2
unsafeStart 2
fork 2
async 1
schedule 3
gatherUnordered 2
reduceUnordered 3
Try 1
fromMaybe 2
fromDisjunction 1
tailrecM 2
$init$ 0
run 1
runl 1
runc 0
main 1
<init> 0
<init> 2
<init> 0
run 0
expireFutures 1
stop 1
withWrite 1
withRead 1
alignTimeResolution 1
valueWait 2
withTimeout 2
withTimeout 2
<init> 0
apply 0
$init$ 0
lift 2
cogroupI 2
joinI 2
mergeI 2
parFoldI 4
endStep 2
<init> 0
$init$ 0
apply 0
run 2
<init> 0
$init$ 0
map 2
flatMap 2
collect 2
filter 2
uniq 2
zipWithIndex 1
group 4
splitOn 4
cross 2
doneOr 2
apply 1
<init> 0
apply 1
map 1
flatMap 1
collect 1
uniq 1
zipWithIndex 0
$colon$up 1
$up$colon 1
join 3
merge 3
$init$ 0
empty 0
perform 1
enumPStream 2
liftE2 1
cogroupE 2
joinE 2
mergeE 2
mergeAll 3
<init> 0
enumeratorPMonoid 0
<init> 0
$init$ 0
apply 0
mapE 2
map 2
$hash$colon$colon 2
flatMap 2
flatten 2
bindM 3
collect 2
uniq 2
zipWithIndex 1
drainTo 3
reduced 3
cross 2
$init$ 0
enumeratorTSemigroup 1
$init$ 0
enumeratorTMonoid 1
enumeratorTMonad 1
<init> 0
liftM 2
apply 1
$init$ 0
enumerate 1
empty 1
enumEofT 1
perform 2
enumOne 2
enumStream 2
enumList 2
enumIterator 2
enumIoSource 4
enumReader 2
enumInputStream 2
enumIndexedSeq 4
enumArray 4
repeat 2
iterate 3
<init> 0
$init$ 0
F 0
append 2
$init$ 0
F 0
zero 0
$init$ 0
M 0
map 2
$init$ 0
bind 2
point 1
<init> 0
fold 3
apply 3
el 0
elOr 1
isEmpty 0
isEl 0
isEof 0
map 1
flatMap 1
filter 1
foreach 1
forall 1
exists 1
toString 0
<init> 0
apply 1
<init> 0
apply 0
unapply 1
<init> 0
apply 1
unapply 1
<init> 0
apply 0
unapply 1
<init> 0
<init> 0
length 1
point 1
traverseImpl 3
foldRight 3
plus 2
bind 2
inputSemigroup 1
inputEqual 1
inputShow 1
$init$ 0
emptyInput 0
elInput 1
eofInput 0
$init$ 0
iteratee 1
repeatBuild 3
collect 2
reversed 1
take 3
takeWhile 3
takeUntil 3
groupBy 3
<init> 0
value 0
foldT 3
run 1
flatMap 2
map 2
contramap 2
advance 2
advanceT 2
$greater$greater$eq$eq 2
$percent$eq 2
$amp$eq 2
mapI 2
up 2
joinI 2
sequenceI 1
zip 2
<init> 0
apply 1
<init> 0
IterateeTMonad 1
IterateeMonad 0
IterateeTMonadTransT 1
<init> 0
IterateeTMonadTrans 0
IterateeTHoistT 1
IterateeTMonadIO 1
IterateeTContravariant 1
$init$ 0
iterateeT 1
cont 2
done 3
putStrTo 2
consume 3
collectT 3
head 1
headDoneOr 3
peek 1
peekDoneOr 3
drop 2
dropWhile 2
dropUntil 2
fold 3
foldM 3
length 1
isEof 1
sum 2
$init$ 0
F 0
point 1
map 2
bind 2
$init$ 0
hoist 2
liftM 2
apply 1
$init$ 0
F 0
liftIO 1
$init$ 0
T 0
liftM 2
apply 1
$init$ 0
T 0
hoist 2
<init> 0
fold 2
apply 2
cont 0
contOr 1
mapContOr 2
mapCont 2
doneValue 0
doneValueOr 1
mapDoneValueOr 2
doneInput 0
doneInputOr 1
mapDoneInputOr 2
$greater$minus 2
pointI 1
<init> 0
<init> 0
apply 1
unapply 1
<init> 0
apply 2
unapply 1
$init$ 0
scont 1
sdone 2
<init> 0
<init> 0
apply 1
